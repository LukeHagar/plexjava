/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;


public class TranscodeSession {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public TranscodeSession withKey(String key) {
        this.key = key;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("throttled")
    public Boolean throttled;

    public TranscodeSession withThrottled(Boolean throttled) {
        this.throttled = throttled;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complete")
    public Boolean complete;

    public TranscodeSession withComplete(Boolean complete) {
        this.complete = complete;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progress")
    public Double progress;

    public TranscodeSession withProgress(Double progress) {
        this.progress = progress;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    public Integer size;

    public TranscodeSession withSize(Integer size) {
        this.size = size;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("speed")
    public Double speed;

    public TranscodeSession withSpeed(Double speed) {
        this.speed = speed;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    public Boolean error;

    public TranscodeSession withError(Boolean error) {
        this.error = error;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    public Integer duration;

    public TranscodeSession withDuration(Integer duration) {
        this.duration = duration;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remaining")
    public Integer remaining;

    public TranscodeSession withRemaining(Integer remaining) {
        this.remaining = remaining;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("context")
    public String context;

    public TranscodeSession withContext(String context) {
        this.context = context;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceVideoCodec")
    public String sourceVideoCodec;

    public TranscodeSession withSourceVideoCodec(String sourceVideoCodec) {
        this.sourceVideoCodec = sourceVideoCodec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sourceAudioCodec")
    public String sourceAudioCodec;

    public TranscodeSession withSourceAudioCodec(String sourceAudioCodec) {
        this.sourceAudioCodec = sourceAudioCodec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoDecision")
    public String videoDecision;

    public TranscodeSession withVideoDecision(String videoDecision) {
        this.videoDecision = videoDecision;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioDecision")
    public String audioDecision;

    public TranscodeSession withAudioDecision(String audioDecision) {
        this.audioDecision = audioDecision;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtitleDecision")
    public String subtitleDecision;

    public TranscodeSession withSubtitleDecision(String subtitleDecision) {
        this.subtitleDecision = subtitleDecision;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("protocol")
    public String protocol;

    public TranscodeSession withProtocol(String protocol) {
        this.protocol = protocol;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    public String container;

    public TranscodeSession withContainer(String container) {
        this.container = container;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoCodec")
    public String videoCodec;

    public TranscodeSession withVideoCodec(String videoCodec) {
        this.videoCodec = videoCodec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioCodec")
    public String audioCodec;

    public TranscodeSession withAudioCodec(String audioCodec) {
        this.audioCodec = audioCodec;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioChannels")
    public Integer audioChannels;

    public TranscodeSession withAudioChannels(Integer audioChannels) {
        this.audioChannels = audioChannels;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcodeHwRequested")
    public Boolean transcodeHwRequested;

    public TranscodeSession withTranscodeHwRequested(Boolean transcodeHwRequested) {
        this.transcodeHwRequested = transcodeHwRequested;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeStamp")
    public Double timeStamp;

    public TranscodeSession withTimeStamp(Double timeStamp) {
        this.timeStamp = timeStamp;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxOffsetAvailable")
    public Double maxOffsetAvailable;

    public TranscodeSession withMaxOffsetAvailable(Double maxOffsetAvailable) {
        this.maxOffsetAvailable = maxOffsetAvailable;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minOffsetAvailable")
    public Double minOffsetAvailable;

    public TranscodeSession withMinOffsetAvailable(Double minOffsetAvailable) {
        this.minOffsetAvailable = minOffsetAvailable;
        return this;
    }
    
    public TranscodeSession(){}
}
