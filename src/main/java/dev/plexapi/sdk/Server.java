/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetAvailableClientsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetAvailableClientsResponse;
import dev.plexapi.sdk.models.operations.GetDevicesRequestBuilder;
import dev.plexapi.sdk.models.operations.GetDevicesResponse;
import dev.plexapi.sdk.models.operations.GetMediaProvidersRequest;
import dev.plexapi.sdk.models.operations.GetMediaProvidersRequestBuilder;
import dev.plexapi.sdk.models.operations.GetMediaProvidersResponse;
import dev.plexapi.sdk.models.operations.GetMyPlexAccountRequestBuilder;
import dev.plexapi.sdk.models.operations.GetMyPlexAccountResponse;
import dev.plexapi.sdk.models.operations.GetResizedPhotoRequest;
import dev.plexapi.sdk.models.operations.GetResizedPhotoRequestBuilder;
import dev.plexapi.sdk.models.operations.GetResizedPhotoResponse;
import dev.plexapi.sdk.models.operations.GetServerCapabilitiesRequestBuilder;
import dev.plexapi.sdk.models.operations.GetServerCapabilitiesResponse;
import dev.plexapi.sdk.models.operations.GetServerIdentityRequestBuilder;
import dev.plexapi.sdk.models.operations.GetServerIdentityResponse;
import dev.plexapi.sdk.models.operations.GetServerListRequestBuilder;
import dev.plexapi.sdk.models.operations.GetServerListResponse;
import dev.plexapi.sdk.models.operations.GetServerPreferencesRequestBuilder;
import dev.plexapi.sdk.models.operations.GetServerPreferencesResponse;
import dev.plexapi.sdk.operations.GetAvailableClients;
import dev.plexapi.sdk.operations.GetDevices;
import dev.plexapi.sdk.operations.GetMediaProviders;
import dev.plexapi.sdk.operations.GetMyPlexAccount;
import dev.plexapi.sdk.operations.GetResizedPhoto;
import dev.plexapi.sdk.operations.GetServerCapabilities;
import dev.plexapi.sdk.operations.GetServerIdentity;
import dev.plexapi.sdk.operations.GetServerList;
import dev.plexapi.sdk.operations.GetServerPreferences;
import java.lang.Exception;
import java.lang.String;

/**
 * Operations against the Plex Media Server System.
 */
public class Server {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncServer asyncSDK;

    Server(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncServer(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncServer async() {
        return asyncSDK;
    }

    /**
     * Get Server Capabilities
     * 
     * <p>Get Server Capabilities
     * 
     * @return The call builder
     */
    public GetServerCapabilitiesRequestBuilder getServerCapabilities() {
        return new GetServerCapabilitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server Capabilities
     * 
     * <p>Get Server Capabilities
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerCapabilitiesResponse getServerCapabilitiesDirect() throws Exception {
        RequestlessOperation<GetServerCapabilitiesResponse> operation
            = new GetServerCapabilities.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Server Preferences
     * 
     * <p>Get Server Preferences
     * 
     * @return The call builder
     */
    public GetServerPreferencesRequestBuilder getServerPreferences() {
        return new GetServerPreferencesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server Preferences
     * 
     * <p>Get Server Preferences
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerPreferencesResponse getServerPreferencesDirect() throws Exception {
        RequestlessOperation<GetServerPreferencesResponse> operation
            = new GetServerPreferences.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Available Clients
     * 
     * <p>Get Available Clients
     * 
     * @return The call builder
     */
    public GetAvailableClientsRequestBuilder getAvailableClients() {
        return new GetAvailableClientsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Available Clients
     * 
     * <p>Get Available Clients
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAvailableClientsResponse getAvailableClientsDirect() throws Exception {
        RequestlessOperation<GetAvailableClientsResponse> operation
            = new GetAvailableClients.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Devices
     * 
     * <p>Get Devices
     * 
     * @return The call builder
     */
    public GetDevicesRequestBuilder getDevices() {
        return new GetDevicesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Devices
     * 
     * <p>Get Devices
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetDevicesResponse getDevicesDirect() throws Exception {
        RequestlessOperation<GetDevicesResponse> operation
            = new GetDevices.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Server Identity
     * 
     * <p>This request is useful to determine if the server is online or offline
     * 
     * @return The call builder
     */
    public GetServerIdentityRequestBuilder getServerIdentity() {
        return new GetServerIdentityRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server Identity
     * 
     * <p>This request is useful to determine if the server is online or offline
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerIdentityResponse getServerIdentityDirect() throws Exception {
        RequestlessOperation<GetServerIdentityResponse> operation
            = new GetServerIdentity.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get MyPlex Account
     * 
     * <p>Returns MyPlex Account Information
     * 
     * @return The call builder
     */
    public GetMyPlexAccountRequestBuilder getMyPlexAccount() {
        return new GetMyPlexAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Get MyPlex Account
     * 
     * <p>Returns MyPlex Account Information
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMyPlexAccountResponse getMyPlexAccountDirect() throws Exception {
        RequestlessOperation<GetMyPlexAccountResponse> operation
            = new GetMyPlexAccount.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get a Resized Photo
     * 
     * <p>Plex's Photo transcoder is used throughout the service to serve images at specified sizes.
     * 
     * @return The call builder
     */
    public GetResizedPhotoRequestBuilder getResizedPhoto() {
        return new GetResizedPhotoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Resized Photo
     * 
     * <p>Plex's Photo transcoder is used throughout the service to serve images at specified sizes.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetResizedPhotoResponse getResizedPhoto(GetResizedPhotoRequest request) throws Exception {
        RequestOperation<GetResizedPhotoRequest, GetResizedPhotoResponse> operation
              = new GetResizedPhoto.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Media Providers
     * 
     * <p>Retrieves media providers and their features from the Plex server.
     * 
     * @return The call builder
     */
    public GetMediaProvidersRequestBuilder getMediaProviders() {
        return new GetMediaProvidersRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Media Providers
     * 
     * <p>Retrieves media providers and their features from the Plex server.
     * 
     * @param xPlexToken An authentication token, obtained from plex.tv
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMediaProvidersResponse getMediaProviders(String xPlexToken) throws Exception {
        GetMediaProvidersRequest request =
            GetMediaProvidersRequest
                .builder()
                .xPlexToken(xPlexToken)
                .build();
        RequestOperation<GetMediaProvidersRequest, GetMediaProvidersResponse> operation
              = new GetMediaProviders.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Server List
     * 
     * <p>Get Server List
     * 
     * @return The call builder
     */
    public GetServerListRequestBuilder getServerList() {
        return new GetServerListRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server List
     * 
     * <p>Get Server List
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerListResponse getServerListDirect() throws Exception {
        RequestlessOperation<GetServerListResponse> operation
            = new GetServerList.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

}
