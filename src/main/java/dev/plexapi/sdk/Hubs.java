/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetGlobalHubsRequest;
import dev.plexapi.sdk.models.operations.GetGlobalHubsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetGlobalHubsResponse;
import dev.plexapi.sdk.models.operations.GetLibraryHubsRequest;
import dev.plexapi.sdk.models.operations.GetLibraryHubsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetLibraryHubsResponse;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedRequest;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedRequestBuilder;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedResponse;
import dev.plexapi.sdk.models.operations.OnlyTransient;
import dev.plexapi.sdk.models.operations.QueryParamOnlyTransient;
import dev.plexapi.sdk.operations.GetGlobalHubs;
import dev.plexapi.sdk.operations.GetLibraryHubs;
import dev.plexapi.sdk.operations.GetRecentlyAdded;
import java.lang.Double;
import java.lang.Exception;
import java.util.Optional;

/**
 * Hubs are a structured two-dimensional container for media, generally represented by multiple horizontal rows.
 */
public class Hubs {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncHubs asyncSDK;

    Hubs(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncHubs(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncHubs async() {
        return asyncSDK;
    }

    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @return The call builder
     */
    public GetGlobalHubsRequestBuilder getGlobalHubs() {
        return new GetGlobalHubsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGlobalHubsResponse getGlobalHubsDirect() throws Exception {
        return getGlobalHubs(Optional.empty(), Optional.empty());
    }

    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @param count The number of items to return with each hub.
     * @param onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGlobalHubsResponse getGlobalHubs(Optional<Double> count, Optional<? extends OnlyTransient> onlyTransient) throws Exception {
        GetGlobalHubsRequest request =
            GetGlobalHubsRequest
                .builder()
                .count(count)
                .onlyTransient(onlyTransient)
                .build();
        RequestOperation<GetGlobalHubsRequest, GetGlobalHubsResponse> operation
              = new GetGlobalHubs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Recently Added
     * 
     * <p>This endpoint will return the recently added content.
     * 
     * @return The call builder
     */
    public GetRecentlyAddedRequestBuilder getRecentlyAdded() {
        return new GetRecentlyAddedRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Recently Added
     * 
     * <p>This endpoint will return the recently added content.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRecentlyAddedResponse getRecentlyAdded(GetRecentlyAddedRequest request) throws Exception {
        RequestOperation<GetRecentlyAddedRequest, GetRecentlyAddedResponse> operation
              = new GetRecentlyAdded.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @return The call builder
     */
    public GetLibraryHubsRequestBuilder getLibraryHubs() {
        return new GetLibraryHubsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @param sectionId the Id of the library to query
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLibraryHubsResponse getLibraryHubs(double sectionId) throws Exception {
        return getLibraryHubs(sectionId, Optional.empty(), Optional.empty());
    }

    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @param sectionId the Id of the library to query
     * @param count The number of items to return with each hub.
     * @param onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetLibraryHubsResponse getLibraryHubs(
            double sectionId, Optional<Double> count,
            Optional<? extends QueryParamOnlyTransient> onlyTransient) throws Exception {
        GetLibraryHubsRequest request =
            GetLibraryHubsRequest
                .builder()
                .sectionId(sectionId)
                .count(count)
                .onlyTransient(onlyTransient)
                .build();
        RequestOperation<GetLibraryHubsRequest, GetLibraryHubsResponse> operation
              = new GetLibraryHubs.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
