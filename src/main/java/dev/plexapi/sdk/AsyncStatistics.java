/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.GetBandwidthStatisticsRequest;
import dev.plexapi.sdk.models.operations.GetResourcesStatisticsRequest;
import dev.plexapi.sdk.models.operations.GetStatisticsRequest;
import dev.plexapi.sdk.models.operations.async.GetBandwidthStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetBandwidthStatisticsResponse;
import dev.plexapi.sdk.models.operations.async.GetResourcesStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetResourcesStatisticsResponse;
import dev.plexapi.sdk.models.operations.async.GetStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetStatisticsResponse;
import dev.plexapi.sdk.operations.GetBandwidthStatistics;
import dev.plexapi.sdk.operations.GetResourcesStatistics;
import dev.plexapi.sdk.operations.GetStatistics;
import java.lang.Long;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * API Calls that perform operations with Plex Media Server Statistics
 */
public class AsyncStatistics {
    private final SDKConfiguration sdkConfiguration;
    private final Statistics syncSDK;

    AsyncStatistics(Statistics syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Statistics sync() {
        return syncSDK;
    }


    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @return The async call builder
     */
    public GetStatisticsRequestBuilder getStatistics() {
        return new GetStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @return CompletableFuture&lt;GetStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetStatisticsResponse> getStatisticsDirect() {
        return getStatistics(Optional.empty());
    }

    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return CompletableFuture&lt;GetStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetStatisticsResponse> getStatistics(Optional<Long> timespan) {
        GetStatisticsRequest request =
            GetStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        AsyncRequestOperation<GetStatisticsRequest, GetStatisticsResponse> operation
              = new GetStatistics.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @return The async call builder
     */
    public GetResourcesStatisticsRequestBuilder getResourcesStatistics() {
        return new GetResourcesStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @return CompletableFuture&lt;GetResourcesStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetResourcesStatisticsResponse> getResourcesStatisticsDirect() {
        return getResourcesStatistics(Optional.empty());
    }

    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return CompletableFuture&lt;GetResourcesStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetResourcesStatisticsResponse> getResourcesStatistics(Optional<Long> timespan) {
        GetResourcesStatisticsRequest request =
            GetResourcesStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        AsyncRequestOperation<GetResourcesStatisticsRequest, GetResourcesStatisticsResponse> operation
              = new GetResourcesStatistics.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @return The async call builder
     */
    public GetBandwidthStatisticsRequestBuilder getBandwidthStatistics() {
        return new GetBandwidthStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @return CompletableFuture&lt;GetBandwidthStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetBandwidthStatisticsResponse> getBandwidthStatisticsDirect() {
        return getBandwidthStatistics(Optional.empty());
    }

    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return CompletableFuture&lt;GetBandwidthStatisticsResponse&gt; - The async response
     */
    public CompletableFuture<GetBandwidthStatisticsResponse> getBandwidthStatistics(Optional<Long> timespan) {
        GetBandwidthStatisticsRequest request =
            GetBandwidthStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        AsyncRequestOperation<GetBandwidthStatisticsRequest, GetBandwidthStatisticsResponse> operation
              = new GetBandwidthStatistics.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
