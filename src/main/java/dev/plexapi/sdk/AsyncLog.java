/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;
import static dev.plexapi.sdk.operations.Operations.AsyncRequestlessOperation;

import dev.plexapi.sdk.models.operations.Level;
import dev.plexapi.sdk.models.operations.LogLineRequest;
import dev.plexapi.sdk.models.operations.async.EnablePaperTrailRequestBuilder;
import dev.plexapi.sdk.models.operations.async.EnablePaperTrailResponse;
import dev.plexapi.sdk.models.operations.async.LogLineRequestBuilder;
import dev.plexapi.sdk.models.operations.async.LogLineResponse;
import dev.plexapi.sdk.models.operations.async.LogMultiLineRequestBuilder;
import dev.plexapi.sdk.models.operations.async.LogMultiLineResponse;
import dev.plexapi.sdk.operations.EnablePaperTrail;
import dev.plexapi.sdk.operations.LogLine;
import dev.plexapi.sdk.operations.LogMultiLine;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

/**
 * Submit logs to the Log Handler for Plex Media Server
 */
public class AsyncLog {
    private final SDKConfiguration sdkConfiguration;
    private final Log syncSDK;

    AsyncLog(Log syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Log sync() {
        return syncSDK;
    }


    /**
     * Logging a single line message.
     * 
     * <p>This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * 
     * @return The async call builder
     */
    public LogLineRequestBuilder logLine() {
        return new LogLineRequestBuilder(sdkConfiguration);
    }

    /**
     * Logging a single line message.
     * 
     * <p>This endpoint will write a single-line log message, including a level and source to the main Plex Media Server log.
     * 
     * @param level An integer log level to write to the PMS log with.
     *         0: Error
     *         1: Warning
     *         2: Info
     *         3: Debug
     *         4: Verbose
     *         
     * @param message The text of the message to write to the log.
     * @param source a string indicating the source of the message.
     * @return CompletableFuture&lt;LogLineResponse&gt; - The async response
     */
    public CompletableFuture<LogLineResponse> logLine(
            Level level, String message,
            String source) {
        LogLineRequest request =
            LogLineRequest
                .builder()
                .level(level)
                .message(message)
                .source(source)
                .build();
        AsyncRequestOperation<LogLineRequest, LogLineResponse> operation
              = new LogLine.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Logging a multi-line message
     * 
     * <p>This endpoint allows for the batch addition of log entries to the main Plex Media Server log.
     * It accepts a text/plain request body, where each line represents a distinct log entry.
     * Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as 'level', 'message', and 'source'.
     * 
     * <p>Log entries are separated by a newline character (`\n`).
     * Each entry's parameters should be URL-encoded to ensure accurate parsing and handling of special characters.
     * This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.
     * 
     * <p>The 'level' parameter specifies the log entry's severity or importance, with the following integer values:
     * - `0`: Error - Critical issues that require immediate attention.
     * - `1`: Warning - Important events that are not critical but may indicate potential issues.
     * - `2`: Info - General informational messages about system operation.
     * - `3`: Debug - Detailed information useful for debugging purposes.
     * - `4`: Verbose - Highly detailed diagnostic information for in-depth analysis.
     * 
     * <p>The 'message' parameter contains the log text, and 'source' identifies the log message's origin (e.g., an application name or module).
     * 
     * <p>Example of a single log entry format:
     * `level=4&amp;message=Sample%20log%20entry&amp;source=applicationName`
     * 
     * <p>Ensure each parameter is properly URL-encoded to avoid interpretation issues.
     * 
     * @return The async call builder
     */
    public LogMultiLineRequestBuilder logMultiLine() {
        return new LogMultiLineRequestBuilder(sdkConfiguration);
    }

    /**
     * Logging a multi-line message
     * 
     * <p>This endpoint allows for the batch addition of log entries to the main Plex Media Server log.
     * It accepts a text/plain request body, where each line represents a distinct log entry.
     * Each log entry consists of URL-encoded key-value pairs, specifying log attributes such as 'level', 'message', and 'source'.
     * 
     * <p>Log entries are separated by a newline character (`\n`).
     * Each entry's parameters should be URL-encoded to ensure accurate parsing and handling of special characters.
     * This method is efficient for logging multiple entries in a single API call, reducing the overhead of multiple individual requests.
     * 
     * <p>The 'level' parameter specifies the log entry's severity or importance, with the following integer values:
     * - `0`: Error - Critical issues that require immediate attention.
     * - `1`: Warning - Important events that are not critical but may indicate potential issues.
     * - `2`: Info - General informational messages about system operation.
     * - `3`: Debug - Detailed information useful for debugging purposes.
     * - `4`: Verbose - Highly detailed diagnostic information for in-depth analysis.
     * 
     * <p>The 'message' parameter contains the log text, and 'source' identifies the log message's origin (e.g., an application name or module).
     * 
     * <p>Example of a single log entry format:
     * `level=4&amp;message=Sample%20log%20entry&amp;source=applicationName`
     * 
     * <p>Ensure each parameter is properly URL-encoded to avoid interpretation issues.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;LogMultiLineResponse&gt; - The async response
     */
    public CompletableFuture<LogMultiLineResponse> logMultiLine(String request) {
        AsyncRequestOperation<String, LogMultiLineResponse> operation
              = new LogMultiLine.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Enabling Papertrail
     * 
     * <p>This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * 
     * @return The async call builder
     */
    public EnablePaperTrailRequestBuilder enablePaperTrail() {
        return new EnablePaperTrailRequestBuilder(sdkConfiguration);
    }

    /**
     * Enabling Papertrail
     * 
     * <p>This endpoint will enable all Plex Media Serverlogs to be sent to the Papertrail networked logging site for a period of time.
     * 
     * @return CompletableFuture&lt;EnablePaperTrailResponse&gt; - The async response
     */
    public CompletableFuture<EnablePaperTrailResponse> enablePaperTrailDirect() {
        AsyncRequestlessOperation<EnablePaperTrailResponse> operation
            = new EnablePaperTrail.Async(sdkConfiguration);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }

}
