/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.GetUsersRequest;
import dev.plexapi.sdk.models.operations.async.GetUsersRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetUsersResponse;
import dev.plexapi.sdk.operations.GetUsers;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;


public class AsyncUsers {
    private final SDKConfiguration sdkConfiguration;
    private final Users syncSDK;

    AsyncUsers(Users syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Users sync() {
        return syncSDK;
    }


    /**
     * Get list of all connected users
     * 
     * <p>Get list of all users that are friends and have library access with the provided Plex authentication token
     * 
     * @return The async call builder
     */
    public GetUsersRequestBuilder getUsers() {
        return new GetUsersRequestBuilder(sdkConfiguration);
    }

    /**
     * Get list of all connected users
     * 
     * <p>Get list of all users that are friends and have library access with the provided Plex authentication token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetUsersResponse&gt; - The async response
     */
    public CompletableFuture<GetUsersResponse> getUsers(GetUsersRequest request) {
        return getUsers(request, Optional.empty());
    }

    /**
     * Get list of all connected users
     * 
     * <p>Get list of all users that are friends and have library access with the provided Plex authentication token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @return CompletableFuture&lt;GetUsersResponse&gt; - The async response
     */
    public CompletableFuture<GetUsersResponse> getUsers(GetUsersRequest request, Optional<String> serverURL) {
        AsyncRequestOperation<GetUsersRequest, GetUsersResponse> operation
              = new GetUsers.Async(sdkConfiguration, serverURL);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
