/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.GetSessionHistoryRequest;
import dev.plexapi.sdk.models.operations.QueryParamFilter;
import dev.plexapi.sdk.models.operations.StopTranscodeSessionRequest;
import dev.plexapi.sdk.models.operations.async.GetSessionHistoryRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetSessionHistoryResponse;
import dev.plexapi.sdk.models.operations.async.GetSessionsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetSessionsResponse;
import dev.plexapi.sdk.models.operations.async.GetTranscodeSessionsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetTranscodeSessionsResponse;
import dev.plexapi.sdk.models.operations.async.StopTranscodeSessionRequestBuilder;
import dev.plexapi.sdk.models.operations.async.StopTranscodeSessionResponse;
import dev.plexapi.sdk.operations.GetSessionHistory;
import dev.plexapi.sdk.operations.GetSessions;
import dev.plexapi.sdk.operations.GetTranscodeSessions;
import dev.plexapi.sdk.operations.StopTranscodeSession;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * API Calls that perform search operations with Plex Media Server Sessions
 */
public class AsyncSessions {
    private final SDKConfiguration sdkConfiguration;
    private final Sessions syncSDK;

    AsyncSessions(Sessions syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Sessions sync() {
        return syncSDK;
    }


    /**
     * Get Active Sessions
     * 
     * <p>This will retrieve the "Now Playing" Information of the PMS.
     * 
     * @return The async call builder
     */
    public GetSessionsRequestBuilder getSessions() {
        return new GetSessionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Active Sessions
     * 
     * <p>This will retrieve the "Now Playing" Information of the PMS.
     * 
     * @return CompletableFuture&lt;GetSessionsResponse&gt; - The async response
     */
    public CompletableFuture<GetSessionsResponse> getSessionsDirect() {
        AsyncRequestlessOperation<GetSessionsResponse> operation
            = new GetSessions.Async(sdkConfiguration);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @return The async call builder
     */
    public GetSessionHistoryRequestBuilder getSessionHistory() {
        return new GetSessionHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @return CompletableFuture&lt;GetSessionHistoryResponse&gt; - The async response
     */
    public CompletableFuture<GetSessionHistoryResponse> getSessionHistoryDirect() {
        return getSessionHistory(
                Optional.empty(), Optional.empty(), Optional.empty(),
                Optional.empty());
    }

    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @param sort Sorts the results by the specified field followed by the direction (asc, desc)
     *         
     * @param accountId Filter results by those that are related to a specific users id
     *         
     * @param filter Filters content by field and direction/equality
     *         (Unknown if viewedAt is the only supported column)
     *         
     * @param librarySectionID Filters the results based on the id of a valid library section
     *         
     * @return CompletableFuture&lt;GetSessionHistoryResponse&gt; - The async response
     */
    public CompletableFuture<GetSessionHistoryResponse> getSessionHistory(
            Optional<String> sort, Optional<Long> accountId,
            Optional<? extends QueryParamFilter> filter, Optional<Long> librarySectionID) {
        GetSessionHistoryRequest request =
            GetSessionHistoryRequest
                .builder()
                .sort(sort)
                .accountId(accountId)
                .filter(filter)
                .librarySectionID(librarySectionID)
                .build();
        AsyncRequestOperation<GetSessionHistoryRequest, GetSessionHistoryResponse> operation
              = new GetSessionHistory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Transcode Sessions
     * 
     * <p>Get Transcode Sessions
     * 
     * @return The async call builder
     */
    public GetTranscodeSessionsRequestBuilder getTranscodeSessions() {
        return new GetTranscodeSessionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transcode Sessions
     * 
     * <p>Get Transcode Sessions
     * 
     * @return CompletableFuture&lt;GetTranscodeSessionsResponse&gt; - The async response
     */
    public CompletableFuture<GetTranscodeSessionsResponse> getTranscodeSessionsDirect() {
        AsyncRequestlessOperation<GetTranscodeSessionsResponse> operation
            = new GetTranscodeSessions.Async(sdkConfiguration);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Stop a Transcode Session
     * 
     * <p>Stop a Transcode Session
     * 
     * @return The async call builder
     */
    public StopTranscodeSessionRequestBuilder stopTranscodeSession() {
        return new StopTranscodeSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Stop a Transcode Session
     * 
     * <p>Stop a Transcode Session
     * 
     * @param sessionKey the Key of the transcode session to stop
     * @return CompletableFuture&lt;StopTranscodeSessionResponse&gt; - The async response
     */
    public CompletableFuture<StopTranscodeSessionResponse> stopTranscodeSession(String sessionKey) {
        StopTranscodeSessionRequest request =
            StopTranscodeSessionRequest
                .builder()
                .sessionKey(sessionKey)
                .build();
        AsyncRequestOperation<StopTranscodeSessionRequest, StopTranscodeSessionResponse> operation
              = new StopTranscodeSession.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
