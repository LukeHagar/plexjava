/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.GetWatchListRequest;
import dev.plexapi.sdk.models.operations.async.GetWatchListRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetWatchListResponse;
import dev.plexapi.sdk.operations.GetWatchList;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * API Calls that perform operations with Plex Media Server Watchlists
 */
public class AsyncWatchlist {
    private final SDKConfiguration sdkConfiguration;
    private final Watchlist syncSDK;

    AsyncWatchlist(Watchlist syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Watchlist sync() {
        return syncSDK;
    }


    /**
     * Get User Watchlist
     * 
     * <p>Get User Watchlist
     * 
     * @return The async call builder
     */
    public GetWatchListRequestBuilder getWatchList() {
        return new GetWatchListRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User Watchlist
     * 
     * <p>Get User Watchlist
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetWatchListResponse&gt; - The async response
     */
    public CompletableFuture<GetWatchListResponse> getWatchList(GetWatchListRequest request) {
        return getWatchList(request, Optional.empty());
    }

    /**
     * Get User Watchlist
     * 
     * <p>Get User Watchlist
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @return CompletableFuture&lt;GetWatchListResponse&gt; - The async response
     */
    public CompletableFuture<GetWatchListResponse> getWatchList(GetWatchListRequest request, Optional<String> serverURL) {
        AsyncRequestOperation<GetWatchListRequest, GetWatchListResponse> operation
              = new GetWatchList.Async(sdkConfiguration, serverURL);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
