/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;
/**
 * Plex-API: An Open API Spec for interacting with Plex.tv and Plex Media Server
 * 
 * <p># Plex Media Server OpenAPI Specification
 * 
 * <p>An Open Source OpenAPI Specification for Plex Media Server
 * 
 * <p>Automation and SDKs provided by [Speakeasy](https://speakeasyapi.dev/)
 * 
 * <p>## Documentation
 * 
 * <p>[API Documentation](https://plexapi.dev)
 * 
 * <p>## SDKs
 * 
 * <p>The following SDKs are generated from the OpenAPI Specification. They are automatically generated and may not be fully tested. If you find any issues, please open an issue on the [main specification Repository](https://github.com/LukeHagar/plex-api-spec).
 * 
 * <p>| Language              | Repository                                        | Releases                                                                                         | Other                                                   |
 * | --------------------- | ------------------------------------------------- | ------------------------------------------------------------------------------------------------ | ------------------------------------------------------- |
 * | Python                | [GitHub](https://github.com/LukeHagar/plexpy)     | [PyPI](https://pypi.org/project/plex-api-client/)                                                | -                                                       |
 * | JavaScript/TypeScript | [GitHub](https://github.com/LukeHagar/plexjs)     | [NPM](https://www.npmjs.com/package/@lukehagar/plexjs) \ [JSR](https://jsr.io/@lukehagar/plexjs) | -                                                       |
 * | Go                    | [GitHub](https://github.com/LukeHagar/plexgo)     | [Releases](https://github.com/LukeHagar/plexgo/releases)                                         | [GoDoc](https://pkg.go.dev/github.com/LukeHagar/plexgo) |
 * | Ruby                  | [GitHub](https://github.com/LukeHagar/plexruby)   | [Releases](https://github.com/LukeHagar/plexruby/releases)                                       | -                                                       |
 * | Swift                 | [GitHub](https://github.com/LukeHagar/plexswift)  | [Releases](https://github.com/LukeHagar/plexswift/releases)                                      | -                                                       |
 * | PHP                   | [GitHub](https://github.com/LukeHagar/plexphp)    | [Releases](https://github.com/LukeHagar/plexphp/releases)                                        | -                                                       |
 * | Java                  | [GitHub](https://github.com/LukeHagar/plexjava)   | [Releases](https://github.com/LukeHagar/plexjava/releases)                                       | -                                                       |
 * | C#                    | [GitHub](https://github.com/LukeHagar/plexcsharp) | [Releases](https://github.com/LukeHagar/plexcsharp/releases)                                     | -
 */
public class AsyncPlexAPI {
    /**
     * Operations against the Plex Media Server System.
     */
    private final AsyncServer server;
    /**
     * API Calls interacting with Plex Media Server Media
     */
    private final AsyncMedia media;
    /**
     * API Calls that perform operations with Plex Media Server Videos
     */
    private final AsyncVideo video;
    /**
     * Activities are awesome. They provide a way to monitor and control asynchronous operations on the server. In order to receive real-time updates for activities, a client would normally subscribe via either EventSource or Websocket endpoints.
     * Activities are associated with HTTP replies via a special `X-Plex-Activity` header which contains the UUID of the activity.
     * Activities are optional cancellable. If cancellable, they may be cancelled via the `DELETE` endpoint. Other details:
     * - They can contain a `progress` (from 0 to 100) marking the percent completion of the activity.
     * - They must contain an `type` which is used by clients to distinguish the specific activity.
     * - They may contain a `Context` object with attributes which associate the activity with various specific entities (items, libraries, etc.)
     * - The may contain a `Response` object which attributes which represent the result of the asynchronous operation.
     */
    private final AsyncActivities activities;
    /**
     * Butler is the task manager of the Plex Media Server Ecosystem.
     */
    private final AsyncButler butler;
    /**
     * API Calls that perform operations directly against https://Plex.tv
     */
    private final AsyncPlex plex;
    /**
     * Hubs are a structured two-dimensional container for media, generally represented by multiple horizontal rows.
     */
    private final AsyncHubs hubs;
    /**
     * API Calls that perform search operations with Plex Media Server
     */
    private final AsyncSearch search;
    /**
     * API Calls interacting with Plex Media Server Libraries
     */
    private final AsyncLibrary library;
    /**
     * API Calls that perform operations with Plex Media Server Watchlists
     */
    private final AsyncWatchlist watchlist;
    /**
     * Submit logs to the Log Handler for Plex Media Server
     */
    private final AsyncLog log;
    /**
     * Playlists are ordered collections of media. They can be dumb (just a list of media) or smart (based on a media query, such as "all albums from 2017").
     * They can be organized in (optionally nesting) folders.
     * Retrieving a playlist, or its items, will trigger a refresh of its metadata.
     * This may cause the duration and number of items to change.
     */
    private final AsyncPlaylists playlists;
    /**
     * API Calls regarding authentication for Plex Media Server
     */
    private final AsyncAuthentication authentication;
    /**
     * API Calls that perform operations with Plex Media Server Statistics
     */
    private final AsyncStatistics statistics;
    /**
     * API Calls that perform search operations with Plex Media Server Sessions
     */
    private final AsyncSessions sessions;
    /**
     * This describes the API for searching and applying updates to the Plex Media Server.
     * Updates to the status can be observed via the Event API.
     */
    private final AsyncUpdater updater;

    private final AsyncUsers users;
    /**
     * Operations against the Plex Media Server System.
     */
    public AsyncServer server() {
        return server;
    }
    /**
     * API Calls interacting with Plex Media Server Media
     */
    public AsyncMedia media() {
        return media;
    }
    /**
     * API Calls that perform operations with Plex Media Server Videos
     */
    public AsyncVideo video() {
        return video;
    }
    /**
     * Activities are awesome. They provide a way to monitor and control asynchronous operations on the server. In order to receive real-time updates for activities, a client would normally subscribe via either EventSource or Websocket endpoints.
     * Activities are associated with HTTP replies via a special `X-Plex-Activity` header which contains the UUID of the activity.
     * Activities are optional cancellable. If cancellable, they may be cancelled via the `DELETE` endpoint. Other details:
     * - They can contain a `progress` (from 0 to 100) marking the percent completion of the activity.
     * - They must contain an `type` which is used by clients to distinguish the specific activity.
     * - They may contain a `Context` object with attributes which associate the activity with various specific entities (items, libraries, etc.)
     * - The may contain a `Response` object which attributes which represent the result of the asynchronous operation.
     */
    public AsyncActivities activities() {
        return activities;
    }
    /**
     * Butler is the task manager of the Plex Media Server Ecosystem.
     */
    public AsyncButler butler() {
        return butler;
    }
    /**
     * API Calls that perform operations directly against https://Plex.tv
     */
    public AsyncPlex plex() {
        return plex;
    }
    /**
     * Hubs are a structured two-dimensional container for media, generally represented by multiple horizontal rows.
     */
    public AsyncHubs hubs() {
        return hubs;
    }
    /**
     * API Calls that perform search operations with Plex Media Server
     */
    public AsyncSearch search() {
        return search;
    }
    /**
     * API Calls interacting with Plex Media Server Libraries
     */
    public AsyncLibrary library() {
        return library;
    }
    /**
     * API Calls that perform operations with Plex Media Server Watchlists
     */
    public AsyncWatchlist watchlist() {
        return watchlist;
    }
    /**
     * Submit logs to the Log Handler for Plex Media Server
     */
    public AsyncLog log() {
        return log;
    }
    /**
     * Playlists are ordered collections of media. They can be dumb (just a list of media) or smart (based on a media query, such as "all albums from 2017").
     * They can be organized in (optionally nesting) folders.
     * Retrieving a playlist, or its items, will trigger a refresh of its metadata.
     * This may cause the duration and number of items to change.
     */
    public AsyncPlaylists playlists() {
        return playlists;
    }
    /**
     * API Calls regarding authentication for Plex Media Server
     */
    public AsyncAuthentication authentication() {
        return authentication;
    }
    /**
     * API Calls that perform operations with Plex Media Server Statistics
     */
    public AsyncStatistics statistics() {
        return statistics;
    }
    /**
     * API Calls that perform search operations with Plex Media Server Sessions
     */
    public AsyncSessions sessions() {
        return sessions;
    }
    /**
     * This describes the API for searching and applying updates to the Plex Media Server.
     * Updates to the status can be observed via the Event API.
     */
    public AsyncUpdater updater() {
        return updater;
    }

    public AsyncUsers users() {
        return users;
    }

    private final SDKConfiguration sdkConfiguration;
    private final PlexAPI syncSDK;

    AsyncPlexAPI(PlexAPI syncSDK, SDKConfiguration sdkConfiguration) {
        this.syncSDK = syncSDK;
        this.sdkConfiguration = sdkConfiguration;
        this.server = new AsyncServer(syncSDK.server(), sdkConfiguration);
        this.media = new AsyncMedia(syncSDK.media(), sdkConfiguration);
        this.video = new AsyncVideo(syncSDK.video(), sdkConfiguration);
        this.activities = new AsyncActivities(syncSDK.activities(), sdkConfiguration);
        this.butler = new AsyncButler(syncSDK.butler(), sdkConfiguration);
        this.plex = new AsyncPlex(syncSDK.plex(), sdkConfiguration);
        this.hubs = new AsyncHubs(syncSDK.hubs(), sdkConfiguration);
        this.search = new AsyncSearch(syncSDK.search(), sdkConfiguration);
        this.library = new AsyncLibrary(syncSDK.library(), sdkConfiguration);
        this.watchlist = new AsyncWatchlist(syncSDK.watchlist(), sdkConfiguration);
        this.log = new AsyncLog(syncSDK.log(), sdkConfiguration);
        this.playlists = new AsyncPlaylists(syncSDK.playlists(), sdkConfiguration);
        this.authentication = new AsyncAuthentication(syncSDK.authentication(), sdkConfiguration);
        this.statistics = new AsyncStatistics(syncSDK.statistics(), sdkConfiguration);
        this.sessions = new AsyncSessions(syncSDK.sessions(), sdkConfiguration);
        this.updater = new AsyncUpdater(syncSDK.updater(), sdkConfiguration);
        this.users = new AsyncUsers(syncSDK.users(), sdkConfiguration);
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public PlexAPI sync() {
        return syncSDK;
    }
}
