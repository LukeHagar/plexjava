/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetSessionHistoryRequest;
import dev.plexapi.sdk.models.operations.GetSessionHistoryRequestBuilder;
import dev.plexapi.sdk.models.operations.GetSessionHistoryResponse;
import dev.plexapi.sdk.models.operations.GetSessionsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetSessionsResponse;
import dev.plexapi.sdk.models.operations.GetTranscodeSessionsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetTranscodeSessionsResponse;
import dev.plexapi.sdk.models.operations.QueryParamFilter;
import dev.plexapi.sdk.models.operations.StopTranscodeSessionRequest;
import dev.plexapi.sdk.models.operations.StopTranscodeSessionRequestBuilder;
import dev.plexapi.sdk.models.operations.StopTranscodeSessionResponse;
import dev.plexapi.sdk.operations.GetSessionHistory;
import dev.plexapi.sdk.operations.GetSessions;
import dev.plexapi.sdk.operations.GetTranscodeSessions;
import dev.plexapi.sdk.operations.StopTranscodeSession;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;

/**
 * API Calls that perform search operations with Plex Media Server Sessions
 */
public class Sessions {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncSessions asyncSDK;

    Sessions(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncSessions(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncSessions async() {
        return asyncSDK;
    }

    /**
     * Get Active Sessions
     * 
     * <p>This will retrieve the "Now Playing" Information of the PMS.
     * 
     * @return The call builder
     */
    public GetSessionsRequestBuilder getSessions() {
        return new GetSessionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Active Sessions
     * 
     * <p>This will retrieve the "Now Playing" Information of the PMS.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSessionsResponse getSessionsDirect() throws Exception {
        RequestlessOperation<GetSessionsResponse> operation
            = new GetSessions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @return The call builder
     */
    public GetSessionHistoryRequestBuilder getSessionHistory() {
        return new GetSessionHistoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSessionHistoryResponse getSessionHistoryDirect() throws Exception {
        return getSessionHistory(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * Get Session History
     * 
     * <p>This will Retrieve a listing of all history views.
     * 
     * @param sort Sorts the results by the specified field followed by the direction (asc, desc)
     *         
     * @param accountId Filter results by those that are related to a specific users id
     *         
     * @param filter Filters content by field and direction/equality
     *         (Unknown if viewedAt is the only supported column)
     *         
     * @param librarySectionID Filters the results based on the id of a valid library section
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSessionHistoryResponse getSessionHistory(
            Optional<String> sort, Optional<Long> accountId,
            Optional<? extends QueryParamFilter> filter, Optional<Long> librarySectionID) throws Exception {
        GetSessionHistoryRequest request =
            GetSessionHistoryRequest
                .builder()
                .sort(sort)
                .accountId(accountId)
                .filter(filter)
                .librarySectionID(librarySectionID)
                .build();
        RequestOperation<GetSessionHistoryRequest, GetSessionHistoryResponse> operation
              = new GetSessionHistory.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Transcode Sessions
     * 
     * <p>Get Transcode Sessions
     * 
     * @return The call builder
     */
    public GetTranscodeSessionsRequestBuilder getTranscodeSessions() {
        return new GetTranscodeSessionsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Transcode Sessions
     * 
     * <p>Get Transcode Sessions
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTranscodeSessionsResponse getTranscodeSessionsDirect() throws Exception {
        RequestlessOperation<GetTranscodeSessionsResponse> operation
            = new GetTranscodeSessions.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Stop a Transcode Session
     * 
     * <p>Stop a Transcode Session
     * 
     * @return The call builder
     */
    public StopTranscodeSessionRequestBuilder stopTranscodeSession() {
        return new StopTranscodeSessionRequestBuilder(sdkConfiguration);
    }

    /**
     * Stop a Transcode Session
     * 
     * <p>Stop a Transcode Session
     * 
     * @param sessionKey the Key of the transcode session to stop
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StopTranscodeSessionResponse stopTranscodeSession(String sessionKey) throws Exception {
        StopTranscodeSessionRequest request =
            StopTranscodeSessionRequest
                .builder()
                .sessionKey(sessionKey)
                .build();
        RequestOperation<StopTranscodeSessionRequest, StopTranscodeSessionResponse> operation
              = new StopTranscodeSession.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
