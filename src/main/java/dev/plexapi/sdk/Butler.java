/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetButlerTasksRequestBuilder;
import dev.plexapi.sdk.models.operations.GetButlerTasksResponse;
import dev.plexapi.sdk.models.operations.PathParamTaskName;
import dev.plexapi.sdk.models.operations.StartAllTasksRequestBuilder;
import dev.plexapi.sdk.models.operations.StartAllTasksResponse;
import dev.plexapi.sdk.models.operations.StartTaskRequest;
import dev.plexapi.sdk.models.operations.StartTaskRequestBuilder;
import dev.plexapi.sdk.models.operations.StartTaskResponse;
import dev.plexapi.sdk.models.operations.StopAllTasksRequestBuilder;
import dev.plexapi.sdk.models.operations.StopAllTasksResponse;
import dev.plexapi.sdk.models.operations.StopTaskRequest;
import dev.plexapi.sdk.models.operations.StopTaskRequestBuilder;
import dev.plexapi.sdk.models.operations.StopTaskResponse;
import dev.plexapi.sdk.models.operations.TaskName;
import dev.plexapi.sdk.operations.GetButlerTasks;
import dev.plexapi.sdk.operations.StartAllTasks;
import dev.plexapi.sdk.operations.StartTask;
import dev.plexapi.sdk.operations.StopAllTasks;
import dev.plexapi.sdk.operations.StopTask;
import java.lang.Exception;

/**
 * Butler is the task manager of the Plex Media Server Ecosystem.
 */
public class Butler {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncButler asyncSDK;

    Butler(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncButler(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncButler async() {
        return asyncSDK;
    }

    /**
     * Get Butler tasks
     * 
     * <p>Returns a list of butler tasks
     * 
     * @return The call builder
     */
    public GetButlerTasksRequestBuilder getButlerTasks() {
        return new GetButlerTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Butler tasks
     * 
     * <p>Returns a list of butler tasks
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetButlerTasksResponse getButlerTasksDirect() throws Exception {
        RequestlessOperation<GetButlerTasksResponse> operation
            = new GetButlerTasks.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Start all Butler tasks
     * 
     * <p>This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @return The call builder
     */
    public StartAllTasksRequestBuilder startAllTasks() {
        return new StartAllTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * Start all Butler tasks
     * 
     * <p>This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StartAllTasksResponse startAllTasksDirect() throws Exception {
        RequestlessOperation<StartAllTasksResponse> operation
            = new StartAllTasks.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Stop all Butler tasks
     * 
     * <p>This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * 
     * @return The call builder
     */
    public StopAllTasksRequestBuilder stopAllTasks() {
        return new StopAllTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * Stop all Butler tasks
     * 
     * <p>This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StopAllTasksResponse stopAllTasksDirect() throws Exception {
        RequestlessOperation<StopAllTasksResponse> operation
            = new StopAllTasks.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Start a single Butler task
     * 
     * <p>This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @return The call builder
     */
    public StartTaskRequestBuilder startTask() {
        return new StartTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Start a single Butler task
     * 
     * <p>This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @param taskName the name of the task to be started.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StartTaskResponse startTask(TaskName taskName) throws Exception {
        StartTaskRequest request =
            StartTaskRequest
                .builder()
                .taskName(taskName)
                .build();
        RequestOperation<StartTaskRequest, StartTaskResponse> operation
              = new StartTask.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Stop a single Butler task
     * 
     * <p>This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * 
     * @return The call builder
     */
    public StopTaskRequestBuilder stopTask() {
        return new StopTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Stop a single Butler task
     * 
     * <p>This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * 
     * @param taskName The name of the task to be started.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public StopTaskResponse stopTask(PathParamTaskName taskName) throws Exception {
        StopTaskRequest request =
            StopTaskRequest
                .builder()
                .taskName(taskName)
                .build();
        RequestOperation<StopTaskRequest, StopTaskResponse> operation
              = new StopTask.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
