/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.GetGlobalHubsRequest;
import dev.plexapi.sdk.models.operations.GetLibraryHubsRequest;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedRequest;
import dev.plexapi.sdk.models.operations.OnlyTransient;
import dev.plexapi.sdk.models.operations.QueryParamOnlyTransient;
import dev.plexapi.sdk.models.operations.async.GetGlobalHubsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetGlobalHubsResponse;
import dev.plexapi.sdk.models.operations.async.GetLibraryHubsRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetLibraryHubsResponse;
import dev.plexapi.sdk.models.operations.async.GetRecentlyAddedRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetRecentlyAddedResponse;
import dev.plexapi.sdk.operations.GetGlobalHubs;
import dev.plexapi.sdk.operations.GetLibraryHubs;
import dev.plexapi.sdk.operations.GetRecentlyAdded;
import java.lang.Double;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Hubs are a structured two-dimensional container for media, generally represented by multiple horizontal rows.
 */
public class AsyncHubs {
    private final SDKConfiguration sdkConfiguration;
    private final Hubs syncSDK;

    AsyncHubs(Hubs syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Hubs sync() {
        return syncSDK;
    }


    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @return The async call builder
     */
    public GetGlobalHubsRequestBuilder getGlobalHubs() {
        return new GetGlobalHubsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @return CompletableFuture&lt;GetGlobalHubsResponse&gt; - The async response
     */
    public CompletableFuture<GetGlobalHubsResponse> getGlobalHubsDirect() {
        return getGlobalHubs(Optional.empty(), Optional.empty());
    }

    /**
     * Get Global Hubs
     * 
     * <p>Get Global Hubs filtered by the parameters provided.
     * 
     * @param count The number of items to return with each hub.
     * @param onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @return CompletableFuture&lt;GetGlobalHubsResponse&gt; - The async response
     */
    public CompletableFuture<GetGlobalHubsResponse> getGlobalHubs(Optional<Double> count, Optional<? extends OnlyTransient> onlyTransient) {
        GetGlobalHubsRequest request =
            GetGlobalHubsRequest
                .builder()
                .count(count)
                .onlyTransient(onlyTransient)
                .build();
        AsyncRequestOperation<GetGlobalHubsRequest, GetGlobalHubsResponse> operation
              = new GetGlobalHubs.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get Recently Added
     * 
     * <p>This endpoint will return the recently added content.
     * 
     * @return The async call builder
     */
    public GetRecentlyAddedRequestBuilder getRecentlyAdded() {
        return new GetRecentlyAddedRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Recently Added
     * 
     * <p>This endpoint will return the recently added content.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetRecentlyAddedResponse&gt; - The async response
     */
    public CompletableFuture<GetRecentlyAddedResponse> getRecentlyAdded(GetRecentlyAddedRequest request) {
        AsyncRequestOperation<GetRecentlyAddedRequest, GetRecentlyAddedResponse> operation
              = new GetRecentlyAdded.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @return The async call builder
     */
    public GetLibraryHubsRequestBuilder getLibraryHubs() {
        return new GetLibraryHubsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @param sectionId the Id of the library to query
     * @return CompletableFuture&lt;GetLibraryHubsResponse&gt; - The async response
     */
    public CompletableFuture<GetLibraryHubsResponse> getLibraryHubs(double sectionId) {
        return getLibraryHubs(sectionId, Optional.empty(), Optional.empty());
    }

    /**
     * Get library specific hubs
     * 
     * <p>This endpoint will return a list of library specific hubs
     * 
     * @param sectionId the Id of the library to query
     * @param count The number of items to return with each hub.
     * @param onlyTransient Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     * @return CompletableFuture&lt;GetLibraryHubsResponse&gt; - The async response
     */
    public CompletableFuture<GetLibraryHubsResponse> getLibraryHubs(
            double sectionId, Optional<Double> count,
            Optional<? extends QueryParamOnlyTransient> onlyTransient) {
        GetLibraryHubsRequest request =
            GetLibraryHubsRequest
                .builder()
                .sectionId(sectionId)
                .count(count)
                .onlyTransient(onlyTransient)
                .build();
        AsyncRequestOperation<GetLibraryHubsRequest, GetLibraryHubsResponse> operation
              = new GetLibraryHubs.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
