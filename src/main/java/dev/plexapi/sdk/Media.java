/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetBannerImageRequest;
import dev.plexapi.sdk.models.operations.GetBannerImageRequestBuilder;
import dev.plexapi.sdk.models.operations.GetBannerImageResponse;
import dev.plexapi.sdk.models.operations.GetThumbImageRequest;
import dev.plexapi.sdk.models.operations.GetThumbImageRequestBuilder;
import dev.plexapi.sdk.models.operations.GetThumbImageResponse;
import dev.plexapi.sdk.models.operations.MarkPlayedRequest;
import dev.plexapi.sdk.models.operations.MarkPlayedRequestBuilder;
import dev.plexapi.sdk.models.operations.MarkPlayedResponse;
import dev.plexapi.sdk.models.operations.MarkUnplayedRequest;
import dev.plexapi.sdk.models.operations.MarkUnplayedRequestBuilder;
import dev.plexapi.sdk.models.operations.MarkUnplayedResponse;
import dev.plexapi.sdk.models.operations.UpdatePlayProgressRequest;
import dev.plexapi.sdk.models.operations.UpdatePlayProgressRequestBuilder;
import dev.plexapi.sdk.models.operations.UpdatePlayProgressResponse;
import dev.plexapi.sdk.operations.GetBannerImage;
import dev.plexapi.sdk.operations.GetThumbImage;
import dev.plexapi.sdk.operations.MarkPlayed;
import dev.plexapi.sdk.operations.MarkUnplayed;
import dev.plexapi.sdk.operations.UpdatePlayProgress;
import java.lang.Exception;
import java.lang.String;

/**
 * API Calls interacting with Plex Media Server Media
 */
public class Media {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncMedia asyncSDK;

    Media(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncMedia(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncMedia async() {
        return asyncSDK;
    }

    /**
     * Mark Media Played
     * 
     * <p>This will mark the provided media key as Played.
     * 
     * @return The call builder
     */
    public MarkPlayedRequestBuilder markPlayed() {
        return new MarkPlayedRequestBuilder(sdkConfiguration);
    }

    /**
     * Mark Media Played
     * 
     * <p>This will mark the provided media key as Played.
     * 
     * @param key The media key to mark as played
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MarkPlayedResponse markPlayed(double key) throws Exception {
        MarkPlayedRequest request =
            MarkPlayedRequest
                .builder()
                .key(key)
                .build();
        RequestOperation<MarkPlayedRequest, MarkPlayedResponse> operation
              = new MarkPlayed.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Mark Media Unplayed
     * 
     * <p>This will mark the provided media key as Unplayed.
     * 
     * @return The call builder
     */
    public MarkUnplayedRequestBuilder markUnplayed() {
        return new MarkUnplayedRequestBuilder(sdkConfiguration);
    }

    /**
     * Mark Media Unplayed
     * 
     * <p>This will mark the provided media key as Unplayed.
     * 
     * @param key The media key to mark as Unplayed
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public MarkUnplayedResponse markUnplayed(double key) throws Exception {
        MarkUnplayedRequest request =
            MarkUnplayedRequest
                .builder()
                .key(key)
                .build();
        RequestOperation<MarkUnplayedRequest, MarkUnplayedResponse> operation
              = new MarkUnplayed.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Media Play Progress
     * 
     * <p>This API command can be used to update the play progress of a media item.
     * 
     * @return The call builder
     */
    public UpdatePlayProgressRequestBuilder updatePlayProgress() {
        return new UpdatePlayProgressRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Media Play Progress
     * 
     * <p>This API command can be used to update the play progress of a media item.
     * 
     * @param key the media key
     * @param time The time, in milliseconds, used to set the media playback progress.
     * @param state The playback state of the media item.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdatePlayProgressResponse updatePlayProgress(
            String key, double time,
            String state) throws Exception {
        UpdatePlayProgressRequest request =
            UpdatePlayProgressRequest
                .builder()
                .key(key)
                .time(time)
                .state(state)
                .build();
        RequestOperation<UpdatePlayProgressRequest, UpdatePlayProgressResponse> operation
              = new UpdatePlayProgress.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Banner Image
     * 
     * <p>Gets the banner image of the media item
     * 
     * @return The call builder
     */
    public GetBannerImageRequestBuilder getBannerImage() {
        return new GetBannerImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Banner Image
     * 
     * <p>Gets the banner image of the media item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBannerImageResponse getBannerImage(GetBannerImageRequest request) throws Exception {
        RequestOperation<GetBannerImageRequest, GetBannerImageResponse> operation
              = new GetBannerImage.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Thumb Image
     * 
     * <p>Gets the thumbnail image of the media item
     * 
     * @return The call builder
     */
    public GetThumbImageRequestBuilder getThumbImage() {
        return new GetThumbImageRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Thumb Image
     * 
     * <p>Gets the thumbnail image of the media item
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetThumbImageResponse getThumbImage(GetThumbImageRequest request) throws Exception {
        RequestOperation<GetThumbImageRequest, GetThumbImageResponse> operation
              = new GetThumbImage.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
