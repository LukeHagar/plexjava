/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.models.operations.CancelServerActivitiesRequest;
import dev.plexapi.sdk.models.operations.async.CancelServerActivitiesRequestBuilder;
import dev.plexapi.sdk.models.operations.async.CancelServerActivitiesResponse;
import dev.plexapi.sdk.models.operations.async.GetServerActivitiesRequestBuilder;
import dev.plexapi.sdk.models.operations.async.GetServerActivitiesResponse;
import dev.plexapi.sdk.operations.CancelServerActivities;
import dev.plexapi.sdk.operations.GetServerActivities;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

/**
 * Activities are awesome. They provide a way to monitor and control asynchronous operations on the server. In order to receive real-time updates for activities, a client would normally subscribe via either EventSource or Websocket endpoints.
 * Activities are associated with HTTP replies via a special `X-Plex-Activity` header which contains the UUID of the activity.
 * Activities are optional cancellable. If cancellable, they may be cancelled via the `DELETE` endpoint. Other details:
 * - They can contain a `progress` (from 0 to 100) marking the percent completion of the activity.
 * - They must contain an `type` which is used by clients to distinguish the specific activity.
 * - They may contain a `Context` object with attributes which associate the activity with various specific entities (items, libraries, etc.)
 * - The may contain a `Response` object which attributes which represent the result of the asynchronous operation.
 */
public class AsyncActivities {
    private final SDKConfiguration sdkConfiguration;
    private final Activities syncSDK;

    AsyncActivities(Activities syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Activities sync() {
        return syncSDK;
    }


    /**
     * Get Server Activities
     * 
     * <p>Get Server Activities
     * 
     * @return The async call builder
     */
    public GetServerActivitiesRequestBuilder getServerActivities() {
        return new GetServerActivitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server Activities
     * 
     * <p>Get Server Activities
     * 
     * @return CompletableFuture&lt;GetServerActivitiesResponse&gt; - The async response
     */
    public CompletableFuture<GetServerActivitiesResponse> getServerActivitiesDirect() {
        AsyncRequestlessOperation<GetServerActivitiesResponse> operation
            = new GetServerActivities.Async(sdkConfiguration);
        return operation.doRequest()
            .thenCompose(operation::handleResponse);
    }


    /**
     * Cancel Server Activities
     * 
     * <p>Cancel Server Activities
     * 
     * @return The async call builder
     */
    public CancelServerActivitiesRequestBuilder cancelServerActivities() {
        return new CancelServerActivitiesRequestBuilder(sdkConfiguration);
    }

    /**
     * Cancel Server Activities
     * 
     * <p>Cancel Server Activities
     * 
     * @param activityUUID The UUID of the activity to cancel.
     * @return CompletableFuture&lt;CancelServerActivitiesResponse&gt; - The async response
     */
    public CompletableFuture<CancelServerActivitiesResponse> cancelServerActivities(String activityUUID) {
        CancelServerActivitiesRequest request =
            CancelServerActivitiesRequest
                .builder()
                .activityUUID(activityUUID)
                .build();
        AsyncRequestOperation<CancelServerActivitiesRequest, CancelServerActivitiesResponse> operation
              = new CancelServerActivities.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}
