/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.errors.async;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Blob;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.Optional;

/**
 * GetServerIdentityRequestTimeout
 * 
 * <p>Request Timeout
 */
@SuppressWarnings("serial")
public class GetServerIdentityRequestTimeout extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("code")
    private Optional<Integer> code;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("RawResponse")
    private Optional<? extends HttpResponse<Blob>> rawResponse;

    @JsonCreator
    public GetServerIdentityRequestTimeout(
            @JsonProperty("code") Optional<Integer> code,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("RawResponse") Optional<? extends HttpResponse<Blob>> rawResponse) {
        super(Utils.valueOrElse(message, "API error occurred"));
        Utils.checkNotNull(code, "code");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.code = code;
        this.message = message;
        this.rawResponse = rawResponse;
    }
    
    public GetServerIdentityRequestTimeout() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Integer> code() {
        return code;
    }

    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @JsonIgnore
    @Override
    public String getMessage() {
        return Utils.valueOrNull(message);
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HttpResponse<Blob>> rawResponse() {
        return (Optional<HttpResponse<Blob>>) rawResponse;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetServerIdentityRequestTimeout withCode(int code) {
        Utils.checkNotNull(code, "code");
        this.code = Optional.ofNullable(code);
        return this;
    }


    public GetServerIdentityRequestTimeout withCode(Optional<Integer> code) {
        Utils.checkNotNull(code, "code");
        this.code = code;
        return this;
    }

    public GetServerIdentityRequestTimeout withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }


    public GetServerIdentityRequestTimeout withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public GetServerIdentityRequestTimeout withRawResponse(HttpResponse<Blob> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = Optional.ofNullable(rawResponse);
        return this;
    }


    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public GetServerIdentityRequestTimeout withRawResponse(Optional<? extends HttpResponse<Blob>> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetServerIdentityRequestTimeout other = (GetServerIdentityRequestTimeout) o;
        return 
            Utils.enhancedDeepEquals(this.code, other.code) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            code, message, rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetServerIdentityRequestTimeout.class,
                "code", code,
                "message", message,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Integer> code = Optional.empty();

        private Optional<String> message = Optional.empty();

        private Optional<? extends HttpResponse<Blob>> rawResponse;

        private Builder() {
          // force use of static builder() method
        }


        public Builder code(int code) {
            Utils.checkNotNull(code, "code");
            this.code = Optional.ofNullable(code);
            return this;
        }

        public Builder code(Optional<Integer> code) {
            Utils.checkNotNull(code, "code");
            this.code = code;
            return this;
        }


        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }


        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<Blob> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = Optional.ofNullable(rawResponse);
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(Optional<? extends HttpResponse<Blob>> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        public GetServerIdentityRequestTimeout build() {

            return new GetServerIdentityRequestTimeout(
                code, message, rawResponse);
        }

    }
}

