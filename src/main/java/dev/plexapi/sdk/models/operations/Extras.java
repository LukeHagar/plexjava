/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Extras {

    /**
     * The size of the extras.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<Long> size;

    @JsonCreator
    public Extras(
            @JsonProperty("size") Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
    }
    
    public Extras() {
        this(Optional.empty());
    }

    /**
     * The size of the extras.
     */
    @JsonIgnore
    public Optional<Long> size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The size of the extras.
     */
    public Extras withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * The size of the extras.
     */
    public Extras withSize(Optional<Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Extras other = (Extras) o;
        return 
            Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Extras.class,
                "size", size);
    }
    
    public final static class Builder {
 
        private Optional<Long> size = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The size of the extras.
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * The size of the extras.
         */
        public Builder size(Optional<Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public Extras build() {
            return new Extras(
                size);
        }
    }
}
