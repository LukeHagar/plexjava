/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

/**
 * Chapter
 * 
 * <p>The thumbnail for the chapter
 */
public class Chapter {

    @JsonProperty("id")
    private long id;

    @JsonProperty("filter")
    private String filter;

    @JsonProperty("index")
    private long index;

    @JsonProperty("startTimeOffset")
    private long startTimeOffset;

    @JsonProperty("endTimeOffset")
    private long endTimeOffset;

    @JsonProperty("thumb")
    private String thumb;

    @JsonCreator
    public Chapter(
            @JsonProperty("id") long id,
            @JsonProperty("filter") String filter,
            @JsonProperty("index") long index,
            @JsonProperty("startTimeOffset") long startTimeOffset,
            @JsonProperty("endTimeOffset") long endTimeOffset,
            @JsonProperty("thumb") String thumb) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(startTimeOffset, "startTimeOffset");
        Utils.checkNotNull(endTimeOffset, "endTimeOffset");
        Utils.checkNotNull(thumb, "thumb");
        this.id = id;
        this.filter = filter;
        this.index = index;
        this.startTimeOffset = startTimeOffset;
        this.endTimeOffset = endTimeOffset;
        this.thumb = thumb;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public String filter() {
        return filter;
    }

    @JsonIgnore
    public long index() {
        return index;
    }

    @JsonIgnore
    public long startTimeOffset() {
        return startTimeOffset;
    }

    @JsonIgnore
    public long endTimeOffset() {
        return endTimeOffset;
    }

    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public Chapter withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Chapter withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    public Chapter withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public Chapter withStartTimeOffset(long startTimeOffset) {
        Utils.checkNotNull(startTimeOffset, "startTimeOffset");
        this.startTimeOffset = startTimeOffset;
        return this;
    }

    public Chapter withEndTimeOffset(long endTimeOffset) {
        Utils.checkNotNull(endTimeOffset, "endTimeOffset");
        this.endTimeOffset = endTimeOffset;
        return this;
    }

    public Chapter withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Chapter other = (Chapter) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.filter, other.filter) &&
            Objects.deepEquals(this.index, other.index) &&
            Objects.deepEquals(this.startTimeOffset, other.startTimeOffset) &&
            Objects.deepEquals(this.endTimeOffset, other.endTimeOffset) &&
            Objects.deepEquals(this.thumb, other.thumb);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            filter,
            index,
            startTimeOffset,
            endTimeOffset,
            thumb);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Chapter.class,
                "id", id,
                "filter", filter,
                "index", index,
                "startTimeOffset", startTimeOffset,
                "endTimeOffset", endTimeOffset,
                "thumb", thumb);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private String filter;
 
        private Long index;
 
        private Long startTimeOffset;
 
        private Long endTimeOffset;
 
        private String thumb;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder startTimeOffset(long startTimeOffset) {
            Utils.checkNotNull(startTimeOffset, "startTimeOffset");
            this.startTimeOffset = startTimeOffset;
            return this;
        }

        public Builder endTimeOffset(long endTimeOffset) {
            Utils.checkNotNull(endTimeOffset, "endTimeOffset");
            this.endTimeOffset = endTimeOffset;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }
        
        public Chapter build() {
            return new Chapter(
                id,
                filter,
                index,
                startTimeOffset,
                endTimeOffset,
                thumb);
        }
    }
}
