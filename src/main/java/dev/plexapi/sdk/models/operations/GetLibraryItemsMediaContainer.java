/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;


public class GetLibraryItemsMediaContainer {
    /**
     * Number of media items returned in this response.
     */
    @JsonProperty("size")
    private int size;

    /**
     * Total number of media items in the library.
     */
    @JsonProperty("totalSize")
    private int totalSize;

    /**
     * Offset value for pagination.
     */
    @JsonProperty("offset")
    private long offset;

    /**
     * The content type or mode.
     */
    @JsonProperty("content")
    private String content;

    /**
     * Indicates whether syncing is allowed.
     */
    @JsonProperty("allowSync")
    private boolean allowSync;

    /**
     * Specifies whether caching is disabled.
     */
    @JsonProperty("nocache")
    private boolean nocache;

    /**
     * URL for the background artwork of the media container.
     */
    @JsonProperty("art")
    private String art;

    /**
     * An plugin identifier for the media container.
     */
    @JsonProperty("identifier")
    private String identifier;

    /**
     * The unique identifier for the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<Long> librarySectionID;

    /**
     * The title of the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionTitle")
    private Optional<String> librarySectionTitle;

    /**
     * The universally unique identifier for the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionUUID")
    private Optional<String> librarySectionUUID;

    /**
     * The prefix used for media tag resource paths.
     */
    @JsonProperty("mediaTagPrefix")
    private String mediaTagPrefix;

    /**
     * The version number for media tags.
     */
    @JsonProperty("mediaTagVersion")
    private long mediaTagVersion;

    /**
     * URL for the thumbnail image of the media container.
     */
    @JsonProperty("thumb")
    private String thumb;

    /**
     * The primary title of the media container.
     */
    @JsonProperty("title1")
    private String title1;

    /**
     * The secondary title of the media container.
     */
    @JsonProperty("title2")
    private String title2;

    /**
     * Identifier for the view group layout.
     */
    @JsonProperty("viewGroup")
    private String viewGroup;

    /**
     * Identifier for the view mode.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewMode")
    private Optional<String> viewMode;

    /**
     * Indicates if the media container has mixed parents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mixedParents")
    private Optional<Boolean> mixedParents;

    /**
     * An array of metadata items.
     */
    @JsonProperty("Metadata")
    private List<GetLibraryItemsMetadata> metadata;

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Meta")
    private Optional<? extends GetLibraryItemsMeta> meta;

    @JsonCreator
    public GetLibraryItemsMediaContainer(
            @JsonProperty("size") int size,
            @JsonProperty("totalSize") int totalSize,
            @JsonProperty("offset") long offset,
            @JsonProperty("content") String content,
            @JsonProperty("allowSync") boolean allowSync,
            @JsonProperty("nocache") boolean nocache,
            @JsonProperty("art") String art,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("librarySectionID") Optional<Long> librarySectionID,
            @JsonProperty("librarySectionTitle") Optional<String> librarySectionTitle,
            @JsonProperty("librarySectionUUID") Optional<String> librarySectionUUID,
            @JsonProperty("mediaTagPrefix") String mediaTagPrefix,
            @JsonProperty("mediaTagVersion") long mediaTagVersion,
            @JsonProperty("thumb") String thumb,
            @JsonProperty("title1") String title1,
            @JsonProperty("title2") String title2,
            @JsonProperty("viewGroup") String viewGroup,
            @JsonProperty("viewMode") Optional<String> viewMode,
            @JsonProperty("mixedParents") Optional<Boolean> mixedParents,
            @JsonProperty("Metadata") List<GetLibraryItemsMetadata> metadata,
            @JsonProperty("Meta") Optional<? extends GetLibraryItemsMeta> meta) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(totalSize, "totalSize");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(allowSync, "allowSync");
        Utils.checkNotNull(nocache, "nocache");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(title1, "title1");
        Utils.checkNotNull(title2, "title2");
        Utils.checkNotNull(viewGroup, "viewGroup");
        Utils.checkNotNull(viewMode, "viewMode");
        Utils.checkNotNull(mixedParents, "mixedParents");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(meta, "meta");
        this.size = size;
        this.totalSize = totalSize;
        this.offset = offset;
        this.content = content;
        this.allowSync = allowSync;
        this.nocache = nocache;
        this.art = art;
        this.identifier = identifier;
        this.librarySectionID = librarySectionID;
        this.librarySectionTitle = librarySectionTitle;
        this.librarySectionUUID = librarySectionUUID;
        this.mediaTagPrefix = mediaTagPrefix;
        this.mediaTagVersion = mediaTagVersion;
        this.thumb = thumb;
        this.title1 = title1;
        this.title2 = title2;
        this.viewGroup = viewGroup;
        this.viewMode = viewMode;
        this.mixedParents = mixedParents;
        this.metadata = metadata;
        this.meta = meta;
    }
    
    public GetLibraryItemsMediaContainer(
            int size,
            int totalSize,
            long offset,
            String content,
            boolean allowSync,
            boolean nocache,
            String art,
            String identifier,
            String mediaTagPrefix,
            long mediaTagVersion,
            String thumb,
            String title1,
            String title2,
            String viewGroup,
            List<GetLibraryItemsMetadata> metadata) {
        this(size, totalSize, offset,
            content, allowSync, nocache,
            art, identifier, Optional.empty(),
            Optional.empty(), Optional.empty(), mediaTagPrefix,
            mediaTagVersion, thumb, title1,
            title2, viewGroup, Optional.empty(),
            Optional.empty(), metadata, Optional.empty());
    }

    /**
     * Number of media items returned in this response.
     */
    @JsonIgnore
    public int size() {
        return size;
    }

    /**
     * Total number of media items in the library.
     */
    @JsonIgnore
    public int totalSize() {
        return totalSize;
    }

    /**
     * Offset value for pagination.
     */
    @JsonIgnore
    public long offset() {
        return offset;
    }

    /**
     * The content type or mode.
     */
    @JsonIgnore
    public String content() {
        return content;
    }

    /**
     * Indicates whether syncing is allowed.
     */
    @JsonIgnore
    public boolean allowSync() {
        return allowSync;
    }

    /**
     * Specifies whether caching is disabled.
     */
    @JsonIgnore
    public boolean nocache() {
        return nocache;
    }

    /**
     * URL for the background artwork of the media container.
     */
    @JsonIgnore
    public String art() {
        return art;
    }

    /**
     * An plugin identifier for the media container.
     */
    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    /**
     * The unique identifier for the library section.
     */
    @JsonIgnore
    public Optional<Long> librarySectionID() {
        return librarySectionID;
    }

    /**
     * The title of the library section.
     */
    @JsonIgnore
    public Optional<String> librarySectionTitle() {
        return librarySectionTitle;
    }

    /**
     * The universally unique identifier for the library section.
     */
    @JsonIgnore
    public Optional<String> librarySectionUUID() {
        return librarySectionUUID;
    }

    /**
     * The prefix used for media tag resource paths.
     */
    @JsonIgnore
    public String mediaTagPrefix() {
        return mediaTagPrefix;
    }

    /**
     * The version number for media tags.
     */
    @JsonIgnore
    public long mediaTagVersion() {
        return mediaTagVersion;
    }

    /**
     * URL for the thumbnail image of the media container.
     */
    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    /**
     * The primary title of the media container.
     */
    @JsonIgnore
    public String title1() {
        return title1;
    }

    /**
     * The secondary title of the media container.
     */
    @JsonIgnore
    public String title2() {
        return title2;
    }

    /**
     * Identifier for the view group layout.
     */
    @JsonIgnore
    public String viewGroup() {
        return viewGroup;
    }

    /**
     * Identifier for the view mode.
     */
    @JsonIgnore
    public Optional<String> viewMode() {
        return viewMode;
    }

    /**
     * Indicates if the media container has mixed parents.
     */
    @JsonIgnore
    public Optional<Boolean> mixedParents() {
        return mixedParents;
    }

    /**
     * An array of metadata items.
     */
    @JsonIgnore
    public List<GetLibraryItemsMetadata> metadata() {
        return metadata;
    }

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetLibraryItemsMeta> meta() {
        return (Optional<GetLibraryItemsMeta>) meta;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Number of media items returned in this response.
     */
    public GetLibraryItemsMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Total number of media items in the library.
     */
    public GetLibraryItemsMediaContainer withTotalSize(int totalSize) {
        Utils.checkNotNull(totalSize, "totalSize");
        this.totalSize = totalSize;
        return this;
    }

    /**
     * Offset value for pagination.
     */
    public GetLibraryItemsMediaContainer withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * The content type or mode.
     */
    public GetLibraryItemsMediaContainer withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    /**
     * Indicates whether syncing is allowed.
     */
    public GetLibraryItemsMediaContainer withAllowSync(boolean allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = allowSync;
        return this;
    }

    /**
     * Specifies whether caching is disabled.
     */
    public GetLibraryItemsMediaContainer withNocache(boolean nocache) {
        Utils.checkNotNull(nocache, "nocache");
        this.nocache = nocache;
        return this;
    }

    /**
     * URL for the background artwork of the media container.
     */
    public GetLibraryItemsMediaContainer withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    /**
     * An plugin identifier for the media container.
     */
    public GetLibraryItemsMediaContainer withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    /**
     * The unique identifier for the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionID(long librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }


    /**
     * The unique identifier for the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionID(Optional<Long> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    /**
     * The title of the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
        return this;
    }


    /**
     * The title of the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionTitle(Optional<String> librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    /**
     * The universally unique identifier for the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionUUID(String librarySectionUUID) {
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        this.librarySectionUUID = Optional.ofNullable(librarySectionUUID);
        return this;
    }


    /**
     * The universally unique identifier for the library section.
     */
    public GetLibraryItemsMediaContainer withLibrarySectionUUID(Optional<String> librarySectionUUID) {
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        this.librarySectionUUID = librarySectionUUID;
        return this;
    }

    /**
     * The prefix used for media tag resource paths.
     */
    public GetLibraryItemsMediaContainer withMediaTagPrefix(String mediaTagPrefix) {
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        this.mediaTagPrefix = mediaTagPrefix;
        return this;
    }

    /**
     * The version number for media tags.
     */
    public GetLibraryItemsMediaContainer withMediaTagVersion(long mediaTagVersion) {
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        this.mediaTagVersion = mediaTagVersion;
        return this;
    }

    /**
     * URL for the thumbnail image of the media container.
     */
    public GetLibraryItemsMediaContainer withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    /**
     * The primary title of the media container.
     */
    public GetLibraryItemsMediaContainer withTitle1(String title1) {
        Utils.checkNotNull(title1, "title1");
        this.title1 = title1;
        return this;
    }

    /**
     * The secondary title of the media container.
     */
    public GetLibraryItemsMediaContainer withTitle2(String title2) {
        Utils.checkNotNull(title2, "title2");
        this.title2 = title2;
        return this;
    }

    /**
     * Identifier for the view group layout.
     */
    public GetLibraryItemsMediaContainer withViewGroup(String viewGroup) {
        Utils.checkNotNull(viewGroup, "viewGroup");
        this.viewGroup = viewGroup;
        return this;
    }

    /**
     * Identifier for the view mode.
     */
    public GetLibraryItemsMediaContainer withViewMode(String viewMode) {
        Utils.checkNotNull(viewMode, "viewMode");
        this.viewMode = Optional.ofNullable(viewMode);
        return this;
    }


    /**
     * Identifier for the view mode.
     */
    public GetLibraryItemsMediaContainer withViewMode(Optional<String> viewMode) {
        Utils.checkNotNull(viewMode, "viewMode");
        this.viewMode = viewMode;
        return this;
    }

    /**
     * Indicates if the media container has mixed parents.
     */
    public GetLibraryItemsMediaContainer withMixedParents(boolean mixedParents) {
        Utils.checkNotNull(mixedParents, "mixedParents");
        this.mixedParents = Optional.ofNullable(mixedParents);
        return this;
    }


    /**
     * Indicates if the media container has mixed parents.
     */
    public GetLibraryItemsMediaContainer withMixedParents(Optional<Boolean> mixedParents) {
        Utils.checkNotNull(mixedParents, "mixedParents");
        this.mixedParents = mixedParents;
        return this;
    }

    /**
     * An array of metadata items.
     */
    public GetLibraryItemsMediaContainer withMetadata(List<GetLibraryItemsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     */
    public GetLibraryItemsMediaContainer withMeta(GetLibraryItemsMeta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }


    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     */
    public GetLibraryItemsMediaContainer withMeta(Optional<? extends GetLibraryItemsMeta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsMediaContainer other = (GetLibraryItemsMediaContainer) o;
        return 
            Utils.enhancedDeepEquals(this.size, other.size) &&
            Utils.enhancedDeepEquals(this.totalSize, other.totalSize) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.allowSync, other.allowSync) &&
            Utils.enhancedDeepEquals(this.nocache, other.nocache) &&
            Utils.enhancedDeepEquals(this.art, other.art) &&
            Utils.enhancedDeepEquals(this.identifier, other.identifier) &&
            Utils.enhancedDeepEquals(this.librarySectionID, other.librarySectionID) &&
            Utils.enhancedDeepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            Utils.enhancedDeepEquals(this.librarySectionUUID, other.librarySectionUUID) &&
            Utils.enhancedDeepEquals(this.mediaTagPrefix, other.mediaTagPrefix) &&
            Utils.enhancedDeepEquals(this.mediaTagVersion, other.mediaTagVersion) &&
            Utils.enhancedDeepEquals(this.thumb, other.thumb) &&
            Utils.enhancedDeepEquals(this.title1, other.title1) &&
            Utils.enhancedDeepEquals(this.title2, other.title2) &&
            Utils.enhancedDeepEquals(this.viewGroup, other.viewGroup) &&
            Utils.enhancedDeepEquals(this.viewMode, other.viewMode) &&
            Utils.enhancedDeepEquals(this.mixedParents, other.mixedParents) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.meta, other.meta);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            size, totalSize, offset,
            content, allowSync, nocache,
            art, identifier, librarySectionID,
            librarySectionTitle, librarySectionUUID, mediaTagPrefix,
            mediaTagVersion, thumb, title1,
            title2, viewGroup, viewMode,
            mixedParents, metadata, meta);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsMediaContainer.class,
                "size", size,
                "totalSize", totalSize,
                "offset", offset,
                "content", content,
                "allowSync", allowSync,
                "nocache", nocache,
                "art", art,
                "identifier", identifier,
                "librarySectionID", librarySectionID,
                "librarySectionTitle", librarySectionTitle,
                "librarySectionUUID", librarySectionUUID,
                "mediaTagPrefix", mediaTagPrefix,
                "mediaTagVersion", mediaTagVersion,
                "thumb", thumb,
                "title1", title1,
                "title2", title2,
                "viewGroup", viewGroup,
                "viewMode", viewMode,
                "mixedParents", mixedParents,
                "metadata", metadata,
                "meta", meta);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer size;

        private Integer totalSize;

        private Long offset;

        private String content;

        private Boolean allowSync;

        private Boolean nocache;

        private String art;

        private String identifier;

        private Optional<Long> librarySectionID = Optional.empty();

        private Optional<String> librarySectionTitle = Optional.empty();

        private Optional<String> librarySectionUUID = Optional.empty();

        private String mediaTagPrefix;

        private Long mediaTagVersion;

        private String thumb;

        private String title1;

        private String title2;

        private String viewGroup;

        private Optional<String> viewMode = Optional.empty();

        private Optional<Boolean> mixedParents = Optional.empty();

        private List<GetLibraryItemsMetadata> metadata;

        private Optional<? extends GetLibraryItemsMeta> meta = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Number of media items returned in this response.
         */
        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }


        /**
         * Total number of media items in the library.
         */
        public Builder totalSize(int totalSize) {
            Utils.checkNotNull(totalSize, "totalSize");
            this.totalSize = totalSize;
            return this;
        }


        /**
         * Offset value for pagination.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        /**
         * The content type or mode.
         */
        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }


        /**
         * Indicates whether syncing is allowed.
         */
        public Builder allowSync(boolean allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = allowSync;
            return this;
        }


        /**
         * Specifies whether caching is disabled.
         */
        public Builder nocache(boolean nocache) {
            Utils.checkNotNull(nocache, "nocache");
            this.nocache = nocache;
            return this;
        }


        /**
         * URL for the background artwork of the media container.
         */
        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }


        /**
         * An plugin identifier for the media container.
         */
        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }


        /**
         * The unique identifier for the library section.
         */
        public Builder librarySectionID(long librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        /**
         * The unique identifier for the library section.
         */
        public Builder librarySectionID(Optional<Long> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }


        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
            return this;
        }

        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(Optional<String> librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }


        /**
         * The universally unique identifier for the library section.
         */
        public Builder librarySectionUUID(String librarySectionUUID) {
            Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
            this.librarySectionUUID = Optional.ofNullable(librarySectionUUID);
            return this;
        }

        /**
         * The universally unique identifier for the library section.
         */
        public Builder librarySectionUUID(Optional<String> librarySectionUUID) {
            Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
            this.librarySectionUUID = librarySectionUUID;
            return this;
        }


        /**
         * The prefix used for media tag resource paths.
         */
        public Builder mediaTagPrefix(String mediaTagPrefix) {
            Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
            this.mediaTagPrefix = mediaTagPrefix;
            return this;
        }


        /**
         * The version number for media tags.
         */
        public Builder mediaTagVersion(long mediaTagVersion) {
            Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
            this.mediaTagVersion = mediaTagVersion;
            return this;
        }


        /**
         * URL for the thumbnail image of the media container.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }


        /**
         * The primary title of the media container.
         */
        public Builder title1(String title1) {
            Utils.checkNotNull(title1, "title1");
            this.title1 = title1;
            return this;
        }


        /**
         * The secondary title of the media container.
         */
        public Builder title2(String title2) {
            Utils.checkNotNull(title2, "title2");
            this.title2 = title2;
            return this;
        }


        /**
         * Identifier for the view group layout.
         */
        public Builder viewGroup(String viewGroup) {
            Utils.checkNotNull(viewGroup, "viewGroup");
            this.viewGroup = viewGroup;
            return this;
        }


        /**
         * Identifier for the view mode.
         */
        public Builder viewMode(String viewMode) {
            Utils.checkNotNull(viewMode, "viewMode");
            this.viewMode = Optional.ofNullable(viewMode);
            return this;
        }

        /**
         * Identifier for the view mode.
         */
        public Builder viewMode(Optional<String> viewMode) {
            Utils.checkNotNull(viewMode, "viewMode");
            this.viewMode = viewMode;
            return this;
        }


        /**
         * Indicates if the media container has mixed parents.
         */
        public Builder mixedParents(boolean mixedParents) {
            Utils.checkNotNull(mixedParents, "mixedParents");
            this.mixedParents = Optional.ofNullable(mixedParents);
            return this;
        }

        /**
         * Indicates if the media container has mixed parents.
         */
        public Builder mixedParents(Optional<Boolean> mixedParents) {
            Utils.checkNotNull(mixedParents, "mixedParents");
            this.mixedParents = mixedParents;
            return this;
        }


        /**
         * An array of metadata items.
         */
        public Builder metadata(List<GetLibraryItemsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        /**
         * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
         */
        public Builder meta(GetLibraryItemsMeta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        /**
         * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
         */
        public Builder meta(Optional<? extends GetLibraryItemsMeta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public GetLibraryItemsMediaContainer build() {

            return new GetLibraryItemsMediaContainer(
                size, totalSize, offset,
                content, allowSync, nocache,
                art, identifier, librarySectionID,
                librarySectionTitle, librarySectionUUID, mediaTagPrefix,
                mediaTagVersion, thumb, title1,
                title2, viewGroup, viewMode,
                mixedParents, metadata, meta);
        }

    }
}
