/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.GetSessionHistoryRequest;
import dev.plexapi.sdk.models.operations.QueryParamFilter;
import dev.plexapi.sdk.operations.GetSessionHistory;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class GetSessionHistoryRequestBuilder {

    private Optional<String> sort = Optional.empty();
    private Optional<Long> accountId = Optional.empty();
    private Optional<? extends QueryParamFilter> filter = Optional.empty();
    private Optional<Long> librarySectionID = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public GetSessionHistoryRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetSessionHistoryRequestBuilder sort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.of(sort);
        return this;
    }

    public GetSessionHistoryRequestBuilder sort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }
                
    public GetSessionHistoryRequestBuilder accountId(long accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.of(accountId);
        return this;
    }

    public GetSessionHistoryRequestBuilder accountId(Optional<Long> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }
                
    public GetSessionHistoryRequestBuilder filter(QueryParamFilter filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.of(filter);
        return this;
    }

    public GetSessionHistoryRequestBuilder filter(Optional<? extends QueryParamFilter> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }
                
    public GetSessionHistoryRequestBuilder librarySectionID(long librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.of(librarySectionID);
        return this;
    }

    public GetSessionHistoryRequestBuilder librarySectionID(Optional<Long> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }


    private GetSessionHistoryRequest buildRequest() {

        GetSessionHistoryRequest request = new GetSessionHistoryRequest(sort,
            accountId,
            filter,
            librarySectionID);

        return request;
    }

    public CompletableFuture<GetSessionHistoryResponse> call() throws Exception {
        
        AsyncRequestOperation<GetSessionHistoryRequest, GetSessionHistoryResponse> operation
              = new GetSessionHistory.Async(sdkConfiguration);
        GetSessionHistoryRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
