/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.StopTranscodeSessionRequest;
import dev.plexapi.sdk.operations.StopTranscodeSession;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class StopTranscodeSessionRequestBuilder {

    private String sessionKey;
    private final SDKConfiguration sdkConfiguration;

    public StopTranscodeSessionRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public StopTranscodeSessionRequestBuilder sessionKey(String sessionKey) {
        Utils.checkNotNull(sessionKey, "sessionKey");
        this.sessionKey = sessionKey;
        return this;
    }


    private StopTranscodeSessionRequest buildRequest() {

        StopTranscodeSessionRequest request = new StopTranscodeSessionRequest(sessionKey);

        return request;
    }

    public CompletableFuture<StopTranscodeSessionResponse> call() throws Exception {
        
        AsyncRequestOperation<StopTranscodeSessionRequest, StopTranscodeSessionResponse> operation
              = new StopTranscodeSession.Async(sdkConfiguration);
        StopTranscodeSessionRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
