/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetLibraryItemsDirector {
    /**
     * Unique identifier for the director.
     */
    @JsonProperty("id")
    private int id;

    /**
     * The role of Director
     */
    @JsonProperty("tag")
    private String tag;

    /**
     * The absolute URL of the thumbnail image for the director.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<String> thumb;

    @JsonCreator
    public GetLibraryItemsDirector(
            @JsonProperty("id") int id,
            @JsonProperty("tag") String tag,
            @JsonProperty("thumb") Optional<String> thumb) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(tag, "tag");
        Utils.checkNotNull(thumb, "thumb");
        this.id = id;
        this.tag = tag;
        this.thumb = thumb;
    }
    
    public GetLibraryItemsDirector(
            int id,
            String tag) {
        this(id, tag, Optional.empty());
    }

    /**
     * Unique identifier for the director.
     */
    @JsonIgnore
    public int id() {
        return id;
    }

    /**
     * The role of Director
     */
    @JsonIgnore
    public String tag() {
        return tag;
    }

    /**
     * The absolute URL of the thumbnail image for the director.
     */
    @JsonIgnore
    public Optional<String> thumb() {
        return thumb;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Unique identifier for the director.
     */
    public GetLibraryItemsDirector withId(int id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The role of Director
     */
    public GetLibraryItemsDirector withTag(String tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }

    /**
     * The absolute URL of the thumbnail image for the director.
     */
    public GetLibraryItemsDirector withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }


    /**
     * The absolute URL of the thumbnail image for the director.
     */
    public GetLibraryItemsDirector withThumb(Optional<String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsDirector other = (GetLibraryItemsDirector) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.tag, other.tag) &&
            Utils.enhancedDeepEquals(this.thumb, other.thumb);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, tag, thumb);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsDirector.class,
                "id", id,
                "tag", tag,
                "thumb", thumb);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer id;

        private String tag;

        private Optional<String> thumb = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Unique identifier for the director.
         */
        public Builder id(int id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * The role of Director
         */
        public Builder tag(String tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }


        /**
         * The absolute URL of the thumbnail image for the director.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        /**
         * The absolute URL of the thumbnail image for the director.
         */
        public Builder thumb(Optional<String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public GetLibraryItemsDirector build() {

            return new GetLibraryItemsDirector(
                id, tag, thumb);
        }

    }
}
