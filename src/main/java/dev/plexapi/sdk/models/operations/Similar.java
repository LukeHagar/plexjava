/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;

/**
 * Similar
 * 
 * <p>The display tag for the similar item, typically the title.
 */
public class Similar {

    @JsonProperty("id")
    private int id;


    @JsonProperty("filter")
    private String filter;


    @JsonProperty("tag")
    private String tag;

    @JsonCreator
    public Similar(
            @JsonProperty("id") int id,
            @JsonProperty("filter") String filter,
            @JsonProperty("tag") String tag) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(tag, "tag");
        this.id = id;
        this.filter = filter;
        this.tag = tag;
    }

    @JsonIgnore
    public int id() {
        return id;
    }

    @JsonIgnore
    public String filter() {
        return filter;
    }

    @JsonIgnore
    public String tag() {
        return tag;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Similar withId(int id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Similar withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    public Similar withTag(String tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Similar other = (Similar) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.filter, other.filter) &&
            Utils.enhancedDeepEquals(this.tag, other.tag);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, filter, tag);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Similar.class,
                "id", id,
                "filter", filter,
                "tag", tag);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer id;

        private String filter;

        private String tag;

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(int id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }


        public Builder tag(String tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }

        public Similar build() {

            return new Similar(
                id, filter, tag);
        }

    }
}
