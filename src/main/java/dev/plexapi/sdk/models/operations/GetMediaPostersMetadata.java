/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;


public class GetMediaPostersMetadata {
    /**
     * The URL of the poster.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The provider of the poster.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<String> provider;

    /**
     * The URL of the poster.
     */
    @JsonProperty("ratingKey")
    private String ratingKey;

    /**
     * Whether this is the selected poster.
     */
    @JsonProperty("selected")
    private boolean selected;

    /**
     * The URL of the poster thumbnail.
     */
    @JsonProperty("thumb")
    private String thumb;

    @JsonCreator
    public GetMediaPostersMetadata(
            @JsonProperty("key") String key,
            @JsonProperty("provider") Optional<String> provider,
            @JsonProperty("ratingKey") String ratingKey,
            @JsonProperty("selected") boolean selected,
            @JsonProperty("thumb") String thumb) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(selected, "selected");
        Utils.checkNotNull(thumb, "thumb");
        this.key = key;
        this.provider = provider;
        this.ratingKey = ratingKey;
        this.selected = selected;
        this.thumb = thumb;
    }
    
    public GetMediaPostersMetadata(
            String key,
            String ratingKey,
            boolean selected,
            String thumb) {
        this(key, Optional.empty(), ratingKey,
            selected, thumb);
    }

    /**
     * The URL of the poster.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The provider of the poster.
     */
    @JsonIgnore
    public Optional<String> provider() {
        return provider;
    }

    /**
     * The URL of the poster.
     */
    @JsonIgnore
    public String ratingKey() {
        return ratingKey;
    }

    /**
     * Whether this is the selected poster.
     */
    @JsonIgnore
    public boolean selected() {
        return selected;
    }

    /**
     * The URL of the poster thumbnail.
     */
    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The URL of the poster.
     */
    public GetMediaPostersMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The provider of the poster.
     */
    public GetMediaPostersMetadata withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }


    /**
     * The provider of the poster.
     */
    public GetMediaPostersMetadata withProvider(Optional<String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    /**
     * The URL of the poster.
     */
    public GetMediaPostersMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    /**
     * Whether this is the selected poster.
     */
    public GetMediaPostersMetadata withSelected(boolean selected) {
        Utils.checkNotNull(selected, "selected");
        this.selected = selected;
        return this;
    }

    /**
     * The URL of the poster thumbnail.
     */
    public GetMediaPostersMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaPostersMetadata other = (GetMediaPostersMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.key, other.key) &&
            Utils.enhancedDeepEquals(this.provider, other.provider) &&
            Utils.enhancedDeepEquals(this.ratingKey, other.ratingKey) &&
            Utils.enhancedDeepEquals(this.selected, other.selected) &&
            Utils.enhancedDeepEquals(this.thumb, other.thumb);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            key, provider, ratingKey,
            selected, thumb);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaPostersMetadata.class,
                "key", key,
                "provider", provider,
                "ratingKey", ratingKey,
                "selected", selected,
                "thumb", thumb);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String key;

        private Optional<String> provider = Optional.empty();

        private String ratingKey;

        private Boolean selected;

        private String thumb;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The URL of the poster.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }


        /**
         * The provider of the poster.
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        /**
         * The provider of the poster.
         */
        public Builder provider(Optional<String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }


        /**
         * The URL of the poster.
         */
        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }


        /**
         * Whether this is the selected poster.
         */
        public Builder selected(boolean selected) {
            Utils.checkNotNull(selected, "selected");
            this.selected = selected;
            return this;
        }


        /**
         * The URL of the poster thumbnail.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public GetMediaPostersMetadata build() {

            return new GetMediaPostersMetadata(
                key, provider, ratingKey,
                selected, thumb);
        }

    }
}
