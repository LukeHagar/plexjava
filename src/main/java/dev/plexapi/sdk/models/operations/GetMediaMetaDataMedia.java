/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Float;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class GetMediaMetaDataMedia {

    /**
     * Unique media identifier.
     */
    @JsonProperty("id")
    private long id;

    /**
     * Duration of the media in milliseconds.
     */
    @JsonProperty("duration")
    private long duration;

    /**
     * Bitrate in bits per second.
     */
    @JsonProperty("bitrate")
    private long bitrate;

    /**
     * Video width in pixels.
     */
    @JsonProperty("width")
    private long width;

    /**
     * Video height in pixels.
     */
    @JsonProperty("height")
    private long height;

    /**
     * Aspect ratio of the video.
     */
    @JsonProperty("aspectRatio")
    private float aspectRatio;

    /**
     * Number of audio channels.
     */
    @JsonProperty("audioChannels")
    private long audioChannels;

    /**
     * Audio codec used.
     */
    @JsonProperty("audioCodec")
    private String audioCodec;

    /**
     * Video codec used.
     */
    @JsonProperty("videoCodec")
    private String videoCodec;

    /**
     * Video resolution (e.g., 4k).
     */
    @JsonProperty("videoResolution")
    private String videoResolution;

    /**
     * File container type.
     */
    @JsonProperty("container")
    private String container;

    /**
     * Frame rate of the video (e.g., 24p).
     */
    @JsonProperty("videoFrameRate")
    private String videoFrameRate;

    /**
     * Video profile (e.g., main 10).
     */
    @JsonProperty("videoProfile")
    private String videoProfile;

    /**
     * Indicates whether voice activity is detected.
     */
    @JsonProperty("hasVoiceActivity")
    private boolean hasVoiceActivity;

    /**
     * An array of parts for this media item.
     */
    @JsonProperty("Part")
    private List<GetMediaMetaDataPart> part;

    @JsonCreator
    public GetMediaMetaDataMedia(
            @JsonProperty("id") long id,
            @JsonProperty("duration") long duration,
            @JsonProperty("bitrate") long bitrate,
            @JsonProperty("width") long width,
            @JsonProperty("height") long height,
            @JsonProperty("aspectRatio") float aspectRatio,
            @JsonProperty("audioChannels") long audioChannels,
            @JsonProperty("audioCodec") String audioCodec,
            @JsonProperty("videoCodec") String videoCodec,
            @JsonProperty("videoResolution") String videoResolution,
            @JsonProperty("container") String container,
            @JsonProperty("videoFrameRate") String videoFrameRate,
            @JsonProperty("videoProfile") String videoProfile,
            @JsonProperty("hasVoiceActivity") boolean hasVoiceActivity,
            @JsonProperty("Part") List<GetMediaMetaDataPart> part) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(aspectRatio, "aspectRatio");
        Utils.checkNotNull(audioChannels, "audioChannels");
        Utils.checkNotNull(audioCodec, "audioCodec");
        Utils.checkNotNull(videoCodec, "videoCodec");
        Utils.checkNotNull(videoResolution, "videoResolution");
        Utils.checkNotNull(container, "container");
        Utils.checkNotNull(videoFrameRate, "videoFrameRate");
        Utils.checkNotNull(videoProfile, "videoProfile");
        Utils.checkNotNull(hasVoiceActivity, "hasVoiceActivity");
        Utils.checkNotNull(part, "part");
        this.id = id;
        this.duration = duration;
        this.bitrate = bitrate;
        this.width = width;
        this.height = height;
        this.aspectRatio = aspectRatio;
        this.audioChannels = audioChannels;
        this.audioCodec = audioCodec;
        this.videoCodec = videoCodec;
        this.videoResolution = videoResolution;
        this.container = container;
        this.videoFrameRate = videoFrameRate;
        this.videoProfile = videoProfile;
        this.hasVoiceActivity = hasVoiceActivity;
        this.part = part;
    }

    /**
     * Unique media identifier.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * Duration of the media in milliseconds.
     */
    @JsonIgnore
    public long duration() {
        return duration;
    }

    /**
     * Bitrate in bits per second.
     */
    @JsonIgnore
    public long bitrate() {
        return bitrate;
    }

    /**
     * Video width in pixels.
     */
    @JsonIgnore
    public long width() {
        return width;
    }

    /**
     * Video height in pixels.
     */
    @JsonIgnore
    public long height() {
        return height;
    }

    /**
     * Aspect ratio of the video.
     */
    @JsonIgnore
    public float aspectRatio() {
        return aspectRatio;
    }

    /**
     * Number of audio channels.
     */
    @JsonIgnore
    public long audioChannels() {
        return audioChannels;
    }

    /**
     * Audio codec used.
     */
    @JsonIgnore
    public String audioCodec() {
        return audioCodec;
    }

    /**
     * Video codec used.
     */
    @JsonIgnore
    public String videoCodec() {
        return videoCodec;
    }

    /**
     * Video resolution (e.g., 4k).
     */
    @JsonIgnore
    public String videoResolution() {
        return videoResolution;
    }

    /**
     * File container type.
     */
    @JsonIgnore
    public String container() {
        return container;
    }

    /**
     * Frame rate of the video (e.g., 24p).
     */
    @JsonIgnore
    public String videoFrameRate() {
        return videoFrameRate;
    }

    /**
     * Video profile (e.g., main 10).
     */
    @JsonIgnore
    public String videoProfile() {
        return videoProfile;
    }

    /**
     * Indicates whether voice activity is detected.
     */
    @JsonIgnore
    public boolean hasVoiceActivity() {
        return hasVoiceActivity;
    }

    /**
     * An array of parts for this media item.
     */
    @JsonIgnore
    public List<GetMediaMetaDataPart> part() {
        return part;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique media identifier.
     */
    public GetMediaMetaDataMedia withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Duration of the media in milliseconds.
     */
    public GetMediaMetaDataMedia withDuration(long duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * Bitrate in bits per second.
     */
    public GetMediaMetaDataMedia withBitrate(long bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    /**
     * Video width in pixels.
     */
    public GetMediaMetaDataMedia withWidth(long width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * Video height in pixels.
     */
    public GetMediaMetaDataMedia withHeight(long height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * Aspect ratio of the video.
     */
    public GetMediaMetaDataMedia withAspectRatio(float aspectRatio) {
        Utils.checkNotNull(aspectRatio, "aspectRatio");
        this.aspectRatio = aspectRatio;
        return this;
    }

    /**
     * Number of audio channels.
     */
    public GetMediaMetaDataMedia withAudioChannels(long audioChannels) {
        Utils.checkNotNull(audioChannels, "audioChannels");
        this.audioChannels = audioChannels;
        return this;
    }

    /**
     * Audio codec used.
     */
    public GetMediaMetaDataMedia withAudioCodec(String audioCodec) {
        Utils.checkNotNull(audioCodec, "audioCodec");
        this.audioCodec = audioCodec;
        return this;
    }

    /**
     * Video codec used.
     */
    public GetMediaMetaDataMedia withVideoCodec(String videoCodec) {
        Utils.checkNotNull(videoCodec, "videoCodec");
        this.videoCodec = videoCodec;
        return this;
    }

    /**
     * Video resolution (e.g., 4k).
     */
    public GetMediaMetaDataMedia withVideoResolution(String videoResolution) {
        Utils.checkNotNull(videoResolution, "videoResolution");
        this.videoResolution = videoResolution;
        return this;
    }

    /**
     * File container type.
     */
    public GetMediaMetaDataMedia withContainer(String container) {
        Utils.checkNotNull(container, "container");
        this.container = container;
        return this;
    }

    /**
     * Frame rate of the video (e.g., 24p).
     */
    public GetMediaMetaDataMedia withVideoFrameRate(String videoFrameRate) {
        Utils.checkNotNull(videoFrameRate, "videoFrameRate");
        this.videoFrameRate = videoFrameRate;
        return this;
    }

    /**
     * Video profile (e.g., main 10).
     */
    public GetMediaMetaDataMedia withVideoProfile(String videoProfile) {
        Utils.checkNotNull(videoProfile, "videoProfile");
        this.videoProfile = videoProfile;
        return this;
    }

    /**
     * Indicates whether voice activity is detected.
     */
    public GetMediaMetaDataMedia withHasVoiceActivity(boolean hasVoiceActivity) {
        Utils.checkNotNull(hasVoiceActivity, "hasVoiceActivity");
        this.hasVoiceActivity = hasVoiceActivity;
        return this;
    }

    /**
     * An array of parts for this media item.
     */
    public GetMediaMetaDataMedia withPart(List<GetMediaMetaDataPart> part) {
        Utils.checkNotNull(part, "part");
        this.part = part;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaMetaDataMedia other = (GetMediaMetaDataMedia) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.bitrate, other.bitrate) &&
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.aspectRatio, other.aspectRatio) &&
            Objects.deepEquals(this.audioChannels, other.audioChannels) &&
            Objects.deepEquals(this.audioCodec, other.audioCodec) &&
            Objects.deepEquals(this.videoCodec, other.videoCodec) &&
            Objects.deepEquals(this.videoResolution, other.videoResolution) &&
            Objects.deepEquals(this.container, other.container) &&
            Objects.deepEquals(this.videoFrameRate, other.videoFrameRate) &&
            Objects.deepEquals(this.videoProfile, other.videoProfile) &&
            Objects.deepEquals(this.hasVoiceActivity, other.hasVoiceActivity) &&
            Objects.deepEquals(this.part, other.part);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            duration,
            bitrate,
            width,
            height,
            aspectRatio,
            audioChannels,
            audioCodec,
            videoCodec,
            videoResolution,
            container,
            videoFrameRate,
            videoProfile,
            hasVoiceActivity,
            part);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaMetaDataMedia.class,
                "id", id,
                "duration", duration,
                "bitrate", bitrate,
                "width", width,
                "height", height,
                "aspectRatio", aspectRatio,
                "audioChannels", audioChannels,
                "audioCodec", audioCodec,
                "videoCodec", videoCodec,
                "videoResolution", videoResolution,
                "container", container,
                "videoFrameRate", videoFrameRate,
                "videoProfile", videoProfile,
                "hasVoiceActivity", hasVoiceActivity,
                "part", part);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private Long duration;
 
        private Long bitrate;
 
        private Long width;
 
        private Long height;
 
        private Float aspectRatio;
 
        private Long audioChannels;
 
        private String audioCodec;
 
        private String videoCodec;
 
        private String videoResolution;
 
        private String container;
 
        private String videoFrameRate;
 
        private String videoProfile;
 
        private Boolean hasVoiceActivity;
 
        private List<GetMediaMetaDataPart> part;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique media identifier.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Duration of the media in milliseconds.
         */
        public Builder duration(long duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * Bitrate in bits per second.
         */
        public Builder bitrate(long bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        /**
         * Video width in pixels.
         */
        public Builder width(long width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        /**
         * Video height in pixels.
         */
        public Builder height(long height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * Aspect ratio of the video.
         */
        public Builder aspectRatio(float aspectRatio) {
            Utils.checkNotNull(aspectRatio, "aspectRatio");
            this.aspectRatio = aspectRatio;
            return this;
        }

        /**
         * Number of audio channels.
         */
        public Builder audioChannels(long audioChannels) {
            Utils.checkNotNull(audioChannels, "audioChannels");
            this.audioChannels = audioChannels;
            return this;
        }

        /**
         * Audio codec used.
         */
        public Builder audioCodec(String audioCodec) {
            Utils.checkNotNull(audioCodec, "audioCodec");
            this.audioCodec = audioCodec;
            return this;
        }

        /**
         * Video codec used.
         */
        public Builder videoCodec(String videoCodec) {
            Utils.checkNotNull(videoCodec, "videoCodec");
            this.videoCodec = videoCodec;
            return this;
        }

        /**
         * Video resolution (e.g., 4k).
         */
        public Builder videoResolution(String videoResolution) {
            Utils.checkNotNull(videoResolution, "videoResolution");
            this.videoResolution = videoResolution;
            return this;
        }

        /**
         * File container type.
         */
        public Builder container(String container) {
            Utils.checkNotNull(container, "container");
            this.container = container;
            return this;
        }

        /**
         * Frame rate of the video (e.g., 24p).
         */
        public Builder videoFrameRate(String videoFrameRate) {
            Utils.checkNotNull(videoFrameRate, "videoFrameRate");
            this.videoFrameRate = videoFrameRate;
            return this;
        }

        /**
         * Video profile (e.g., main 10).
         */
        public Builder videoProfile(String videoProfile) {
            Utils.checkNotNull(videoProfile, "videoProfile");
            this.videoProfile = videoProfile;
            return this;
        }

        /**
         * Indicates whether voice activity is detected.
         */
        public Builder hasVoiceActivity(boolean hasVoiceActivity) {
            Utils.checkNotNull(hasVoiceActivity, "hasVoiceActivity");
            this.hasVoiceActivity = hasVoiceActivity;
            return this;
        }

        /**
         * An array of parts for this media item.
         */
        public Builder part(List<GetMediaMetaDataPart> part) {
            Utils.checkNotNull(part, "part");
            this.part = part;
            return this;
        }
        
        public GetMediaMetaDataMedia build() {
            return new GetMediaMetaDataMedia(
                id,
                duration,
                bitrate,
                width,
                height,
                aspectRatio,
                audioChannels,
                audioCodec,
                videoCodec,
                videoResolution,
                container,
                videoFrameRate,
                videoProfile,
                hasVoiceActivity,
                part);
        }
    }
}

