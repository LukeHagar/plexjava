/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
/**
 * GetLibraryItemsType
 * 
 * <p>The type of media content in the Plex library. This can represent videos, music, or photos.
 */
@JsonDeserialize(using = GetLibraryItemsType._Deserializer.class)
@JsonSerialize(using = GetLibraryItemsType._Serializer.class)
public class GetLibraryItemsType {

    public static final GetLibraryItemsType Movie = new GetLibraryItemsType("movie");
    public static final GetLibraryItemsType TvShow = new GetLibraryItemsType("show");
    public static final GetLibraryItemsType Season = new GetLibraryItemsType("season");
    public static final GetLibraryItemsType Episode = new GetLibraryItemsType("episode");
    public static final GetLibraryItemsType Artist = new GetLibraryItemsType("artist");
    public static final GetLibraryItemsType Album = new GetLibraryItemsType("album");
    public static final GetLibraryItemsType Track = new GetLibraryItemsType("track");
    public static final GetLibraryItemsType PhotoAlbum = new GetLibraryItemsType("photoalbum");
    public static final GetLibraryItemsType Photo = new GetLibraryItemsType("photo");
    public static final GetLibraryItemsType Collection = new GetLibraryItemsType("collection");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, GetLibraryItemsType> values = createValuesMap();
    private static final Map<String, GetLibraryItemsTypeEnum> enums = createEnumsMap();

    private final String value;

    private GetLibraryItemsType(String value) {
        this.value = value;
    }

    /**
     * Returns a GetLibraryItemsType with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as GetLibraryItemsType
     */ 
    public static GetLibraryItemsType of(String value) {
        synchronized (GetLibraryItemsType.class) {
            return values.computeIfAbsent(value, v -> new GetLibraryItemsType(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<GetLibraryItemsTypeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GetLibraryItemsType other = (GetLibraryItemsType) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "GetLibraryItemsType [value=" + value + "]";
    }

    // return an array just like an enum
    public static GetLibraryItemsType[] values() {
        synchronized (GetLibraryItemsType.class) {
            return values.values().toArray(new GetLibraryItemsType[] {});
        }
    }

    private static final Map<String, GetLibraryItemsType> createValuesMap() {
        Map<String, GetLibraryItemsType> map = new LinkedHashMap<>();
        map.put("movie", Movie);
        map.put("show", TvShow);
        map.put("season", Season);
        map.put("episode", Episode);
        map.put("artist", Artist);
        map.put("album", Album);
        map.put("track", Track);
        map.put("photoalbum", PhotoAlbum);
        map.put("photo", Photo);
        map.put("collection", Collection);
        return map;
    }

    private static final Map<String, GetLibraryItemsTypeEnum> createEnumsMap() {
        Map<String, GetLibraryItemsTypeEnum> map = new HashMap<>();
        map.put("movie", GetLibraryItemsTypeEnum.Movie);
        map.put("show", GetLibraryItemsTypeEnum.TvShow);
        map.put("season", GetLibraryItemsTypeEnum.Season);
        map.put("episode", GetLibraryItemsTypeEnum.Episode);
        map.put("artist", GetLibraryItemsTypeEnum.Artist);
        map.put("album", GetLibraryItemsTypeEnum.Album);
        map.put("track", GetLibraryItemsTypeEnum.Track);
        map.put("photoalbum", GetLibraryItemsTypeEnum.PhotoAlbum);
        map.put("photo", GetLibraryItemsTypeEnum.Photo);
        map.put("collection", GetLibraryItemsTypeEnum.Collection);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<GetLibraryItemsType> {

        protected _Serializer() {
            super(GetLibraryItemsType.class);
        }

        @Override
        public void serialize(GetLibraryItemsType value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<GetLibraryItemsType> {

        protected _Deserializer() {
            super(GetLibraryItemsType.class);
        }

        @Override
        public GetLibraryItemsType deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return GetLibraryItemsType.of(v);
        }
    }
    
    public enum GetLibraryItemsTypeEnum {

        Movie("movie"),
        TvShow("show"),
        Season("season"),
        Episode("episode"),
        Artist("artist"),
        Album("album"),
        Track("track"),
        PhotoAlbum("photoalbum"),
        Photo("photo"),
        Collection("collection"),;

        private final String value;

        private GetLibraryItemsTypeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

