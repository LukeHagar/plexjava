/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * GetMediaMetaDataAttributes
 * 
 * <p>Attributes associated with the marker.
 */
public class GetMediaMetaDataAttributes {

    /**
     * The identifier for the attributes.
     */
    @JsonProperty("id")
    private long id;

    /**
     * The version number of the marker attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<Long> version;

    @JsonCreator
    public GetMediaMetaDataAttributes(
            @JsonProperty("id") long id,
            @JsonProperty("version") Optional<Long> version) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(version, "version");
        this.id = id;
        this.version = version;
    }
    
    public GetMediaMetaDataAttributes(
            long id) {
        this(id, Optional.empty());
    }

    /**
     * The identifier for the attributes.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * The version number of the marker attributes.
     */
    @JsonIgnore
    public Optional<Long> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The identifier for the attributes.
     */
    public GetMediaMetaDataAttributes withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The version number of the marker attributes.
     */
    public GetMediaMetaDataAttributes withVersion(long version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The version number of the marker attributes.
     */
    public GetMediaMetaDataAttributes withVersion(Optional<Long> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaMetaDataAttributes other = (GetMediaMetaDataAttributes) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaMetaDataAttributes.class,
                "id", id,
                "version", version);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private Optional<Long> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The identifier for the attributes.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The version number of the marker attributes.
         */
        public Builder version(long version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The version number of the marker attributes.
         */
        public Builder version(Optional<Long> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public GetMediaMetaDataAttributes build() {
            return new GetMediaMetaDataAttributes(
                id,
                version);
        }
    }
}
