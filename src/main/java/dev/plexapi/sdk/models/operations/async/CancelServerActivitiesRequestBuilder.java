/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.CancelServerActivitiesRequest;
import dev.plexapi.sdk.operations.CancelServerActivities;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class CancelServerActivitiesRequestBuilder {

    private String activityUUID;
    private final SDKConfiguration sdkConfiguration;

    public CancelServerActivitiesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public CancelServerActivitiesRequestBuilder activityUUID(String activityUUID) {
        Utils.checkNotNull(activityUUID, "activityUUID");
        this.activityUUID = activityUUID;
        return this;
    }


    private CancelServerActivitiesRequest buildRequest() {

        CancelServerActivitiesRequest request = new CancelServerActivitiesRequest(activityUUID);

        return request;
    }

    public CompletableFuture<CancelServerActivitiesResponse> call() throws Exception {
        
        AsyncRequestOperation<CancelServerActivitiesRequest, CancelServerActivitiesResponse> operation
              = new CancelServerActivities.Async(sdkConfiguration);
        CancelServerActivitiesRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
