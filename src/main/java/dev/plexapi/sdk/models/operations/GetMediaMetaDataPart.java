/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class GetMediaMetaDataPart {

    /**
     * Indicates if the part is accessible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessible")
    private Optional<Boolean> accessible;

    /**
     * Indicates if the part exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exists")
    private Optional<Boolean> exists;

    /**
     * Unique part identifier.
     */
    @JsonProperty("id")
    private long id;

    /**
     * Key to access this part.
     */
    @JsonProperty("key")
    private String key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexes")
    private Optional<String> indexes;

    /**
     * Duration of the part in milliseconds.
     */
    @JsonProperty("duration")
    private long duration;

    /**
     * File path for the part.
     */
    @JsonProperty("file")
    private String file;

    /**
     * File size in bytes.
     */
    @JsonProperty("size")
    private long size;

    /**
     * Container format of the part.
     */
    @JsonProperty("container")
    private String container;

    /**
     * Video profile for the part.
     */
    @JsonProperty("videoProfile")
    private String videoProfile;

    /**
     * An array of streams for this part.
     */
    @JsonProperty("Stream")
    private List<GetMediaMetaDataStream> stream;

    @JsonCreator
    public GetMediaMetaDataPart(
            @JsonProperty("accessible") Optional<Boolean> accessible,
            @JsonProperty("exists") Optional<Boolean> exists,
            @JsonProperty("id") long id,
            @JsonProperty("key") String key,
            @JsonProperty("indexes") Optional<String> indexes,
            @JsonProperty("duration") long duration,
            @JsonProperty("file") String file,
            @JsonProperty("size") long size,
            @JsonProperty("container") String container,
            @JsonProperty("videoProfile") String videoProfile,
            @JsonProperty("Stream") List<GetMediaMetaDataStream> stream) {
        Utils.checkNotNull(accessible, "accessible");
        Utils.checkNotNull(exists, "exists");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(indexes, "indexes");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(file, "file");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(container, "container");
        Utils.checkNotNull(videoProfile, "videoProfile");
        Utils.checkNotNull(stream, "stream");
        this.accessible = accessible;
        this.exists = exists;
        this.id = id;
        this.key = key;
        this.indexes = indexes;
        this.duration = duration;
        this.file = file;
        this.size = size;
        this.container = container;
        this.videoProfile = videoProfile;
        this.stream = stream;
    }
    
    public GetMediaMetaDataPart(
            long id,
            String key,
            long duration,
            String file,
            long size,
            String container,
            String videoProfile,
            List<GetMediaMetaDataStream> stream) {
        this(Optional.empty(), Optional.empty(), id, key, Optional.empty(), duration, file, size, container, videoProfile, stream);
    }

    /**
     * Indicates if the part is accessible.
     */
    @JsonIgnore
    public Optional<Boolean> accessible() {
        return accessible;
    }

    /**
     * Indicates if the part exists.
     */
    @JsonIgnore
    public Optional<Boolean> exists() {
        return exists;
    }

    /**
     * Unique part identifier.
     */
    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * Key to access this part.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    @JsonIgnore
    public Optional<String> indexes() {
        return indexes;
    }

    /**
     * Duration of the part in milliseconds.
     */
    @JsonIgnore
    public long duration() {
        return duration;
    }

    /**
     * File path for the part.
     */
    @JsonIgnore
    public String file() {
        return file;
    }

    /**
     * File size in bytes.
     */
    @JsonIgnore
    public long size() {
        return size;
    }

    /**
     * Container format of the part.
     */
    @JsonIgnore
    public String container() {
        return container;
    }

    /**
     * Video profile for the part.
     */
    @JsonIgnore
    public String videoProfile() {
        return videoProfile;
    }

    /**
     * An array of streams for this part.
     */
    @JsonIgnore
    public List<GetMediaMetaDataStream> stream() {
        return stream;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Indicates if the part is accessible.
     */
    public GetMediaMetaDataPart withAccessible(boolean accessible) {
        Utils.checkNotNull(accessible, "accessible");
        this.accessible = Optional.ofNullable(accessible);
        return this;
    }

    /**
     * Indicates if the part is accessible.
     */
    public GetMediaMetaDataPart withAccessible(Optional<Boolean> accessible) {
        Utils.checkNotNull(accessible, "accessible");
        this.accessible = accessible;
        return this;
    }

    /**
     * Indicates if the part exists.
     */
    public GetMediaMetaDataPart withExists(boolean exists) {
        Utils.checkNotNull(exists, "exists");
        this.exists = Optional.ofNullable(exists);
        return this;
    }

    /**
     * Indicates if the part exists.
     */
    public GetMediaMetaDataPart withExists(Optional<Boolean> exists) {
        Utils.checkNotNull(exists, "exists");
        this.exists = exists;
        return this;
    }

    /**
     * Unique part identifier.
     */
    public GetMediaMetaDataPart withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Key to access this part.
     */
    public GetMediaMetaDataPart withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetMediaMetaDataPart withIndexes(String indexes) {
        Utils.checkNotNull(indexes, "indexes");
        this.indexes = Optional.ofNullable(indexes);
        return this;
    }

    public GetMediaMetaDataPart withIndexes(Optional<String> indexes) {
        Utils.checkNotNull(indexes, "indexes");
        this.indexes = indexes;
        return this;
    }

    /**
     * Duration of the part in milliseconds.
     */
    public GetMediaMetaDataPart withDuration(long duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * File path for the part.
     */
    public GetMediaMetaDataPart withFile(String file) {
        Utils.checkNotNull(file, "file");
        this.file = file;
        return this;
    }

    /**
     * File size in bytes.
     */
    public GetMediaMetaDataPart withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Container format of the part.
     */
    public GetMediaMetaDataPart withContainer(String container) {
        Utils.checkNotNull(container, "container");
        this.container = container;
        return this;
    }

    /**
     * Video profile for the part.
     */
    public GetMediaMetaDataPart withVideoProfile(String videoProfile) {
        Utils.checkNotNull(videoProfile, "videoProfile");
        this.videoProfile = videoProfile;
        return this;
    }

    /**
     * An array of streams for this part.
     */
    public GetMediaMetaDataPart withStream(List<GetMediaMetaDataStream> stream) {
        Utils.checkNotNull(stream, "stream");
        this.stream = stream;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaMetaDataPart other = (GetMediaMetaDataPart) o;
        return 
            Objects.deepEquals(this.accessible, other.accessible) &&
            Objects.deepEquals(this.exists, other.exists) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.indexes, other.indexes) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.file, other.file) &&
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.container, other.container) &&
            Objects.deepEquals(this.videoProfile, other.videoProfile) &&
            Objects.deepEquals(this.stream, other.stream);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessible,
            exists,
            id,
            key,
            indexes,
            duration,
            file,
            size,
            container,
            videoProfile,
            stream);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaMetaDataPart.class,
                "accessible", accessible,
                "exists", exists,
                "id", id,
                "key", key,
                "indexes", indexes,
                "duration", duration,
                "file", file,
                "size", size,
                "container", container,
                "videoProfile", videoProfile,
                "stream", stream);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> accessible = Optional.empty();
 
        private Optional<Boolean> exists = Optional.empty();
 
        private Long id;
 
        private String key;
 
        private Optional<String> indexes = Optional.empty();
 
        private Long duration;
 
        private String file;
 
        private Long size;
 
        private String container;
 
        private String videoProfile;
 
        private List<GetMediaMetaDataStream> stream;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Indicates if the part is accessible.
         */
        public Builder accessible(boolean accessible) {
            Utils.checkNotNull(accessible, "accessible");
            this.accessible = Optional.ofNullable(accessible);
            return this;
        }

        /**
         * Indicates if the part is accessible.
         */
        public Builder accessible(Optional<Boolean> accessible) {
            Utils.checkNotNull(accessible, "accessible");
            this.accessible = accessible;
            return this;
        }

        /**
         * Indicates if the part exists.
         */
        public Builder exists(boolean exists) {
            Utils.checkNotNull(exists, "exists");
            this.exists = Optional.ofNullable(exists);
            return this;
        }

        /**
         * Indicates if the part exists.
         */
        public Builder exists(Optional<Boolean> exists) {
            Utils.checkNotNull(exists, "exists");
            this.exists = exists;
            return this;
        }

        /**
         * Unique part identifier.
         */
        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Key to access this part.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder indexes(String indexes) {
            Utils.checkNotNull(indexes, "indexes");
            this.indexes = Optional.ofNullable(indexes);
            return this;
        }

        public Builder indexes(Optional<String> indexes) {
            Utils.checkNotNull(indexes, "indexes");
            this.indexes = indexes;
            return this;
        }

        /**
         * Duration of the part in milliseconds.
         */
        public Builder duration(long duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * File path for the part.
         */
        public Builder file(String file) {
            Utils.checkNotNull(file, "file");
            this.file = file;
            return this;
        }

        /**
         * File size in bytes.
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Container format of the part.
         */
        public Builder container(String container) {
            Utils.checkNotNull(container, "container");
            this.container = container;
            return this;
        }

        /**
         * Video profile for the part.
         */
        public Builder videoProfile(String videoProfile) {
            Utils.checkNotNull(videoProfile, "videoProfile");
            this.videoProfile = videoProfile;
            return this;
        }

        /**
         * An array of streams for this part.
         */
        public Builder stream(List<GetMediaMetaDataStream> stream) {
            Utils.checkNotNull(stream, "stream");
            this.stream = stream;
            return this;
        }
        
        public GetMediaMetaDataPart build() {
            return new GetMediaMetaDataPart(
                accessible,
                exists,
                id,
                key,
                indexes,
                duration,
                file,
                size,
                container,
                videoProfile,
                stream);
        }
    }
}

