/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = GetLibraryItemsLibraryResponse200Type._Deserializer.class)
@JsonSerialize(using = GetLibraryItemsLibraryResponse200Type._Serializer.class)
public class GetLibraryItemsLibraryResponse200Type {

    public static final GetLibraryItemsLibraryResponse200Type COVER_POSTER = new GetLibraryItemsLibraryResponse200Type("coverPoster");
    public static final GetLibraryItemsLibraryResponse200Type BACKGROUND = new GetLibraryItemsLibraryResponse200Type("background");
    public static final GetLibraryItemsLibraryResponse200Type SNAPSHOT = new GetLibraryItemsLibraryResponse200Type("snapshot");
    public static final GetLibraryItemsLibraryResponse200Type CLEAR_LOGO = new GetLibraryItemsLibraryResponse200Type("clearLogo");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, GetLibraryItemsLibraryResponse200Type> values = createValuesMap();
    private static final Map<String, GetLibraryItemsLibraryResponse200TypeEnum> enums = createEnumsMap();

    private final String value;

    private GetLibraryItemsLibraryResponse200Type(String value) {
        this.value = value;
    }

    /**
     * Returns a GetLibraryItemsLibraryResponse200Type with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as GetLibraryItemsLibraryResponse200Type
     */ 
    public static GetLibraryItemsLibraryResponse200Type of(String value) {
        synchronized (GetLibraryItemsLibraryResponse200Type.class) {
            return values.computeIfAbsent(value, v -> new GetLibraryItemsLibraryResponse200Type(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<GetLibraryItemsLibraryResponse200TypeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        GetLibraryItemsLibraryResponse200Type other = (GetLibraryItemsLibraryResponse200Type) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "GetLibraryItemsLibraryResponse200Type [value=" + value + "]";
    }

    // return an array just like an enum
    public static GetLibraryItemsLibraryResponse200Type[] values() {
        synchronized (GetLibraryItemsLibraryResponse200Type.class) {
            return values.values().toArray(new GetLibraryItemsLibraryResponse200Type[] {});
        }
    }

    private static final Map<String, GetLibraryItemsLibraryResponse200Type> createValuesMap() {
        Map<String, GetLibraryItemsLibraryResponse200Type> map = new LinkedHashMap<>();
        map.put("coverPoster", COVER_POSTER);
        map.put("background", BACKGROUND);
        map.put("snapshot", SNAPSHOT);
        map.put("clearLogo", CLEAR_LOGO);
        return map;
    }

    private static final Map<String, GetLibraryItemsLibraryResponse200TypeEnum> createEnumsMap() {
        Map<String, GetLibraryItemsLibraryResponse200TypeEnum> map = new HashMap<>();
        map.put("coverPoster", GetLibraryItemsLibraryResponse200TypeEnum.COVER_POSTER);
        map.put("background", GetLibraryItemsLibraryResponse200TypeEnum.BACKGROUND);
        map.put("snapshot", GetLibraryItemsLibraryResponse200TypeEnum.SNAPSHOT);
        map.put("clearLogo", GetLibraryItemsLibraryResponse200TypeEnum.CLEAR_LOGO);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<GetLibraryItemsLibraryResponse200Type> {

        protected _Serializer() {
            super(GetLibraryItemsLibraryResponse200Type.class);
        }

        @Override
        public void serialize(GetLibraryItemsLibraryResponse200Type value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<GetLibraryItemsLibraryResponse200Type> {

        protected _Deserializer() {
            super(GetLibraryItemsLibraryResponse200Type.class);
        }

        @Override
        public GetLibraryItemsLibraryResponse200Type deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return GetLibraryItemsLibraryResponse200Type.of(v);
        }
    }
    
    public enum GetLibraryItemsLibraryResponse200TypeEnum {

        COVER_POSTER("coverPoster"),
        BACKGROUND("background"),
        SNAPSHOT("snapshot"),
        CLEAR_LOGO("clearLogo"),;

        private final String value;

        private GetLibraryItemsLibraryResponse200TypeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}

