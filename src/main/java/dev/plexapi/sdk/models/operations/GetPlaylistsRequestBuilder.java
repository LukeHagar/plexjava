/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.operations.GetPlaylists;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.util.Optional;

public class GetPlaylistsRequestBuilder {

    private Optional<? extends PlaylistType> playlistType = Optional.empty();
    private Optional<? extends QueryParamSmart> smart = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public GetPlaylistsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public GetPlaylistsRequestBuilder playlistType(PlaylistType playlistType) {
        Utils.checkNotNull(playlistType, "playlistType");
        this.playlistType = Optional.of(playlistType);
        return this;
    }

    public GetPlaylistsRequestBuilder playlistType(Optional<? extends PlaylistType> playlistType) {
        Utils.checkNotNull(playlistType, "playlistType");
        this.playlistType = playlistType;
        return this;
    }
                
    public GetPlaylistsRequestBuilder smart(QueryParamSmart smart) {
        Utils.checkNotNull(smart, "smart");
        this.smart = Optional.of(smart);
        return this;
    }

    public GetPlaylistsRequestBuilder smart(Optional<? extends QueryParamSmart> smart) {
        Utils.checkNotNull(smart, "smart");
        this.smart = smart;
        return this;
    }


    private GetPlaylistsRequest buildRequest() {

        GetPlaylistsRequest request = new GetPlaylistsRequest(playlistType,
            smart);

        return request;
    }

    public GetPlaylistsResponse call() throws Exception {
        
        RequestOperation<GetPlaylistsRequest, GetPlaylistsResponse> operation
              = new GetPlaylists.Sync(sdkConfiguration);
        GetPlaylistsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
