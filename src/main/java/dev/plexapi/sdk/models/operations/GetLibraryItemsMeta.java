/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;

/**
 * GetLibraryItemsMeta
 * 
 * <p>The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
 */
public class GetLibraryItemsMeta {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    private Optional<? extends List<GetLibraryItemsLibraryType>> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FieldType")
    private Optional<? extends List<GetLibraryItemsFieldType>> fieldType;

    @JsonCreator
    public GetLibraryItemsMeta(
            @JsonProperty("Type") Optional<? extends List<GetLibraryItemsLibraryType>> type,
            @JsonProperty("FieldType") Optional<? extends List<GetLibraryItemsFieldType>> fieldType) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(fieldType, "fieldType");
        this.type = type;
        this.fieldType = fieldType;
    }
    
    public GetLibraryItemsMeta() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsLibraryType>> type() {
        return (Optional<List<GetLibraryItemsLibraryType>>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsFieldType>> fieldType() {
        return (Optional<List<GetLibraryItemsFieldType>>) fieldType;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GetLibraryItemsMeta withType(List<GetLibraryItemsLibraryType> type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public GetLibraryItemsMeta withType(Optional<? extends List<GetLibraryItemsLibraryType>> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetLibraryItemsMeta withFieldType(List<GetLibraryItemsFieldType> fieldType) {
        Utils.checkNotNull(fieldType, "fieldType");
        this.fieldType = Optional.ofNullable(fieldType);
        return this;
    }


    public GetLibraryItemsMeta withFieldType(Optional<? extends List<GetLibraryItemsFieldType>> fieldType) {
        Utils.checkNotNull(fieldType, "fieldType");
        this.fieldType = fieldType;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsMeta other = (GetLibraryItemsMeta) o;
        return 
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.fieldType, other.fieldType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            type, fieldType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsMeta.class,
                "type", type,
                "fieldType", fieldType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<GetLibraryItemsLibraryType>> type = Optional.empty();

        private Optional<? extends List<GetLibraryItemsFieldType>> fieldType = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder type(List<GetLibraryItemsLibraryType> type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends List<GetLibraryItemsLibraryType>> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder fieldType(List<GetLibraryItemsFieldType> fieldType) {
            Utils.checkNotNull(fieldType, "fieldType");
            this.fieldType = Optional.ofNullable(fieldType);
            return this;
        }

        public Builder fieldType(Optional<? extends List<GetLibraryItemsFieldType>> fieldType) {
            Utils.checkNotNull(fieldType, "fieldType");
            this.fieldType = fieldType;
            return this;
        }

        public GetLibraryItemsMeta build() {

            return new GetLibraryItemsMeta(
                type, fieldType);
        }

    }
}
