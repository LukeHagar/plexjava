/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.ApplyUpdatesRequest;
import dev.plexapi.sdk.models.operations.Skip;
import dev.plexapi.sdk.models.operations.Tonight;
import dev.plexapi.sdk.operations.ApplyUpdates;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class ApplyUpdatesRequestBuilder {

    private Optional<? extends Tonight> tonight = Optional.empty();
    private Optional<? extends Skip> skip = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public ApplyUpdatesRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }
                
    public ApplyUpdatesRequestBuilder tonight(Tonight tonight) {
        Utils.checkNotNull(tonight, "tonight");
        this.tonight = Optional.of(tonight);
        return this;
    }

    public ApplyUpdatesRequestBuilder tonight(Optional<? extends Tonight> tonight) {
        Utils.checkNotNull(tonight, "tonight");
        this.tonight = tonight;
        return this;
    }
                
    public ApplyUpdatesRequestBuilder skip(Skip skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = Optional.of(skip);
        return this;
    }

    public ApplyUpdatesRequestBuilder skip(Optional<? extends Skip> skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = skip;
        return this;
    }


    private ApplyUpdatesRequest buildRequest() {

        ApplyUpdatesRequest request = new ApplyUpdatesRequest(tonight,
            skip);

        return request;
    }

    public CompletableFuture<ApplyUpdatesResponse> call() throws Exception {
        
        AsyncRequestOperation<ApplyUpdatesRequest, ApplyUpdatesResponse> operation
              = new ApplyUpdates.Async(sdkConfiguration);
        ApplyUpdatesRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
