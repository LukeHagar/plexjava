/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.operations.GetLibraryHubs;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Exception;
import java.util.Optional;

public class GetLibraryHubsRequestBuilder {

    private Double sectionId;
    private Optional<Double> count = Optional.empty();
    private Optional<? extends QueryParamOnlyTransient> onlyTransient = Optional.empty();
    private final SDKConfiguration sdkConfiguration;

    public GetLibraryHubsRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public GetLibraryHubsRequestBuilder sectionId(double sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = sectionId;
        return this;
    }
                
    public GetLibraryHubsRequestBuilder count(double count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.of(count);
        return this;
    }

    public GetLibraryHubsRequestBuilder count(Optional<Double> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }
                
    public GetLibraryHubsRequestBuilder onlyTransient(QueryParamOnlyTransient onlyTransient) {
        Utils.checkNotNull(onlyTransient, "onlyTransient");
        this.onlyTransient = Optional.of(onlyTransient);
        return this;
    }

    public GetLibraryHubsRequestBuilder onlyTransient(Optional<? extends QueryParamOnlyTransient> onlyTransient) {
        Utils.checkNotNull(onlyTransient, "onlyTransient");
        this.onlyTransient = onlyTransient;
        return this;
    }


    private GetLibraryHubsRequest buildRequest() {

        GetLibraryHubsRequest request = new GetLibraryHubsRequest(sectionId,
            count,
            onlyTransient);

        return request;
    }

    public GetLibraryHubsResponse call() throws Exception {
        
        RequestOperation<GetLibraryHubsRequest, GetLibraryHubsResponse> operation
              = new GetLibraryHubs.Sync(sdkConfiguration);
        GetLibraryHubsRequest request = buildRequest();

        return operation.handleResponse(operation.doRequest(request));
    }
}
