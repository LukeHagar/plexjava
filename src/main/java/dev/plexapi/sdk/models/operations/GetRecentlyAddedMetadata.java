/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package dev.plexapi.sdk.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * GetRecentlyAddedMetadata - Unknown
 * 
 */

public class GetRecentlyAddedMetadata {

    @JsonProperty("addedAt")
    private long addedAt;

    /**
     * The art image URL for the media item.
     */
    @JsonProperty("art")
    private String art;

    /**
     * The URL for the audience rating image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRatingImage")
    private Optional<String> audienceRatingImage;

    /**
     * The audience rating for the media item.
     */
    @JsonProperty("audienceRating")
    private double audienceRating;

    /**
     * The source from which chapter data is derived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapterSource")
    private Optional<String> chapterSource;

    /**
     * The number of child items associated with this media item.
     */
    @JsonProperty("childCount")
    private int childCount;

    /**
     * The content rating for the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<String> contentRating;

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAtAccuracy")
    private Optional<String> createdAtAccuracy;

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAtTZOffset")
    private Optional<String> createdAtTZOffset;

    /**
     * The duration of the media item in milliseconds.
     */
    @JsonProperty("duration")
    private int duration;

    /**
     * The art URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<String> grandparentArt;

    /**
     * The GUID of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentGuid")
    private Optional<String> grandparentGuid;

    /**
     * The key of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<String> grandparentKey;

    /**
     * The rating key of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentRatingKey")
    private Optional<String> grandparentRatingKey;

    /**
     * The slug for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentSlug")
    private Optional<String> grandparentSlug;

    /**
     * The theme URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTheme")
    private Optional<String> grandparentTheme;

    /**
     * The thumbnail URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<String> grandparentThumb;

    /**
     * The title of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<String> grandparentTitle;

    /**
     * The globally unique identifier for the media item.
     */
    @JsonProperty("guid")
    private String guid;

    /**
     * The index position of the media item.
     */
    @JsonProperty("index")
    private int index;

    /**
     * The unique key for the media item.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRatedAt")
    private Optional<Long> lastRatedAt;

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedAt")
    private Optional<Integer> lastViewedAt;

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<Integer> leafCount;

    /**
     * The identifier for the library section.
     */
    @JsonProperty("librarySectionID")
    private long librarySectionID;

    /**
     * The key corresponding to the library section.
     */
    @JsonProperty("librarySectionKey")
    private String librarySectionKey;

    /**
     * The title of the library section.
     */
    @JsonProperty("librarySectionTitle")
    private String librarySectionTitle;

    /**
     * The original title of the media item (if different).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalTitle")
    private Optional<String> originalTitle;

    /**
     * The original release date of the media item.
     */
    @JsonProperty("originallyAvailableAt")
    private LocalDate originallyAvailableAt;

    /**
     * The GUID of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<String> parentGuid;

    /**
     * The index position of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<Integer> parentIndex;

    /**
     * The key of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<String> parentKey;

    /**
     * The rating key of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<String> parentRatingKey;

    /**
     * The slug for the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentSlug")
    private Optional<String> parentSlug;

    /**
     * The studio of the parent media item.
     */
    @JsonProperty("parentStudio")
    private String parentStudio;

    /**
     * The theme URL for the parent media item.
     */
    @JsonProperty("parentTheme")
    private String parentTheme;

    /**
     * The thumbnail URL for the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<String> parentThumb;

    /**
     * The title of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<String> parentTitle;

    /**
     * The release year of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentYear")
    private Optional<Integer> parentYear;

    /**
     * The primary extra key associated with this media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryExtraKey")
    private Optional<String> primaryExtraKey;

    /**
     * The URL for the rating image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingImage")
    private Optional<String> ratingImage;

    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    @JsonProperty("ratingKey")
    private String ratingKey;

    /**
     * The critic rating for the media item.
     */
    @JsonProperty("rating")
    private float rating;

    /**
     * The total number of seasons (for TV shows).
     */
    @JsonProperty("seasonCount")
    private int seasonCount;

    /**
     * The number of times this media item has been skipped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipCount")
    private Optional<Integer> skipCount;

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    @JsonProperty("slug")
    private String slug;

    /**
     * The studio that produced the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("studio")
    private Optional<String> studio;

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    private Optional<String> subtype;

    /**
     * A synopsis of the media item.
     */
    @JsonProperty("summary")
    private String summary;

    /**
     * A brief tagline for the media item.
     */
    @JsonProperty("tagline")
    private String tagline;

    /**
     * The theme URL for the media item.
     */
    @JsonProperty("theme")
    private String theme;

    /**
     * The thumbnail image URL for the media item.
     */
    @JsonProperty("thumb")
    private String thumb;

    /**
     * The sort title used for ordering media items.
     */
    @JsonProperty("titleSort")
    private String titleSort;

    /**
     * The title of the media item.
     */
    @JsonProperty("title")
    private String title;

    @JsonProperty("type")
    private GetRecentlyAddedHubsType type;

    /**
     * Unix epoch datetime in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<Long> updatedAt;

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userRating")
    private Optional<Float> userRating;

    /**
     * The number of times this media item has been viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<Integer> viewCount;

    /**
     * The current playback offset (in milliseconds).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewOffset")
    private Optional<Integer> viewOffset;

    /**
     * The number of leaf items that have been viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedLeafCount")
    private Optional<Integer> viewedLeafCount;

    /**
     * The release year of the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<Integer> year;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    private Optional<? extends List<GetRecentlyAddedImage>> image;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UltraBlurColors")
    private Optional<? extends UltraBlurColors> ultraBlurColors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    private Optional<? extends List<Media>> media;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Genre")
    private Optional<? extends List<Genre>> genre;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    private Optional<? extends List<Country>> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Director")
    private Optional<? extends List<Director>> director;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Writer")
    private Optional<? extends List<Writer>> writer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Role")
    private Optional<? extends List<Role>> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Producer")
    private Optional<? extends List<Producer>> producer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Rating")
    private Optional<? extends List<Rating>> rating1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Similar")
    private Optional<? extends List<Similar>> similar;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location")
    private Optional<? extends List<Location>> location;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Guid")
    private Optional<? extends List<Guids>> guids;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Collection")
    private Optional<? extends List<Collection>> collection;

    @JsonCreator
    public GetRecentlyAddedMetadata(
            @JsonProperty("addedAt") long addedAt,
            @JsonProperty("art") String art,
            @JsonProperty("audienceRatingImage") Optional<String> audienceRatingImage,
            @JsonProperty("audienceRating") double audienceRating,
            @JsonProperty("chapterSource") Optional<String> chapterSource,
            @JsonProperty("childCount") int childCount,
            @JsonProperty("contentRating") Optional<String> contentRating,
            @JsonProperty("createdAtAccuracy") Optional<String> createdAtAccuracy,
            @JsonProperty("createdAtTZOffset") Optional<String> createdAtTZOffset,
            @JsonProperty("duration") int duration,
            @JsonProperty("grandparentArt") Optional<String> grandparentArt,
            @JsonProperty("grandparentGuid") Optional<String> grandparentGuid,
            @JsonProperty("grandparentKey") Optional<String> grandparentKey,
            @JsonProperty("grandparentRatingKey") Optional<String> grandparentRatingKey,
            @JsonProperty("grandparentSlug") Optional<String> grandparentSlug,
            @JsonProperty("grandparentTheme") Optional<String> grandparentTheme,
            @JsonProperty("grandparentThumb") Optional<String> grandparentThumb,
            @JsonProperty("grandparentTitle") Optional<String> grandparentTitle,
            @JsonProperty("guid") String guid,
            @JsonProperty("index") int index,
            @JsonProperty("key") String key,
            @JsonProperty("lastRatedAt") Optional<Long> lastRatedAt,
            @JsonProperty("lastViewedAt") Optional<Integer> lastViewedAt,
            @JsonProperty("leafCount") Optional<Integer> leafCount,
            @JsonProperty("librarySectionID") long librarySectionID,
            @JsonProperty("librarySectionKey") String librarySectionKey,
            @JsonProperty("librarySectionTitle") String librarySectionTitle,
            @JsonProperty("originalTitle") Optional<String> originalTitle,
            @JsonProperty("originallyAvailableAt") LocalDate originallyAvailableAt,
            @JsonProperty("parentGuid") Optional<String> parentGuid,
            @JsonProperty("parentIndex") Optional<Integer> parentIndex,
            @JsonProperty("parentKey") Optional<String> parentKey,
            @JsonProperty("parentRatingKey") Optional<String> parentRatingKey,
            @JsonProperty("parentSlug") Optional<String> parentSlug,
            @JsonProperty("parentStudio") String parentStudio,
            @JsonProperty("parentTheme") String parentTheme,
            @JsonProperty("parentThumb") Optional<String> parentThumb,
            @JsonProperty("parentTitle") Optional<String> parentTitle,
            @JsonProperty("parentYear") Optional<Integer> parentYear,
            @JsonProperty("primaryExtraKey") Optional<String> primaryExtraKey,
            @JsonProperty("ratingImage") Optional<String> ratingImage,
            @JsonProperty("ratingKey") String ratingKey,
            @JsonProperty("rating") float rating,
            @JsonProperty("seasonCount") int seasonCount,
            @JsonProperty("skipCount") Optional<Integer> skipCount,
            @JsonProperty("slug") String slug,
            @JsonProperty("studio") Optional<String> studio,
            @JsonProperty("subtype") Optional<String> subtype,
            @JsonProperty("summary") String summary,
            @JsonProperty("tagline") String tagline,
            @JsonProperty("theme") String theme,
            @JsonProperty("thumb") String thumb,
            @JsonProperty("titleSort") String titleSort,
            @JsonProperty("title") String title,
            @JsonProperty("type") GetRecentlyAddedHubsType type,
            @JsonProperty("updatedAt") Optional<Long> updatedAt,
            @JsonProperty("userRating") Optional<Float> userRating,
            @JsonProperty("viewCount") Optional<Integer> viewCount,
            @JsonProperty("viewOffset") Optional<Integer> viewOffset,
            @JsonProperty("viewedLeafCount") Optional<Integer> viewedLeafCount,
            @JsonProperty("year") Optional<Integer> year,
            @JsonProperty("Image") Optional<? extends List<GetRecentlyAddedImage>> image,
            @JsonProperty("UltraBlurColors") Optional<? extends UltraBlurColors> ultraBlurColors,
            @JsonProperty("Media") Optional<? extends List<Media>> media,
            @JsonProperty("Genre") Optional<? extends List<Genre>> genre,
            @JsonProperty("Country") Optional<? extends List<Country>> country,
            @JsonProperty("Director") Optional<? extends List<Director>> director,
            @JsonProperty("Writer") Optional<? extends List<Writer>> writer,
            @JsonProperty("Role") Optional<? extends List<Role>> role,
            @JsonProperty("Producer") Optional<? extends List<Producer>> producer,
            @JsonProperty("Rating") Optional<? extends List<Rating>> rating1,
            @JsonProperty("Similar") Optional<? extends List<Similar>> similar,
            @JsonProperty("Location") Optional<? extends List<Location>> location,
            @JsonProperty("Guid") Optional<? extends List<Guids>> guids,
            @JsonProperty("Collection") Optional<? extends List<Collection>> collection) {
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        Utils.checkNotNull(audienceRating, "audienceRating");
        Utils.checkNotNull(chapterSource, "chapterSource");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(originalTitle, "originalTitle");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(parentSlug, "parentSlug");
        Utils.checkNotNull(parentStudio, "parentStudio");
        Utils.checkNotNull(parentTheme, "parentTheme");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(parentYear, "parentYear");
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        Utils.checkNotNull(ratingImage, "ratingImage");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(seasonCount, "seasonCount");
        Utils.checkNotNull(skipCount, "skipCount");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(studio, "studio");
        Utils.checkNotNull(subtype, "subtype");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(tagline, "tagline");
        Utils.checkNotNull(theme, "theme");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(titleSort, "titleSort");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userRating, "userRating");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(viewOffset, "viewOffset");
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(genre, "genre");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(director, "director");
        Utils.checkNotNull(writer, "writer");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(producer, "producer");
        Utils.checkNotNull(rating1, "rating1");
        Utils.checkNotNull(similar, "similar");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(guids, "guids");
        Utils.checkNotNull(collection, "collection");
        this.addedAt = addedAt;
        this.art = art;
        this.audienceRatingImage = audienceRatingImage;
        this.audienceRating = audienceRating;
        this.chapterSource = chapterSource;
        this.childCount = childCount;
        this.contentRating = contentRating;
        this.createdAtAccuracy = createdAtAccuracy;
        this.createdAtTZOffset = createdAtTZOffset;
        this.duration = duration;
        this.grandparentArt = grandparentArt;
        this.grandparentGuid = grandparentGuid;
        this.grandparentKey = grandparentKey;
        this.grandparentRatingKey = grandparentRatingKey;
        this.grandparentSlug = grandparentSlug;
        this.grandparentTheme = grandparentTheme;
        this.grandparentThumb = grandparentThumb;
        this.grandparentTitle = grandparentTitle;
        this.guid = guid;
        this.index = index;
        this.key = key;
        this.lastRatedAt = lastRatedAt;
        this.lastViewedAt = lastViewedAt;
        this.leafCount = leafCount;
        this.librarySectionID = librarySectionID;
        this.librarySectionKey = librarySectionKey;
        this.librarySectionTitle = librarySectionTitle;
        this.originalTitle = originalTitle;
        this.originallyAvailableAt = originallyAvailableAt;
        this.parentGuid = parentGuid;
        this.parentIndex = parentIndex;
        this.parentKey = parentKey;
        this.parentRatingKey = parentRatingKey;
        this.parentSlug = parentSlug;
        this.parentStudio = parentStudio;
        this.parentTheme = parentTheme;
        this.parentThumb = parentThumb;
        this.parentTitle = parentTitle;
        this.parentYear = parentYear;
        this.primaryExtraKey = primaryExtraKey;
        this.ratingImage = ratingImage;
        this.ratingKey = ratingKey;
        this.rating = rating;
        this.seasonCount = seasonCount;
        this.skipCount = skipCount;
        this.slug = slug;
        this.studio = studio;
        this.subtype = subtype;
        this.summary = summary;
        this.tagline = tagline;
        this.theme = theme;
        this.thumb = thumb;
        this.titleSort = titleSort;
        this.title = title;
        this.type = type;
        this.updatedAt = updatedAt;
        this.userRating = userRating;
        this.viewCount = viewCount;
        this.viewOffset = viewOffset;
        this.viewedLeafCount = viewedLeafCount;
        this.year = year;
        this.image = image;
        this.ultraBlurColors = ultraBlurColors;
        this.media = media;
        this.genre = genre;
        this.country = country;
        this.director = director;
        this.writer = writer;
        this.role = role;
        this.producer = producer;
        this.rating1 = rating1;
        this.similar = similar;
        this.location = location;
        this.guids = guids;
        this.collection = collection;
    }
    
    public GetRecentlyAddedMetadata(
            long addedAt,
            String art,
            double audienceRating,
            int childCount,
            int duration,
            String guid,
            int index,
            String key,
            long librarySectionID,
            String librarySectionKey,
            String librarySectionTitle,
            LocalDate originallyAvailableAt,
            String parentStudio,
            String parentTheme,
            String ratingKey,
            float rating,
            int seasonCount,
            String slug,
            String summary,
            String tagline,
            String theme,
            String thumb,
            String titleSort,
            String title,
            GetRecentlyAddedHubsType type) {
        this(addedAt, art, Optional.empty(), audienceRating, Optional.empty(), childCount, Optional.empty(), Optional.empty(), Optional.empty(), duration, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), guid, index, key, Optional.empty(), Optional.empty(), Optional.empty(), librarySectionID, librarySectionKey, librarySectionTitle, Optional.empty(), originallyAvailableAt, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), parentStudio, parentTheme, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), ratingKey, rating, seasonCount, Optional.empty(), slug, Optional.empty(), Optional.empty(), summary, tagline, theme, thumb, titleSort, title, type, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public long addedAt() {
        return addedAt;
    }

    /**
     * The art image URL for the media item.
     */
    @JsonIgnore
    public String art() {
        return art;
    }

    /**
     * The URL for the audience rating image.
     */
    @JsonIgnore
    public Optional<String> audienceRatingImage() {
        return audienceRatingImage;
    }

    /**
     * The audience rating for the media item.
     */
    @JsonIgnore
    public double audienceRating() {
        return audienceRating;
    }

    /**
     * The source from which chapter data is derived.
     */
    @JsonIgnore
    public Optional<String> chapterSource() {
        return chapterSource;
    }

    /**
     * The number of child items associated with this media item.
     */
    @JsonIgnore
    public int childCount() {
        return childCount;
    }

    /**
     * The content rating for the media item.
     */
    @JsonIgnore
    public Optional<String> contentRating() {
        return contentRating;
    }

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    @JsonIgnore
    public Optional<String> createdAtAccuracy() {
        return createdAtAccuracy;
    }

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    @JsonIgnore
    public Optional<String> createdAtTZOffset() {
        return createdAtTZOffset;
    }

    /**
     * The duration of the media item in milliseconds.
     */
    @JsonIgnore
    public int duration() {
        return duration;
    }

    /**
     * The art URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentArt() {
        return grandparentArt;
    }

    /**
     * The GUID of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentGuid() {
        return grandparentGuid;
    }

    /**
     * The key of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentKey() {
        return grandparentKey;
    }

    /**
     * The rating key of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentRatingKey() {
        return grandparentRatingKey;
    }

    /**
     * The slug for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentSlug() {
        return grandparentSlug;
    }

    /**
     * The theme URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentTheme() {
        return grandparentTheme;
    }

    /**
     * The thumbnail URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentThumb() {
        return grandparentThumb;
    }

    /**
     * The title of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentTitle() {
        return grandparentTitle;
    }

    /**
     * The globally unique identifier for the media item.
     */
    @JsonIgnore
    public String guid() {
        return guid;
    }

    /**
     * The index position of the media item.
     */
    @JsonIgnore
    public int index() {
        return index;
    }

    /**
     * The unique key for the media item.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    @JsonIgnore
    public Optional<Long> lastRatedAt() {
        return lastRatedAt;
    }

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    @JsonIgnore
    public Optional<Integer> lastViewedAt() {
        return lastViewedAt;
    }

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    @JsonIgnore
    public Optional<Integer> leafCount() {
        return leafCount;
    }

    /**
     * The identifier for the library section.
     */
    @JsonIgnore
    public long librarySectionID() {
        return librarySectionID;
    }

    /**
     * The key corresponding to the library section.
     */
    @JsonIgnore
    public String librarySectionKey() {
        return librarySectionKey;
    }

    /**
     * The title of the library section.
     */
    @JsonIgnore
    public String librarySectionTitle() {
        return librarySectionTitle;
    }

    /**
     * The original title of the media item (if different).
     */
    @JsonIgnore
    public Optional<String> originalTitle() {
        return originalTitle;
    }

    /**
     * The original release date of the media item.
     */
    @JsonIgnore
    public LocalDate originallyAvailableAt() {
        return originallyAvailableAt;
    }

    /**
     * The GUID of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentGuid() {
        return parentGuid;
    }

    /**
     * The index position of the parent media item.
     */
    @JsonIgnore
    public Optional<Integer> parentIndex() {
        return parentIndex;
    }

    /**
     * The key of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentKey() {
        return parentKey;
    }

    /**
     * The rating key of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentRatingKey() {
        return parentRatingKey;
    }

    /**
     * The slug for the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentSlug() {
        return parentSlug;
    }

    /**
     * The studio of the parent media item.
     */
    @JsonIgnore
    public String parentStudio() {
        return parentStudio;
    }

    /**
     * The theme URL for the parent media item.
     */
    @JsonIgnore
    public String parentTheme() {
        return parentTheme;
    }

    /**
     * The thumbnail URL for the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentThumb() {
        return parentThumb;
    }

    /**
     * The title of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentTitle() {
        return parentTitle;
    }

    /**
     * The release year of the parent media item.
     */
    @JsonIgnore
    public Optional<Integer> parentYear() {
        return parentYear;
    }

    /**
     * The primary extra key associated with this media item.
     */
    @JsonIgnore
    public Optional<String> primaryExtraKey() {
        return primaryExtraKey;
    }

    /**
     * The URL for the rating image.
     */
    @JsonIgnore
    public Optional<String> ratingImage() {
        return ratingImage;
    }

    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    @JsonIgnore
    public String ratingKey() {
        return ratingKey;
    }

    /**
     * The critic rating for the media item.
     */
    @JsonIgnore
    public float rating() {
        return rating;
    }

    /**
     * The total number of seasons (for TV shows).
     */
    @JsonIgnore
    public int seasonCount() {
        return seasonCount;
    }

    /**
     * The number of times this media item has been skipped.
     */
    @JsonIgnore
    public Optional<Integer> skipCount() {
        return skipCount;
    }

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    @JsonIgnore
    public String slug() {
        return slug;
    }

    /**
     * The studio that produced the media item.
     */
    @JsonIgnore
    public Optional<String> studio() {
        return studio;
    }

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    @JsonIgnore
    public Optional<String> subtype() {
        return subtype;
    }

    /**
     * A synopsis of the media item.
     */
    @JsonIgnore
    public String summary() {
        return summary;
    }

    /**
     * A brief tagline for the media item.
     */
    @JsonIgnore
    public String tagline() {
        return tagline;
    }

    /**
     * The theme URL for the media item.
     */
    @JsonIgnore
    public String theme() {
        return theme;
    }

    /**
     * The thumbnail image URL for the media item.
     */
    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    /**
     * The sort title used for ordering media items.
     */
    @JsonIgnore
    public String titleSort() {
        return titleSort;
    }

    /**
     * The title of the media item.
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public GetRecentlyAddedHubsType type() {
        return type;
    }

    /**
     * Unix epoch datetime in seconds
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    @JsonIgnore
    public Optional<Float> userRating() {
        return userRating;
    }

    /**
     * The number of times this media item has been viewed.
     */
    @JsonIgnore
    public Optional<Integer> viewCount() {
        return viewCount;
    }

    /**
     * The current playback offset (in milliseconds).
     */
    @JsonIgnore
    public Optional<Integer> viewOffset() {
        return viewOffset;
    }

    /**
     * The number of leaf items that have been viewed.
     */
    @JsonIgnore
    public Optional<Integer> viewedLeafCount() {
        return viewedLeafCount;
    }

    /**
     * The release year of the media item.
     */
    @JsonIgnore
    public Optional<Integer> year() {
        return year;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetRecentlyAddedImage>> image() {
        return (Optional<List<GetRecentlyAddedImage>>) image;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UltraBlurColors> ultraBlurColors() {
        return (Optional<UltraBlurColors>) ultraBlurColors;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Media>> media() {
        return (Optional<List<Media>>) media;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Genre>> genre() {
        return (Optional<List<Genre>>) genre;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Country>> country() {
        return (Optional<List<Country>>) country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Director>> director() {
        return (Optional<List<Director>>) director;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Writer>> writer() {
        return (Optional<List<Writer>>) writer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Role>> role() {
        return (Optional<List<Role>>) role;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Producer>> producer() {
        return (Optional<List<Producer>>) producer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Rating>> rating1() {
        return (Optional<List<Rating>>) rating1;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Similar>> similar() {
        return (Optional<List<Similar>>) similar;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Location>> location() {
        return (Optional<List<Location>>) location;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Guids>> guids() {
        return (Optional<List<Guids>>) guids;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Collection>> collection() {
        return (Optional<List<Collection>>) collection;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetRecentlyAddedMetadata withAddedAt(long addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    /**
     * The art image URL for the media item.
     */
    public GetRecentlyAddedMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    /**
     * The URL for the audience rating image.
     */
    public GetRecentlyAddedMetadata withAudienceRatingImage(String audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
        return this;
    }

    /**
     * The URL for the audience rating image.
     */
    public GetRecentlyAddedMetadata withAudienceRatingImage(Optional<String> audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = audienceRatingImage;
        return this;
    }

    /**
     * The audience rating for the media item.
     */
    public GetRecentlyAddedMetadata withAudienceRating(double audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = audienceRating;
        return this;
    }

    /**
     * The source from which chapter data is derived.
     */
    public GetRecentlyAddedMetadata withChapterSource(String chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = Optional.ofNullable(chapterSource);
        return this;
    }

    /**
     * The source from which chapter data is derived.
     */
    public GetRecentlyAddedMetadata withChapterSource(Optional<String> chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = chapterSource;
        return this;
    }

    /**
     * The number of child items associated with this media item.
     */
    public GetRecentlyAddedMetadata withChildCount(int childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    /**
     * The content rating for the media item.
     */
    public GetRecentlyAddedMetadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }

    /**
     * The content rating for the media item.
     */
    public GetRecentlyAddedMetadata withContentRating(Optional<String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    public GetRecentlyAddedMetadata withCreatedAtAccuracy(String createdAtAccuracy) {
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        this.createdAtAccuracy = Optional.ofNullable(createdAtAccuracy);
        return this;
    }

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    public GetRecentlyAddedMetadata withCreatedAtAccuracy(Optional<String> createdAtAccuracy) {
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        this.createdAtAccuracy = createdAtAccuracy;
        return this;
    }

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    public GetRecentlyAddedMetadata withCreatedAtTZOffset(String createdAtTZOffset) {
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        this.createdAtTZOffset = Optional.ofNullable(createdAtTZOffset);
        return this;
    }

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    public GetRecentlyAddedMetadata withCreatedAtTZOffset(Optional<String> createdAtTZOffset) {
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        this.createdAtTZOffset = createdAtTZOffset;
        return this;
    }

    /**
     * The duration of the media item in milliseconds.
     */
    public GetRecentlyAddedMetadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The art URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }

    /**
     * The art URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentArt(Optional<String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    /**
     * The GUID of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentGuid(String grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = Optional.ofNullable(grandparentGuid);
        return this;
    }

    /**
     * The GUID of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentGuid(Optional<String> grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = grandparentGuid;
        return this;
    }

    /**
     * The key of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }

    /**
     * The key of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentKey(Optional<String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    /**
     * The rating key of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentRatingKey(String grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
        return this;
    }

    /**
     * The rating key of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentRatingKey(Optional<String> grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = grandparentRatingKey;
        return this;
    }

    /**
     * The slug for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentSlug(String grandparentSlug) {
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        this.grandparentSlug = Optional.ofNullable(grandparentSlug);
        return this;
    }

    /**
     * The slug for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentSlug(Optional<String> grandparentSlug) {
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        this.grandparentSlug = grandparentSlug;
        return this;
    }

    /**
     * The theme URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentTheme(String grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = Optional.ofNullable(grandparentTheme);
        return this;
    }

    /**
     * The theme URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentTheme(Optional<String> grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = grandparentTheme;
        return this;
    }

    /**
     * The thumbnail URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }

    /**
     * The thumbnail URL for the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentThumb(Optional<String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    /**
     * The title of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }

    /**
     * The title of the grandparent media item.
     */
    public GetRecentlyAddedMetadata withGrandparentTitle(Optional<String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    /**
     * The globally unique identifier for the media item.
     */
    public GetRecentlyAddedMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    /**
     * The index position of the media item.
     */
    public GetRecentlyAddedMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * The unique key for the media item.
     */
    public GetRecentlyAddedMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    public GetRecentlyAddedMetadata withLastRatedAt(long lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = Optional.ofNullable(lastRatedAt);
        return this;
    }

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    public GetRecentlyAddedMetadata withLastRatedAt(Optional<Long> lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = lastRatedAt;
        return this;
    }

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    public GetRecentlyAddedMetadata withLastViewedAt(int lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = Optional.ofNullable(lastViewedAt);
        return this;
    }

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    public GetRecentlyAddedMetadata withLastViewedAt(Optional<Integer> lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = lastViewedAt;
        return this;
    }

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    public GetRecentlyAddedMetadata withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    public GetRecentlyAddedMetadata withLeafCount(Optional<Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    /**
     * The identifier for the library section.
     */
    public GetRecentlyAddedMetadata withLibrarySectionID(long librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    /**
     * The key corresponding to the library section.
     */
    public GetRecentlyAddedMetadata withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    /**
     * The title of the library section.
     */
    public GetRecentlyAddedMetadata withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    /**
     * The original title of the media item (if different).
     */
    public GetRecentlyAddedMetadata withOriginalTitle(String originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = Optional.ofNullable(originalTitle);
        return this;
    }

    /**
     * The original title of the media item (if different).
     */
    public GetRecentlyAddedMetadata withOriginalTitle(Optional<String> originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = originalTitle;
        return this;
    }

    /**
     * The original release date of the media item.
     */
    public GetRecentlyAddedMetadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    /**
     * The GUID of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }

    /**
     * The GUID of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentGuid(Optional<String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    /**
     * The index position of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    /**
     * The index position of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentIndex(Optional<Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    /**
     * The key of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    /**
     * The key of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentKey(Optional<String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    /**
     * The rating key of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentRatingKey(String parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }

    /**
     * The rating key of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentRatingKey(Optional<String> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    /**
     * The slug for the parent media item.
     */
    public GetRecentlyAddedMetadata withParentSlug(String parentSlug) {
        Utils.checkNotNull(parentSlug, "parentSlug");
        this.parentSlug = Optional.ofNullable(parentSlug);
        return this;
    }

    /**
     * The slug for the parent media item.
     */
    public GetRecentlyAddedMetadata withParentSlug(Optional<String> parentSlug) {
        Utils.checkNotNull(parentSlug, "parentSlug");
        this.parentSlug = parentSlug;
        return this;
    }

    /**
     * The studio of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentStudio(String parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = parentStudio;
        return this;
    }

    /**
     * The theme URL for the parent media item.
     */
    public GetRecentlyAddedMetadata withParentTheme(String parentTheme) {
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.parentTheme = parentTheme;
        return this;
    }

    /**
     * The thumbnail URL for the parent media item.
     */
    public GetRecentlyAddedMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    /**
     * The thumbnail URL for the parent media item.
     */
    public GetRecentlyAddedMetadata withParentThumb(Optional<String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    /**
     * The title of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }

    /**
     * The title of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentTitle(Optional<String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    /**
     * The release year of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentYear(int parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = Optional.ofNullable(parentYear);
        return this;
    }

    /**
     * The release year of the parent media item.
     */
    public GetRecentlyAddedMetadata withParentYear(Optional<Integer> parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = parentYear;
        return this;
    }

    /**
     * The primary extra key associated with this media item.
     */
    public GetRecentlyAddedMetadata withPrimaryExtraKey(String primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
        return this;
    }

    /**
     * The primary extra key associated with this media item.
     */
    public GetRecentlyAddedMetadata withPrimaryExtraKey(Optional<String> primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = primaryExtraKey;
        return this;
    }

    /**
     * The URL for the rating image.
     */
    public GetRecentlyAddedMetadata withRatingImage(String ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = Optional.ofNullable(ratingImage);
        return this;
    }

    /**
     * The URL for the rating image.
     */
    public GetRecentlyAddedMetadata withRatingImage(Optional<String> ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = ratingImage;
        return this;
    }

    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    public GetRecentlyAddedMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    /**
     * The critic rating for the media item.
     */
    public GetRecentlyAddedMetadata withRating(float rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    /**
     * The total number of seasons (for TV shows).
     */
    public GetRecentlyAddedMetadata withSeasonCount(int seasonCount) {
        Utils.checkNotNull(seasonCount, "seasonCount");
        this.seasonCount = seasonCount;
        return this;
    }

    /**
     * The number of times this media item has been skipped.
     */
    public GetRecentlyAddedMetadata withSkipCount(int skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = Optional.ofNullable(skipCount);
        return this;
    }

    /**
     * The number of times this media item has been skipped.
     */
    public GetRecentlyAddedMetadata withSkipCount(Optional<Integer> skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = skipCount;
        return this;
    }

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    public GetRecentlyAddedMetadata withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The studio that produced the media item.
     */
    public GetRecentlyAddedMetadata withStudio(String studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = Optional.ofNullable(studio);
        return this;
    }

    /**
     * The studio that produced the media item.
     */
    public GetRecentlyAddedMetadata withStudio(Optional<String> studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = studio;
        return this;
    }

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    public GetRecentlyAddedMetadata withSubtype(String subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = Optional.ofNullable(subtype);
        return this;
    }

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    public GetRecentlyAddedMetadata withSubtype(Optional<String> subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = subtype;
        return this;
    }

    /**
     * A synopsis of the media item.
     */
    public GetRecentlyAddedMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * A brief tagline for the media item.
     */
    public GetRecentlyAddedMetadata withTagline(String tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = tagline;
        return this;
    }

    /**
     * The theme URL for the media item.
     */
    public GetRecentlyAddedMetadata withTheme(String theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = theme;
        return this;
    }

    /**
     * The thumbnail image URL for the media item.
     */
    public GetRecentlyAddedMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    /**
     * The sort title used for ordering media items.
     */
    public GetRecentlyAddedMetadata withTitleSort(String titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = titleSort;
        return this;
    }

    /**
     * The title of the media item.
     */
    public GetRecentlyAddedMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetRecentlyAddedMetadata withType(GetRecentlyAddedHubsType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Unix epoch datetime in seconds
     */
    public GetRecentlyAddedMetadata withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix epoch datetime in seconds
     */
    public GetRecentlyAddedMetadata withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    public GetRecentlyAddedMetadata withUserRating(float userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = Optional.ofNullable(userRating);
        return this;
    }

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    public GetRecentlyAddedMetadata withUserRating(Optional<Float> userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = userRating;
        return this;
    }

    /**
     * The number of times this media item has been viewed.
     */
    public GetRecentlyAddedMetadata withViewCount(int viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }

    /**
     * The number of times this media item has been viewed.
     */
    public GetRecentlyAddedMetadata withViewCount(Optional<Integer> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    /**
     * The current playback offset (in milliseconds).
     */
    public GetRecentlyAddedMetadata withViewOffset(int viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = Optional.ofNullable(viewOffset);
        return this;
    }

    /**
     * The current playback offset (in milliseconds).
     */
    public GetRecentlyAddedMetadata withViewOffset(Optional<Integer> viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = viewOffset;
        return this;
    }

    /**
     * The number of leaf items that have been viewed.
     */
    public GetRecentlyAddedMetadata withViewedLeafCount(int viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
        return this;
    }

    /**
     * The number of leaf items that have been viewed.
     */
    public GetRecentlyAddedMetadata withViewedLeafCount(Optional<Integer> viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = viewedLeafCount;
        return this;
    }

    /**
     * The release year of the media item.
     */
    public GetRecentlyAddedMetadata withYear(int year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    /**
     * The release year of the media item.
     */
    public GetRecentlyAddedMetadata withYear(Optional<Integer> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    public GetRecentlyAddedMetadata withImage(List<GetRecentlyAddedImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    public GetRecentlyAddedMetadata withImage(Optional<? extends List<GetRecentlyAddedImage>> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    public GetRecentlyAddedMetadata withUltraBlurColors(UltraBlurColors ultraBlurColors) {
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        this.ultraBlurColors = Optional.ofNullable(ultraBlurColors);
        return this;
    }

    public GetRecentlyAddedMetadata withUltraBlurColors(Optional<? extends UltraBlurColors> ultraBlurColors) {
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        this.ultraBlurColors = ultraBlurColors;
        return this;
    }

    public GetRecentlyAddedMetadata withMedia(List<Media> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }

    public GetRecentlyAddedMetadata withMedia(Optional<? extends List<Media>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public GetRecentlyAddedMetadata withGenre(List<Genre> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = Optional.ofNullable(genre);
        return this;
    }

    public GetRecentlyAddedMetadata withGenre(Optional<? extends List<Genre>> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = genre;
        return this;
    }

    public GetRecentlyAddedMetadata withCountry(List<Country> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public GetRecentlyAddedMetadata withCountry(Optional<? extends List<Country>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public GetRecentlyAddedMetadata withDirector(List<Director> director) {
        Utils.checkNotNull(director, "director");
        this.director = Optional.ofNullable(director);
        return this;
    }

    public GetRecentlyAddedMetadata withDirector(Optional<? extends List<Director>> director) {
        Utils.checkNotNull(director, "director");
        this.director = director;
        return this;
    }

    public GetRecentlyAddedMetadata withWriter(List<Writer> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = Optional.ofNullable(writer);
        return this;
    }

    public GetRecentlyAddedMetadata withWriter(Optional<? extends List<Writer>> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = writer;
        return this;
    }

    public GetRecentlyAddedMetadata withRole(List<Role> role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public GetRecentlyAddedMetadata withRole(Optional<? extends List<Role>> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public GetRecentlyAddedMetadata withProducer(List<Producer> producer) {
        Utils.checkNotNull(producer, "producer");
        this.producer = Optional.ofNullable(producer);
        return this;
    }

    public GetRecentlyAddedMetadata withProducer(Optional<? extends List<Producer>> producer) {
        Utils.checkNotNull(producer, "producer");
        this.producer = producer;
        return this;
    }

    public GetRecentlyAddedMetadata withRating1(List<Rating> rating1) {
        Utils.checkNotNull(rating1, "rating1");
        this.rating1 = Optional.ofNullable(rating1);
        return this;
    }

    public GetRecentlyAddedMetadata withRating1(Optional<? extends List<Rating>> rating1) {
        Utils.checkNotNull(rating1, "rating1");
        this.rating1 = rating1;
        return this;
    }

    public GetRecentlyAddedMetadata withSimilar(List<Similar> similar) {
        Utils.checkNotNull(similar, "similar");
        this.similar = Optional.ofNullable(similar);
        return this;
    }

    public GetRecentlyAddedMetadata withSimilar(Optional<? extends List<Similar>> similar) {
        Utils.checkNotNull(similar, "similar");
        this.similar = similar;
        return this;
    }

    public GetRecentlyAddedMetadata withLocation(List<Location> location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public GetRecentlyAddedMetadata withLocation(Optional<? extends List<Location>> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public GetRecentlyAddedMetadata withGuids(List<Guids> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = Optional.ofNullable(guids);
        return this;
    }

    public GetRecentlyAddedMetadata withGuids(Optional<? extends List<Guids>> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = guids;
        return this;
    }

    public GetRecentlyAddedMetadata withCollection(List<Collection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public GetRecentlyAddedMetadata withCollection(Optional<? extends List<Collection>> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRecentlyAddedMetadata other = (GetRecentlyAddedMetadata) o;
        return 
            Objects.deepEquals(this.addedAt, other.addedAt) &&
            Objects.deepEquals(this.art, other.art) &&
            Objects.deepEquals(this.audienceRatingImage, other.audienceRatingImage) &&
            Objects.deepEquals(this.audienceRating, other.audienceRating) &&
            Objects.deepEquals(this.chapterSource, other.chapterSource) &&
            Objects.deepEquals(this.childCount, other.childCount) &&
            Objects.deepEquals(this.contentRating, other.contentRating) &&
            Objects.deepEquals(this.createdAtAccuracy, other.createdAtAccuracy) &&
            Objects.deepEquals(this.createdAtTZOffset, other.createdAtTZOffset) &&
            Objects.deepEquals(this.duration, other.duration) &&
            Objects.deepEquals(this.grandparentArt, other.grandparentArt) &&
            Objects.deepEquals(this.grandparentGuid, other.grandparentGuid) &&
            Objects.deepEquals(this.grandparentKey, other.grandparentKey) &&
            Objects.deepEquals(this.grandparentRatingKey, other.grandparentRatingKey) &&
            Objects.deepEquals(this.grandparentSlug, other.grandparentSlug) &&
            Objects.deepEquals(this.grandparentTheme, other.grandparentTheme) &&
            Objects.deepEquals(this.grandparentThumb, other.grandparentThumb) &&
            Objects.deepEquals(this.grandparentTitle, other.grandparentTitle) &&
            Objects.deepEquals(this.guid, other.guid) &&
            Objects.deepEquals(this.index, other.index) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.lastRatedAt, other.lastRatedAt) &&
            Objects.deepEquals(this.lastViewedAt, other.lastViewedAt) &&
            Objects.deepEquals(this.leafCount, other.leafCount) &&
            Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            Objects.deepEquals(this.librarySectionKey, other.librarySectionKey) &&
            Objects.deepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            Objects.deepEquals(this.originalTitle, other.originalTitle) &&
            Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            Objects.deepEquals(this.parentGuid, other.parentGuid) &&
            Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            Objects.deepEquals(this.parentKey, other.parentKey) &&
            Objects.deepEquals(this.parentRatingKey, other.parentRatingKey) &&
            Objects.deepEquals(this.parentSlug, other.parentSlug) &&
            Objects.deepEquals(this.parentStudio, other.parentStudio) &&
            Objects.deepEquals(this.parentTheme, other.parentTheme) &&
            Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            Objects.deepEquals(this.parentTitle, other.parentTitle) &&
            Objects.deepEquals(this.parentYear, other.parentYear) &&
            Objects.deepEquals(this.primaryExtraKey, other.primaryExtraKey) &&
            Objects.deepEquals(this.ratingImage, other.ratingImage) &&
            Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            Objects.deepEquals(this.rating, other.rating) &&
            Objects.deepEquals(this.seasonCount, other.seasonCount) &&
            Objects.deepEquals(this.skipCount, other.skipCount) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.studio, other.studio) &&
            Objects.deepEquals(this.subtype, other.subtype) &&
            Objects.deepEquals(this.summary, other.summary) &&
            Objects.deepEquals(this.tagline, other.tagline) &&
            Objects.deepEquals(this.theme, other.theme) &&
            Objects.deepEquals(this.thumb, other.thumb) &&
            Objects.deepEquals(this.titleSort, other.titleSort) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userRating, other.userRating) &&
            Objects.deepEquals(this.viewCount, other.viewCount) &&
            Objects.deepEquals(this.viewOffset, other.viewOffset) &&
            Objects.deepEquals(this.viewedLeafCount, other.viewedLeafCount) &&
            Objects.deepEquals(this.year, other.year) &&
            Objects.deepEquals(this.image, other.image) &&
            Objects.deepEquals(this.ultraBlurColors, other.ultraBlurColors) &&
            Objects.deepEquals(this.media, other.media) &&
            Objects.deepEquals(this.genre, other.genre) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.director, other.director) &&
            Objects.deepEquals(this.writer, other.writer) &&
            Objects.deepEquals(this.role, other.role) &&
            Objects.deepEquals(this.producer, other.producer) &&
            Objects.deepEquals(this.rating1, other.rating1) &&
            Objects.deepEquals(this.similar, other.similar) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.guids, other.guids) &&
            Objects.deepEquals(this.collection, other.collection);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            addedAt,
            art,
            audienceRatingImage,
            audienceRating,
            chapterSource,
            childCount,
            contentRating,
            createdAtAccuracy,
            createdAtTZOffset,
            duration,
            grandparentArt,
            grandparentGuid,
            grandparentKey,
            grandparentRatingKey,
            grandparentSlug,
            grandparentTheme,
            grandparentThumb,
            grandparentTitle,
            guid,
            index,
            key,
            lastRatedAt,
            lastViewedAt,
            leafCount,
            librarySectionID,
            librarySectionKey,
            librarySectionTitle,
            originalTitle,
            originallyAvailableAt,
            parentGuid,
            parentIndex,
            parentKey,
            parentRatingKey,
            parentSlug,
            parentStudio,
            parentTheme,
            parentThumb,
            parentTitle,
            parentYear,
            primaryExtraKey,
            ratingImage,
            ratingKey,
            rating,
            seasonCount,
            skipCount,
            slug,
            studio,
            subtype,
            summary,
            tagline,
            theme,
            thumb,
            titleSort,
            title,
            type,
            updatedAt,
            userRating,
            viewCount,
            viewOffset,
            viewedLeafCount,
            year,
            image,
            ultraBlurColors,
            media,
            genre,
            country,
            director,
            writer,
            role,
            producer,
            rating1,
            similar,
            location,
            guids,
            collection);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRecentlyAddedMetadata.class,
                "addedAt", addedAt,
                "art", art,
                "audienceRatingImage", audienceRatingImage,
                "audienceRating", audienceRating,
                "chapterSource", chapterSource,
                "childCount", childCount,
                "contentRating", contentRating,
                "createdAtAccuracy", createdAtAccuracy,
                "createdAtTZOffset", createdAtTZOffset,
                "duration", duration,
                "grandparentArt", grandparentArt,
                "grandparentGuid", grandparentGuid,
                "grandparentKey", grandparentKey,
                "grandparentRatingKey", grandparentRatingKey,
                "grandparentSlug", grandparentSlug,
                "grandparentTheme", grandparentTheme,
                "grandparentThumb", grandparentThumb,
                "grandparentTitle", grandparentTitle,
                "guid", guid,
                "index", index,
                "key", key,
                "lastRatedAt", lastRatedAt,
                "lastViewedAt", lastViewedAt,
                "leafCount", leafCount,
                "librarySectionID", librarySectionID,
                "librarySectionKey", librarySectionKey,
                "librarySectionTitle", librarySectionTitle,
                "originalTitle", originalTitle,
                "originallyAvailableAt", originallyAvailableAt,
                "parentGuid", parentGuid,
                "parentIndex", parentIndex,
                "parentKey", parentKey,
                "parentRatingKey", parentRatingKey,
                "parentSlug", parentSlug,
                "parentStudio", parentStudio,
                "parentTheme", parentTheme,
                "parentThumb", parentThumb,
                "parentTitle", parentTitle,
                "parentYear", parentYear,
                "primaryExtraKey", primaryExtraKey,
                "ratingImage", ratingImage,
                "ratingKey", ratingKey,
                "rating", rating,
                "seasonCount", seasonCount,
                "skipCount", skipCount,
                "slug", slug,
                "studio", studio,
                "subtype", subtype,
                "summary", summary,
                "tagline", tagline,
                "theme", theme,
                "thumb", thumb,
                "titleSort", titleSort,
                "title", title,
                "type", type,
                "updatedAt", updatedAt,
                "userRating", userRating,
                "viewCount", viewCount,
                "viewOffset", viewOffset,
                "viewedLeafCount", viewedLeafCount,
                "year", year,
                "image", image,
                "ultraBlurColors", ultraBlurColors,
                "media", media,
                "genre", genre,
                "country", country,
                "director", director,
                "writer", writer,
                "role", role,
                "producer", producer,
                "rating1", rating1,
                "similar", similar,
                "location", location,
                "guids", guids,
                "collection", collection);
    }
    
    public final static class Builder {
 
        private Long addedAt;
 
        private String art;
 
        private Optional<String> audienceRatingImage = Optional.empty();
 
        private Double audienceRating;
 
        private Optional<String> chapterSource = Optional.empty();
 
        private Integer childCount;
 
        private Optional<String> contentRating = Optional.empty();
 
        private Optional<String> createdAtAccuracy = Optional.empty();
 
        private Optional<String> createdAtTZOffset = Optional.empty();
 
        private Integer duration;
 
        private Optional<String> grandparentArt = Optional.empty();
 
        private Optional<String> grandparentGuid = Optional.empty();
 
        private Optional<String> grandparentKey = Optional.empty();
 
        private Optional<String> grandparentRatingKey = Optional.empty();
 
        private Optional<String> grandparentSlug = Optional.empty();
 
        private Optional<String> grandparentTheme = Optional.empty();
 
        private Optional<String> grandparentThumb = Optional.empty();
 
        private Optional<String> grandparentTitle = Optional.empty();
 
        private String guid;
 
        private Integer index;
 
        private String key;
 
        private Optional<Long> lastRatedAt = Optional.empty();
 
        private Optional<Integer> lastViewedAt = Optional.empty();
 
        private Optional<Integer> leafCount = Optional.empty();
 
        private Long librarySectionID;
 
        private String librarySectionKey;
 
        private String librarySectionTitle;
 
        private Optional<String> originalTitle = Optional.empty();
 
        private LocalDate originallyAvailableAt;
 
        private Optional<String> parentGuid = Optional.empty();
 
        private Optional<Integer> parentIndex = Optional.empty();
 
        private Optional<String> parentKey = Optional.empty();
 
        private Optional<String> parentRatingKey = Optional.empty();
 
        private Optional<String> parentSlug = Optional.empty();
 
        private String parentStudio;
 
        private String parentTheme;
 
        private Optional<String> parentThumb = Optional.empty();
 
        private Optional<String> parentTitle = Optional.empty();
 
        private Optional<Integer> parentYear = Optional.empty();
 
        private Optional<String> primaryExtraKey = Optional.empty();
 
        private Optional<String> ratingImage = Optional.empty();
 
        private String ratingKey;
 
        private Float rating;
 
        private Integer seasonCount;
 
        private Optional<Integer> skipCount = Optional.empty();
 
        private String slug;
 
        private Optional<String> studio = Optional.empty();
 
        private Optional<String> subtype = Optional.empty();
 
        private String summary;
 
        private String tagline;
 
        private String theme;
 
        private String thumb;
 
        private String titleSort;
 
        private String title;
 
        private GetRecentlyAddedHubsType type;
 
        private Optional<Long> updatedAt = Optional.empty();
 
        private Optional<Float> userRating = Optional.empty();
 
        private Optional<Integer> viewCount = Optional.empty();
 
        private Optional<Integer> viewOffset = Optional.empty();
 
        private Optional<Integer> viewedLeafCount = Optional.empty();
 
        private Optional<Integer> year = Optional.empty();
 
        private Optional<? extends List<GetRecentlyAddedImage>> image = Optional.empty();
 
        private Optional<? extends UltraBlurColors> ultraBlurColors = Optional.empty();
 
        private Optional<? extends List<Media>> media = Optional.empty();
 
        private Optional<? extends List<Genre>> genre = Optional.empty();
 
        private Optional<? extends List<Country>> country = Optional.empty();
 
        private Optional<? extends List<Director>> director = Optional.empty();
 
        private Optional<? extends List<Writer>> writer = Optional.empty();
 
        private Optional<? extends List<Role>> role = Optional.empty();
 
        private Optional<? extends List<Producer>> producer = Optional.empty();
 
        private Optional<? extends List<Rating>> rating1 = Optional.empty();
 
        private Optional<? extends List<Similar>> similar = Optional.empty();
 
        private Optional<? extends List<Location>> location = Optional.empty();
 
        private Optional<? extends List<Guids>> guids = Optional.empty();
 
        private Optional<? extends List<Collection>> collection = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addedAt(long addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        /**
         * The art image URL for the media item.
         */
        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        /**
         * The URL for the audience rating image.
         */
        public Builder audienceRatingImage(String audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
            return this;
        }

        /**
         * The URL for the audience rating image.
         */
        public Builder audienceRatingImage(Optional<String> audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = audienceRatingImage;
            return this;
        }

        /**
         * The audience rating for the media item.
         */
        public Builder audienceRating(double audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = audienceRating;
            return this;
        }

        /**
         * The source from which chapter data is derived.
         */
        public Builder chapterSource(String chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = Optional.ofNullable(chapterSource);
            return this;
        }

        /**
         * The source from which chapter data is derived.
         */
        public Builder chapterSource(Optional<String> chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = chapterSource;
            return this;
        }

        /**
         * The number of child items associated with this media item.
         */
        public Builder childCount(int childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }

        /**
         * The content rating for the media item.
         */
        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        /**
         * The content rating for the media item.
         */
        public Builder contentRating(Optional<String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }

        /**
         * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
         */
        public Builder createdAtAccuracy(String createdAtAccuracy) {
            Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
            this.createdAtAccuracy = Optional.ofNullable(createdAtAccuracy);
            return this;
        }

        /**
         * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
         */
        public Builder createdAtAccuracy(Optional<String> createdAtAccuracy) {
            Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
            this.createdAtAccuracy = createdAtAccuracy;
            return this;
        }

        /**
         * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
         */
        public Builder createdAtTZOffset(String createdAtTZOffset) {
            Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
            this.createdAtTZOffset = Optional.ofNullable(createdAtTZOffset);
            return this;
        }

        /**
         * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
         */
        public Builder createdAtTZOffset(Optional<String> createdAtTZOffset) {
            Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
            this.createdAtTZOffset = createdAtTZOffset;
            return this;
        }

        /**
         * The duration of the media item in milliseconds.
         */
        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        /**
         * The art URL for the grandparent media item.
         */
        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        /**
         * The art URL for the grandparent media item.
         */
        public Builder grandparentArt(Optional<String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }

        /**
         * The GUID of the grandparent media item.
         */
        public Builder grandparentGuid(String grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = Optional.ofNullable(grandparentGuid);
            return this;
        }

        /**
         * The GUID of the grandparent media item.
         */
        public Builder grandparentGuid(Optional<String> grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = grandparentGuid;
            return this;
        }

        /**
         * The key of the grandparent media item.
         */
        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        /**
         * The key of the grandparent media item.
         */
        public Builder grandparentKey(Optional<String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }

        /**
         * The rating key of the grandparent media item.
         */
        public Builder grandparentRatingKey(String grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
            return this;
        }

        /**
         * The rating key of the grandparent media item.
         */
        public Builder grandparentRatingKey(Optional<String> grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = grandparentRatingKey;
            return this;
        }

        /**
         * The slug for the grandparent media item.
         */
        public Builder grandparentSlug(String grandparentSlug) {
            Utils.checkNotNull(grandparentSlug, "grandparentSlug");
            this.grandparentSlug = Optional.ofNullable(grandparentSlug);
            return this;
        }

        /**
         * The slug for the grandparent media item.
         */
        public Builder grandparentSlug(Optional<String> grandparentSlug) {
            Utils.checkNotNull(grandparentSlug, "grandparentSlug");
            this.grandparentSlug = grandparentSlug;
            return this;
        }

        /**
         * The theme URL for the grandparent media item.
         */
        public Builder grandparentTheme(String grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = Optional.ofNullable(grandparentTheme);
            return this;
        }

        /**
         * The theme URL for the grandparent media item.
         */
        public Builder grandparentTheme(Optional<String> grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = grandparentTheme;
            return this;
        }

        /**
         * The thumbnail URL for the grandparent media item.
         */
        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        /**
         * The thumbnail URL for the grandparent media item.
         */
        public Builder grandparentThumb(Optional<String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }

        /**
         * The title of the grandparent media item.
         */
        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        /**
         * The title of the grandparent media item.
         */
        public Builder grandparentTitle(Optional<String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }

        /**
         * The globally unique identifier for the media item.
         */
        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        /**
         * The index position of the media item.
         */
        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * The unique key for the media item.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * The Unix timestamp representing the last time the item was rated.
         */
        public Builder lastRatedAt(long lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = Optional.ofNullable(lastRatedAt);
            return this;
        }

        /**
         * The Unix timestamp representing the last time the item was rated.
         */
        public Builder lastRatedAt(Optional<Long> lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = lastRatedAt;
            return this;
        }

        /**
         * Unix timestamp for when the media item was last viewed.
         */
        public Builder lastViewedAt(int lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = Optional.ofNullable(lastViewedAt);
            return this;
        }

        /**
         * Unix timestamp for when the media item was last viewed.
         */
        public Builder lastViewedAt(Optional<Integer> lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = lastViewedAt;
            return this;
        }

        /**
         * The number of leaf items (end nodes) under this media item.
         */
        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        /**
         * The number of leaf items (end nodes) under this media item.
         */
        public Builder leafCount(Optional<Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        /**
         * The identifier for the library section.
         */
        public Builder librarySectionID(long librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        /**
         * The key corresponding to the library section.
         */
        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }

        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }

        /**
         * The original title of the media item (if different).
         */
        public Builder originalTitle(String originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = Optional.ofNullable(originalTitle);
            return this;
        }

        /**
         * The original title of the media item (if different).
         */
        public Builder originalTitle(Optional<String> originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = originalTitle;
            return this;
        }

        /**
         * The original release date of the media item.
         */
        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        /**
         * The GUID of the parent media item.
         */
        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        /**
         * The GUID of the parent media item.
         */
        public Builder parentGuid(Optional<String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }

        /**
         * The index position of the parent media item.
         */
        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        /**
         * The index position of the parent media item.
         */
        public Builder parentIndex(Optional<Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        /**
         * The key of the parent media item.
         */
        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        /**
         * The key of the parent media item.
         */
        public Builder parentKey(Optional<String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        /**
         * The rating key of the parent media item.
         */
        public Builder parentRatingKey(String parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        /**
         * The rating key of the parent media item.
         */
        public Builder parentRatingKey(Optional<String> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }

        /**
         * The slug for the parent media item.
         */
        public Builder parentSlug(String parentSlug) {
            Utils.checkNotNull(parentSlug, "parentSlug");
            this.parentSlug = Optional.ofNullable(parentSlug);
            return this;
        }

        /**
         * The slug for the parent media item.
         */
        public Builder parentSlug(Optional<String> parentSlug) {
            Utils.checkNotNull(parentSlug, "parentSlug");
            this.parentSlug = parentSlug;
            return this;
        }

        /**
         * The studio of the parent media item.
         */
        public Builder parentStudio(String parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = parentStudio;
            return this;
        }

        /**
         * The theme URL for the parent media item.
         */
        public Builder parentTheme(String parentTheme) {
            Utils.checkNotNull(parentTheme, "parentTheme");
            this.parentTheme = parentTheme;
            return this;
        }

        /**
         * The thumbnail URL for the parent media item.
         */
        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        /**
         * The thumbnail URL for the parent media item.
         */
        public Builder parentThumb(Optional<String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        /**
         * The title of the parent media item.
         */
        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        /**
         * The title of the parent media item.
         */
        public Builder parentTitle(Optional<String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }

        /**
         * The release year of the parent media item.
         */
        public Builder parentYear(int parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = Optional.ofNullable(parentYear);
            return this;
        }

        /**
         * The release year of the parent media item.
         */
        public Builder parentYear(Optional<Integer> parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = parentYear;
            return this;
        }

        /**
         * The primary extra key associated with this media item.
         */
        public Builder primaryExtraKey(String primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
            return this;
        }

        /**
         * The primary extra key associated with this media item.
         */
        public Builder primaryExtraKey(Optional<String> primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = primaryExtraKey;
            return this;
        }

        /**
         * The URL for the rating image.
         */
        public Builder ratingImage(String ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = Optional.ofNullable(ratingImage);
            return this;
        }

        /**
         * The URL for the rating image.
         */
        public Builder ratingImage(Optional<String> ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = ratingImage;
            return this;
        }

        /**
         * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
         */
        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        /**
         * The critic rating for the media item.
         */
        public Builder rating(float rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        /**
         * The total number of seasons (for TV shows).
         */
        public Builder seasonCount(int seasonCount) {
            Utils.checkNotNull(seasonCount, "seasonCount");
            this.seasonCount = seasonCount;
            return this;
        }

        /**
         * The number of times this media item has been skipped.
         */
        public Builder skipCount(int skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = Optional.ofNullable(skipCount);
            return this;
        }

        /**
         * The number of times this media item has been skipped.
         */
        public Builder skipCount(Optional<Integer> skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = skipCount;
            return this;
        }

        /**
         * A URL‚Äêfriendly version of the media title.
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * The studio that produced the media item.
         */
        public Builder studio(String studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = Optional.ofNullable(studio);
            return this;
        }

        /**
         * The studio that produced the media item.
         */
        public Builder studio(Optional<String> studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = studio;
            return this;
        }

        /**
         * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
         */
        public Builder subtype(String subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = Optional.ofNullable(subtype);
            return this;
        }

        /**
         * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
         */
        public Builder subtype(Optional<String> subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = subtype;
            return this;
        }

        /**
         * A synopsis of the media item.
         */
        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        /**
         * A brief tagline for the media item.
         */
        public Builder tagline(String tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = tagline;
            return this;
        }

        /**
         * The theme URL for the media item.
         */
        public Builder theme(String theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = theme;
            return this;
        }

        /**
         * The thumbnail image URL for the media item.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        /**
         * The sort title used for ordering media items.
         */
        public Builder titleSort(String titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = titleSort;
            return this;
        }

        /**
         * The title of the media item.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder type(GetRecentlyAddedHubsType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Unix epoch datetime in seconds
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix epoch datetime in seconds
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * The rating provided by a user for the item. This value is expressed as a decimal number.
         */
        public Builder userRating(float userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = Optional.ofNullable(userRating);
            return this;
        }

        /**
         * The rating provided by a user for the item. This value is expressed as a decimal number.
         */
        public Builder userRating(Optional<Float> userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = userRating;
            return this;
        }

        /**
         * The number of times this media item has been viewed.
         */
        public Builder viewCount(int viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        /**
         * The number of times this media item has been viewed.
         */
        public Builder viewCount(Optional<Integer> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        /**
         * The current playback offset (in milliseconds).
         */
        public Builder viewOffset(int viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = Optional.ofNullable(viewOffset);
            return this;
        }

        /**
         * The current playback offset (in milliseconds).
         */
        public Builder viewOffset(Optional<Integer> viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = viewOffset;
            return this;
        }

        /**
         * The number of leaf items that have been viewed.
         */
        public Builder viewedLeafCount(int viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
            return this;
        }

        /**
         * The number of leaf items that have been viewed.
         */
        public Builder viewedLeafCount(Optional<Integer> viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = viewedLeafCount;
            return this;
        }

        /**
         * The release year of the media item.
         */
        public Builder year(int year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        /**
         * The release year of the media item.
         */
        public Builder year(Optional<Integer> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        public Builder image(List<GetRecentlyAddedImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends List<GetRecentlyAddedImage>> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        public Builder ultraBlurColors(UltraBlurColors ultraBlurColors) {
            Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
            this.ultraBlurColors = Optional.ofNullable(ultraBlurColors);
            return this;
        }

        public Builder ultraBlurColors(Optional<? extends UltraBlurColors> ultraBlurColors) {
            Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
            this.ultraBlurColors = ultraBlurColors;
            return this;
        }

        public Builder media(List<Media> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends List<Media>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }

        public Builder genre(List<Genre> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = Optional.ofNullable(genre);
            return this;
        }

        public Builder genre(Optional<? extends List<Genre>> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = genre;
            return this;
        }

        public Builder country(List<Country> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends List<Country>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder director(List<Director> director) {
            Utils.checkNotNull(director, "director");
            this.director = Optional.ofNullable(director);
            return this;
        }

        public Builder director(Optional<? extends List<Director>> director) {
            Utils.checkNotNull(director, "director");
            this.director = director;
            return this;
        }

        public Builder writer(List<Writer> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = Optional.ofNullable(writer);
            return this;
        }

        public Builder writer(Optional<? extends List<Writer>> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = writer;
            return this;
        }

        public Builder role(List<Role> role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<? extends List<Role>> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder producer(List<Producer> producer) {
            Utils.checkNotNull(producer, "producer");
            this.producer = Optional.ofNullable(producer);
            return this;
        }

        public Builder producer(Optional<? extends List<Producer>> producer) {
            Utils.checkNotNull(producer, "producer");
            this.producer = producer;
            return this;
        }

        public Builder rating1(List<Rating> rating1) {
            Utils.checkNotNull(rating1, "rating1");
            this.rating1 = Optional.ofNullable(rating1);
            return this;
        }

        public Builder rating1(Optional<? extends List<Rating>> rating1) {
            Utils.checkNotNull(rating1, "rating1");
            this.rating1 = rating1;
            return this;
        }

        public Builder similar(List<Similar> similar) {
            Utils.checkNotNull(similar, "similar");
            this.similar = Optional.ofNullable(similar);
            return this;
        }

        public Builder similar(Optional<? extends List<Similar>> similar) {
            Utils.checkNotNull(similar, "similar");
            this.similar = similar;
            return this;
        }

        public Builder location(List<Location> location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<? extends List<Location>> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder guids(List<Guids> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = Optional.ofNullable(guids);
            return this;
        }

        public Builder guids(Optional<? extends List<Guids>> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = guids;
            return this;
        }

        public Builder collection(List<Collection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends List<Collection>> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }
        
        public GetRecentlyAddedMetadata build() {
            return new GetRecentlyAddedMetadata(
                addedAt,
                art,
                audienceRatingImage,
                audienceRating,
                chapterSource,
                childCount,
                contentRating,
                createdAtAccuracy,
                createdAtTZOffset,
                duration,
                grandparentArt,
                grandparentGuid,
                grandparentKey,
                grandparentRatingKey,
                grandparentSlug,
                grandparentTheme,
                grandparentThumb,
                grandparentTitle,
                guid,
                index,
                key,
                lastRatedAt,
                lastViewedAt,
                leafCount,
                librarySectionID,
                librarySectionKey,
                librarySectionTitle,
                originalTitle,
                originallyAvailableAt,
                parentGuid,
                parentIndex,
                parentKey,
                parentRatingKey,
                parentSlug,
                parentStudio,
                parentTheme,
                parentThumb,
                parentTitle,
                parentYear,
                primaryExtraKey,
                ratingImage,
                ratingKey,
                rating,
                seasonCount,
                skipCount,
                slug,
                studio,
                subtype,
                summary,
                tagline,
                theme,
                thumb,
                titleSort,
                title,
                type,
                updatedAt,
                userRating,
                viewCount,
                viewOffset,
                viewedLeafCount,
                year,
                image,
                ultraBlurColors,
                media,
                genre,
                country,
                director,
                writer,
                role,
                producer,
                rating1,
                similar,
                location,
                guids,
                collection);
        }
    }
}

