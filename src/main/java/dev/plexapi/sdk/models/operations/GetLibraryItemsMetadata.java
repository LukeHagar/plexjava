/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Float;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

/**
 * GetLibraryItemsMetadata
 * 
 * <p>Unknown
 */
public class GetLibraryItemsMetadata {
    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    @JsonProperty("ratingKey")
    private String ratingKey;

    /**
     * The unique key for the media item.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The globally unique identifier for the media item.
     */
    @JsonProperty("guid")
    private String guid;

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    @JsonProperty("slug")
    private String slug;

    /**
     * The studio that produced the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("studio")
    private Optional<String> studio;


    @JsonProperty("type")
    private GetLibraryItemsType type;

    /**
     * The title of the media item.
     */
    @JsonProperty("title")
    private String title;

    /**
     * The banner image URL for the media item.
     */
    @JsonProperty("banner")
    private String banner;

    /**
     * The sort title used for ordering media items.
     */
    @JsonProperty("titleSort")
    private String titleSort;

    /**
     * The content rating for the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<String> contentRating;

    /**
     * A synopsis of the media item.
     */
    @JsonProperty("summary")
    private String summary;

    /**
     * The critic rating for the media item.
     */
    @JsonProperty("rating")
    private float rating;

    /**
     * The audience rating for the media item.
     */
    @JsonProperty("audienceRating")
    private double audienceRating;

    /**
     * The release year of the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<Integer> year;

    /**
     * A brief tagline for the media item.
     */
    @JsonProperty("tagline")
    private String tagline;

    /**
     * The thumbnail image URL for the media item.
     */
    @JsonProperty("thumb")
    private String thumb;

    /**
     * The art image URL for the media item.
     */
    @JsonProperty("art")
    private String art;

    /**
     * The theme URL for the media item.
     */
    @JsonProperty("theme")
    private String theme;

    /**
     * The index position of the media item.
     */
    @JsonProperty("index")
    private int index;

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<Integer> leafCount;

    /**
     * The number of leaf items that have been viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedLeafCount")
    private Optional<Integer> viewedLeafCount;

    /**
     * The number of child items associated with this media item.
     */
    @JsonProperty("childCount")
    private int childCount;

    /**
     * The total number of seasons (for TV shows).
     */
    @JsonProperty("seasonCount")
    private int seasonCount;

    /**
     * The duration of the media item in milliseconds.
     */
    @JsonProperty("duration")
    private int duration;

    /**
     * The original release date of the media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<LocalDate> originallyAvailableAt;


    @JsonProperty("addedAt")
    private long addedAt;

    /**
     * Unix epoch datetime in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<Long> updatedAt;

    /**
     * The URL for the audience rating image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRatingImage")
    private Optional<String> audienceRatingImage;

    /**
     * The source from which chapter data is derived.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapterSource")
    private Optional<String> chapterSource;

    /**
     * The primary extra key associated with this media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryExtraKey")
    private Optional<String> primaryExtraKey;

    /**
     * The original title of the media item (if different).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalTitle")
    private Optional<String> originalTitle;

    /**
     * The rating key of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<String> parentRatingKey;

    /**
     * The rating key of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentRatingKey")
    private Optional<String> grandparentRatingKey;

    /**
     * The GUID of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<String> parentGuid;

    /**
     * The GUID of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentGuid")
    private Optional<String> grandparentGuid;

    /**
     * The slug for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentSlug")
    private Optional<String> grandparentSlug;

    /**
     * The key of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<String> grandparentKey;

    /**
     * The key of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<String> parentKey;

    /**
     * The title of the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<String> grandparentTitle;

    /**
     * The thumbnail URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<String> grandparentThumb;

    /**
     * The theme URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTheme")
    private Optional<String> grandparentTheme;

    /**
     * The art URL for the grandparent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<String> grandparentArt;

    /**
     * The title of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<String> parentTitle;

    /**
     * The index position of the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<Integer> parentIndex;

    /**
     * The thumbnail URL for the parent media item.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<String> parentThumb;

    /**
     * The URL for the rating image.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingImage")
    private Optional<String> ratingImage;

    /**
     * The number of times this media item has been viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<Integer> viewCount;

    /**
     * The current playback offset (in milliseconds).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewOffset")
    private Optional<Integer> viewOffset;

    /**
     * The number of times this media item has been skipped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipCount")
    private Optional<Integer> skipCount;

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    private Optional<String> subtype;

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRatedAt")
    private Optional<Long> lastRatedAt;

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAtAccuracy")
    private Optional<String> createdAtAccuracy;

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAtTZOffset")
    private Optional<String> createdAtTZOffset;

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedAt")
    private Optional<Integer> lastViewedAt;

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userRating")
    private Optional<Float> userRating;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    private Optional<? extends List<GetLibraryItemsImage>> image;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("UltraBlurColors")
    private Optional<? extends GetLibraryItemsUltraBlurColors> ultraBlurColors;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Guid")
    private Optional<? extends List<GetLibraryItemsGuids>> guids;

    /**
     * The identifier for the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<Long> librarySectionID;

    /**
     * The title of the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionTitle")
    private Optional<String> librarySectionTitle;

    /**
     * The key corresponding to the library section.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionKey")
    private Optional<String> librarySectionKey;

    /**
     * Setting that indicates the episode ordering for the show.
     * Options:
     *   - None = Library default
     *   - tmdbAiring = The Movie Database (Aired)
     *   - aired = TheTVDB (Aired)
     *   - dvd = TheTVDB (DVD)
     *   - absolute = TheTVDB (Absolute)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("showOrdering")
    private Optional<? extends ShowOrdering> showOrdering;

    /**
     * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("flattenSeasons")
    private Optional<? extends FlattenSeasons> flattenSeasons;

    /**
     * Indicates whether child items should be skipped.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipChildren")
    private Optional<Boolean> skipChildren;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    private Optional<? extends List<GetLibraryItemsMedia>> media;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Genre")
    private Optional<? extends List<GetLibraryItemsGenre>> genre;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    private Optional<? extends List<GetLibraryItemsCountry>> country;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Director")
    private Optional<? extends List<GetLibraryItemsDirector>> director;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Writer")
    private Optional<? extends List<GetLibraryItemsWriter>> writer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Producer")
    private Optional<? extends List<GetLibraryItemsProducer>> producer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Collection")
    private Optional<? extends List<GetLibraryItemsCollection>> collection;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Role")
    private Optional<? extends List<GetLibraryItemsRole>> role;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Rating")
    private Optional<? extends List<Ratings>> ratings;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Similar")
    private Optional<? extends List<GetLibraryItemsSimilar>> similar;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Location")
    private Optional<? extends List<GetLibraryItemsLocation>> location;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Chapter")
    private Optional<? extends List<Chapter>> chapter;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Marker")
    private Optional<? extends List<Marker>> marker;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Extras")
    private Optional<? extends Extras> extras;

    @JsonCreator
    public GetLibraryItemsMetadata(
            @JsonProperty("ratingKey") String ratingKey,
            @JsonProperty("key") String key,
            @JsonProperty("guid") String guid,
            @JsonProperty("slug") String slug,
            @JsonProperty("studio") Optional<String> studio,
            @JsonProperty("type") GetLibraryItemsType type,
            @JsonProperty("title") String title,
            @JsonProperty("banner") String banner,
            @JsonProperty("titleSort") String titleSort,
            @JsonProperty("contentRating") Optional<String> contentRating,
            @JsonProperty("summary") String summary,
            @JsonProperty("rating") float rating,
            @JsonProperty("audienceRating") double audienceRating,
            @JsonProperty("year") Optional<Integer> year,
            @JsonProperty("tagline") String tagline,
            @JsonProperty("thumb") String thumb,
            @JsonProperty("art") String art,
            @JsonProperty("theme") String theme,
            @JsonProperty("index") int index,
            @JsonProperty("leafCount") Optional<Integer> leafCount,
            @JsonProperty("viewedLeafCount") Optional<Integer> viewedLeafCount,
            @JsonProperty("childCount") int childCount,
            @JsonProperty("seasonCount") int seasonCount,
            @JsonProperty("duration") int duration,
            @JsonProperty("originallyAvailableAt") Optional<LocalDate> originallyAvailableAt,
            @JsonProperty("addedAt") long addedAt,
            @JsonProperty("updatedAt") Optional<Long> updatedAt,
            @JsonProperty("audienceRatingImage") Optional<String> audienceRatingImage,
            @JsonProperty("chapterSource") Optional<String> chapterSource,
            @JsonProperty("primaryExtraKey") Optional<String> primaryExtraKey,
            @JsonProperty("originalTitle") Optional<String> originalTitle,
            @JsonProperty("parentRatingKey") Optional<String> parentRatingKey,
            @JsonProperty("grandparentRatingKey") Optional<String> grandparentRatingKey,
            @JsonProperty("parentGuid") Optional<String> parentGuid,
            @JsonProperty("grandparentGuid") Optional<String> grandparentGuid,
            @JsonProperty("grandparentSlug") Optional<String> grandparentSlug,
            @JsonProperty("grandparentKey") Optional<String> grandparentKey,
            @JsonProperty("parentKey") Optional<String> parentKey,
            @JsonProperty("grandparentTitle") Optional<String> grandparentTitle,
            @JsonProperty("grandparentThumb") Optional<String> grandparentThumb,
            @JsonProperty("grandparentTheme") Optional<String> grandparentTheme,
            @JsonProperty("grandparentArt") Optional<String> grandparentArt,
            @JsonProperty("parentTitle") Optional<String> parentTitle,
            @JsonProperty("parentIndex") Optional<Integer> parentIndex,
            @JsonProperty("parentThumb") Optional<String> parentThumb,
            @JsonProperty("ratingImage") Optional<String> ratingImage,
            @JsonProperty("viewCount") Optional<Integer> viewCount,
            @JsonProperty("viewOffset") Optional<Integer> viewOffset,
            @JsonProperty("skipCount") Optional<Integer> skipCount,
            @JsonProperty("subtype") Optional<String> subtype,
            @JsonProperty("lastRatedAt") Optional<Long> lastRatedAt,
            @JsonProperty("createdAtAccuracy") Optional<String> createdAtAccuracy,
            @JsonProperty("createdAtTZOffset") Optional<String> createdAtTZOffset,
            @JsonProperty("lastViewedAt") Optional<Integer> lastViewedAt,
            @JsonProperty("userRating") Optional<Float> userRating,
            @JsonProperty("Image") Optional<? extends List<GetLibraryItemsImage>> image,
            @JsonProperty("UltraBlurColors") Optional<? extends GetLibraryItemsUltraBlurColors> ultraBlurColors,
            @JsonProperty("Guid") Optional<? extends List<GetLibraryItemsGuids>> guids,
            @JsonProperty("librarySectionID") Optional<Long> librarySectionID,
            @JsonProperty("librarySectionTitle") Optional<String> librarySectionTitle,
            @JsonProperty("librarySectionKey") Optional<String> librarySectionKey,
            @JsonProperty("showOrdering") Optional<? extends ShowOrdering> showOrdering,
            @JsonProperty("flattenSeasons") Optional<? extends FlattenSeasons> flattenSeasons,
            @JsonProperty("skipChildren") Optional<Boolean> skipChildren,
            @JsonProperty("Media") Optional<? extends List<GetLibraryItemsMedia>> media,
            @JsonProperty("Genre") Optional<? extends List<GetLibraryItemsGenre>> genre,
            @JsonProperty("Country") Optional<? extends List<GetLibraryItemsCountry>> country,
            @JsonProperty("Director") Optional<? extends List<GetLibraryItemsDirector>> director,
            @JsonProperty("Writer") Optional<? extends List<GetLibraryItemsWriter>> writer,
            @JsonProperty("Producer") Optional<? extends List<GetLibraryItemsProducer>> producer,
            @JsonProperty("Collection") Optional<? extends List<GetLibraryItemsCollection>> collection,
            @JsonProperty("Role") Optional<? extends List<GetLibraryItemsRole>> role,
            @JsonProperty("Rating") Optional<? extends List<Ratings>> ratings,
            @JsonProperty("Similar") Optional<? extends List<GetLibraryItemsSimilar>> similar,
            @JsonProperty("Location") Optional<? extends List<GetLibraryItemsLocation>> location,
            @JsonProperty("Chapter") Optional<? extends List<Chapter>> chapter,
            @JsonProperty("Marker") Optional<? extends List<Marker>> marker,
            @JsonProperty("Extras") Optional<? extends Extras> extras) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(studio, "studio");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(banner, "banner");
        Utils.checkNotNull(titleSort, "titleSort");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(audienceRating, "audienceRating");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(tagline, "tagline");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(theme, "theme");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(seasonCount, "seasonCount");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        Utils.checkNotNull(chapterSource, "chapterSource");
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        Utils.checkNotNull(originalTitle, "originalTitle");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(ratingImage, "ratingImage");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(viewOffset, "viewOffset");
        Utils.checkNotNull(skipCount, "skipCount");
        Utils.checkNotNull(subtype, "subtype");
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        Utils.checkNotNull(userRating, "userRating");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        Utils.checkNotNull(guids, "guids");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(showOrdering, "showOrdering");
        Utils.checkNotNull(flattenSeasons, "flattenSeasons");
        Utils.checkNotNull(skipChildren, "skipChildren");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(genre, "genre");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(director, "director");
        Utils.checkNotNull(writer, "writer");
        Utils.checkNotNull(producer, "producer");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(ratings, "ratings");
        Utils.checkNotNull(similar, "similar");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(chapter, "chapter");
        Utils.checkNotNull(marker, "marker");
        Utils.checkNotNull(extras, "extras");
        this.ratingKey = ratingKey;
        this.key = key;
        this.guid = guid;
        this.slug = slug;
        this.studio = studio;
        this.type = type;
        this.title = title;
        this.banner = banner;
        this.titleSort = titleSort;
        this.contentRating = contentRating;
        this.summary = summary;
        this.rating = rating;
        this.audienceRating = audienceRating;
        this.year = year;
        this.tagline = tagline;
        this.thumb = thumb;
        this.art = art;
        this.theme = theme;
        this.index = index;
        this.leafCount = leafCount;
        this.viewedLeafCount = viewedLeafCount;
        this.childCount = childCount;
        this.seasonCount = seasonCount;
        this.duration = duration;
        this.originallyAvailableAt = originallyAvailableAt;
        this.addedAt = addedAt;
        this.updatedAt = updatedAt;
        this.audienceRatingImage = audienceRatingImage;
        this.chapterSource = chapterSource;
        this.primaryExtraKey = primaryExtraKey;
        this.originalTitle = originalTitle;
        this.parentRatingKey = parentRatingKey;
        this.grandparentRatingKey = grandparentRatingKey;
        this.parentGuid = parentGuid;
        this.grandparentGuid = grandparentGuid;
        this.grandparentSlug = grandparentSlug;
        this.grandparentKey = grandparentKey;
        this.parentKey = parentKey;
        this.grandparentTitle = grandparentTitle;
        this.grandparentThumb = grandparentThumb;
        this.grandparentTheme = grandparentTheme;
        this.grandparentArt = grandparentArt;
        this.parentTitle = parentTitle;
        this.parentIndex = parentIndex;
        this.parentThumb = parentThumb;
        this.ratingImage = ratingImage;
        this.viewCount = viewCount;
        this.viewOffset = viewOffset;
        this.skipCount = skipCount;
        this.subtype = subtype;
        this.lastRatedAt = lastRatedAt;
        this.createdAtAccuracy = createdAtAccuracy;
        this.createdAtTZOffset = createdAtTZOffset;
        this.lastViewedAt = lastViewedAt;
        this.userRating = userRating;
        this.image = image;
        this.ultraBlurColors = ultraBlurColors;
        this.guids = guids;
        this.librarySectionID = librarySectionID;
        this.librarySectionTitle = librarySectionTitle;
        this.librarySectionKey = librarySectionKey;
        this.showOrdering = showOrdering;
        this.flattenSeasons = flattenSeasons;
        this.skipChildren = skipChildren;
        this.media = media;
        this.genre = genre;
        this.country = country;
        this.director = director;
        this.writer = writer;
        this.producer = producer;
        this.collection = collection;
        this.role = role;
        this.ratings = ratings;
        this.similar = similar;
        this.location = location;
        this.chapter = chapter;
        this.marker = marker;
        this.extras = extras;
    }
    
    public GetLibraryItemsMetadata(
            String ratingKey,
            String key,
            String guid,
            String slug,
            GetLibraryItemsType type,
            String title,
            String banner,
            String titleSort,
            String summary,
            float rating,
            double audienceRating,
            String tagline,
            String thumb,
            String art,
            String theme,
            int index,
            int childCount,
            int seasonCount,
            int duration,
            long addedAt) {
        this(ratingKey, key, guid,
            slug, Optional.empty(), type,
            title, banner, titleSort,
            Optional.empty(), summary, rating,
            audienceRating, Optional.empty(), tagline,
            thumb, art, theme,
            index, Optional.empty(), Optional.empty(),
            childCount, seasonCount, duration,
            Optional.empty(), addedAt, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    @JsonIgnore
    public String ratingKey() {
        return ratingKey;
    }

    /**
     * The unique key for the media item.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The globally unique identifier for the media item.
     */
    @JsonIgnore
    public String guid() {
        return guid;
    }

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    @JsonIgnore
    public String slug() {
        return slug;
    }

    /**
     * The studio that produced the media item.
     */
    @JsonIgnore
    public Optional<String> studio() {
        return studio;
    }

    @JsonIgnore
    public GetLibraryItemsType type() {
        return type;
    }

    /**
     * The title of the media item.
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    /**
     * The banner image URL for the media item.
     */
    @JsonIgnore
    public String banner() {
        return banner;
    }

    /**
     * The sort title used for ordering media items.
     */
    @JsonIgnore
    public String titleSort() {
        return titleSort;
    }

    /**
     * The content rating for the media item.
     */
    @JsonIgnore
    public Optional<String> contentRating() {
        return contentRating;
    }

    /**
     * A synopsis of the media item.
     */
    @JsonIgnore
    public String summary() {
        return summary;
    }

    /**
     * The critic rating for the media item.
     */
    @JsonIgnore
    public float rating() {
        return rating;
    }

    /**
     * The audience rating for the media item.
     */
    @JsonIgnore
    public double audienceRating() {
        return audienceRating;
    }

    /**
     * The release year of the media item.
     */
    @JsonIgnore
    public Optional<Integer> year() {
        return year;
    }

    /**
     * A brief tagline for the media item.
     */
    @JsonIgnore
    public String tagline() {
        return tagline;
    }

    /**
     * The thumbnail image URL for the media item.
     */
    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    /**
     * The art image URL for the media item.
     */
    @JsonIgnore
    public String art() {
        return art;
    }

    /**
     * The theme URL for the media item.
     */
    @JsonIgnore
    public String theme() {
        return theme;
    }

    /**
     * The index position of the media item.
     */
    @JsonIgnore
    public int index() {
        return index;
    }

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    @JsonIgnore
    public Optional<Integer> leafCount() {
        return leafCount;
    }

    /**
     * The number of leaf items that have been viewed.
     */
    @JsonIgnore
    public Optional<Integer> viewedLeafCount() {
        return viewedLeafCount;
    }

    /**
     * The number of child items associated with this media item.
     */
    @JsonIgnore
    public int childCount() {
        return childCount;
    }

    /**
     * The total number of seasons (for TV shows).
     */
    @JsonIgnore
    public int seasonCount() {
        return seasonCount;
    }

    /**
     * The duration of the media item in milliseconds.
     */
    @JsonIgnore
    public int duration() {
        return duration;
    }

    /**
     * The original release date of the media item.
     */
    @JsonIgnore
    public Optional<LocalDate> originallyAvailableAt() {
        return originallyAvailableAt;
    }

    @JsonIgnore
    public long addedAt() {
        return addedAt;
    }

    /**
     * Unix epoch datetime in seconds
     */
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return updatedAt;
    }

    /**
     * The URL for the audience rating image.
     */
    @JsonIgnore
    public Optional<String> audienceRatingImage() {
        return audienceRatingImage;
    }

    /**
     * The source from which chapter data is derived.
     */
    @JsonIgnore
    public Optional<String> chapterSource() {
        return chapterSource;
    }

    /**
     * The primary extra key associated with this media item.
     */
    @JsonIgnore
    public Optional<String> primaryExtraKey() {
        return primaryExtraKey;
    }

    /**
     * The original title of the media item (if different).
     */
    @JsonIgnore
    public Optional<String> originalTitle() {
        return originalTitle;
    }

    /**
     * The rating key of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentRatingKey() {
        return parentRatingKey;
    }

    /**
     * The rating key of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentRatingKey() {
        return grandparentRatingKey;
    }

    /**
     * The GUID of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentGuid() {
        return parentGuid;
    }

    /**
     * The GUID of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentGuid() {
        return grandparentGuid;
    }

    /**
     * The slug for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentSlug() {
        return grandparentSlug;
    }

    /**
     * The key of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentKey() {
        return grandparentKey;
    }

    /**
     * The key of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentKey() {
        return parentKey;
    }

    /**
     * The title of the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentTitle() {
        return grandparentTitle;
    }

    /**
     * The thumbnail URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentThumb() {
        return grandparentThumb;
    }

    /**
     * The theme URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentTheme() {
        return grandparentTheme;
    }

    /**
     * The art URL for the grandparent media item.
     */
    @JsonIgnore
    public Optional<String> grandparentArt() {
        return grandparentArt;
    }

    /**
     * The title of the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentTitle() {
        return parentTitle;
    }

    /**
     * The index position of the parent media item.
     */
    @JsonIgnore
    public Optional<Integer> parentIndex() {
        return parentIndex;
    }

    /**
     * The thumbnail URL for the parent media item.
     */
    @JsonIgnore
    public Optional<String> parentThumb() {
        return parentThumb;
    }

    /**
     * The URL for the rating image.
     */
    @JsonIgnore
    public Optional<String> ratingImage() {
        return ratingImage;
    }

    /**
     * The number of times this media item has been viewed.
     */
    @JsonIgnore
    public Optional<Integer> viewCount() {
        return viewCount;
    }

    /**
     * The current playback offset (in milliseconds).
     */
    @JsonIgnore
    public Optional<Integer> viewOffset() {
        return viewOffset;
    }

    /**
     * The number of times this media item has been skipped.
     */
    @JsonIgnore
    public Optional<Integer> skipCount() {
        return skipCount;
    }

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    @JsonIgnore
    public Optional<String> subtype() {
        return subtype;
    }

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    @JsonIgnore
    public Optional<Long> lastRatedAt() {
        return lastRatedAt;
    }

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    @JsonIgnore
    public Optional<String> createdAtAccuracy() {
        return createdAtAccuracy;
    }

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    @JsonIgnore
    public Optional<String> createdAtTZOffset() {
        return createdAtTZOffset;
    }

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    @JsonIgnore
    public Optional<Integer> lastViewedAt() {
        return lastViewedAt;
    }

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    @JsonIgnore
    public Optional<Float> userRating() {
        return userRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsImage>> image() {
        return (Optional<List<GetLibraryItemsImage>>) image;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetLibraryItemsUltraBlurColors> ultraBlurColors() {
        return (Optional<GetLibraryItemsUltraBlurColors>) ultraBlurColors;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsGuids>> guids() {
        return (Optional<List<GetLibraryItemsGuids>>) guids;
    }

    /**
     * The identifier for the library section.
     */
    @JsonIgnore
    public Optional<Long> librarySectionID() {
        return librarySectionID;
    }

    /**
     * The title of the library section.
     */
    @JsonIgnore
    public Optional<String> librarySectionTitle() {
        return librarySectionTitle;
    }

    /**
     * The key corresponding to the library section.
     */
    @JsonIgnore
    public Optional<String> librarySectionKey() {
        return librarySectionKey;
    }

    /**
     * Setting that indicates the episode ordering for the show.
     * Options:
     *   - None = Library default
     *   - tmdbAiring = The Movie Database (Aired)
     *   - aired = TheTVDB (Aired)
     *   - dvd = TheTVDB (DVD)
     *   - absolute = TheTVDB (Absolute)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ShowOrdering> showOrdering() {
        return (Optional<ShowOrdering>) showOrdering;
    }

    /**
     * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FlattenSeasons> flattenSeasons() {
        return (Optional<FlattenSeasons>) flattenSeasons;
    }

    /**
     * Indicates whether child items should be skipped.
     */
    @JsonIgnore
    public Optional<Boolean> skipChildren() {
        return skipChildren;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsMedia>> media() {
        return (Optional<List<GetLibraryItemsMedia>>) media;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsGenre>> genre() {
        return (Optional<List<GetLibraryItemsGenre>>) genre;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsCountry>> country() {
        return (Optional<List<GetLibraryItemsCountry>>) country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsDirector>> director() {
        return (Optional<List<GetLibraryItemsDirector>>) director;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsWriter>> writer() {
        return (Optional<List<GetLibraryItemsWriter>>) writer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsProducer>> producer() {
        return (Optional<List<GetLibraryItemsProducer>>) producer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsCollection>> collection() {
        return (Optional<List<GetLibraryItemsCollection>>) collection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsRole>> role() {
        return (Optional<List<GetLibraryItemsRole>>) role;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Ratings>> ratings() {
        return (Optional<List<Ratings>>) ratings;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsSimilar>> similar() {
        return (Optional<List<GetLibraryItemsSimilar>>) similar;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetLibraryItemsLocation>> location() {
        return (Optional<List<GetLibraryItemsLocation>>) location;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Chapter>> chapter() {
        return (Optional<List<Chapter>>) chapter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Marker>> marker() {
        return (Optional<List<Marker>>) marker;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Extras> extras() {
        return (Optional<Extras>) extras;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
     */
    public GetLibraryItemsMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    /**
     * The unique key for the media item.
     */
    public GetLibraryItemsMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The globally unique identifier for the media item.
     */
    public GetLibraryItemsMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    /**
     * A URL‚Äêfriendly version of the media title.
     */
    public GetLibraryItemsMetadata withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The studio that produced the media item.
     */
    public GetLibraryItemsMetadata withStudio(String studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = Optional.ofNullable(studio);
        return this;
    }


    /**
     * The studio that produced the media item.
     */
    public GetLibraryItemsMetadata withStudio(Optional<String> studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = studio;
        return this;
    }

    public GetLibraryItemsMetadata withType(GetLibraryItemsType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The title of the media item.
     */
    public GetLibraryItemsMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The banner image URL for the media item.
     */
    public GetLibraryItemsMetadata withBanner(String banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = banner;
        return this;
    }

    /**
     * The sort title used for ordering media items.
     */
    public GetLibraryItemsMetadata withTitleSort(String titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = titleSort;
        return this;
    }

    /**
     * The content rating for the media item.
     */
    public GetLibraryItemsMetadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }


    /**
     * The content rating for the media item.
     */
    public GetLibraryItemsMetadata withContentRating(Optional<String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    /**
     * A synopsis of the media item.
     */
    public GetLibraryItemsMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * The critic rating for the media item.
     */
    public GetLibraryItemsMetadata withRating(float rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    /**
     * The audience rating for the media item.
     */
    public GetLibraryItemsMetadata withAudienceRating(double audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = audienceRating;
        return this;
    }

    /**
     * The release year of the media item.
     */
    public GetLibraryItemsMetadata withYear(int year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }


    /**
     * The release year of the media item.
     */
    public GetLibraryItemsMetadata withYear(Optional<Integer> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    /**
     * A brief tagline for the media item.
     */
    public GetLibraryItemsMetadata withTagline(String tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = tagline;
        return this;
    }

    /**
     * The thumbnail image URL for the media item.
     */
    public GetLibraryItemsMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    /**
     * The art image URL for the media item.
     */
    public GetLibraryItemsMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    /**
     * The theme URL for the media item.
     */
    public GetLibraryItemsMetadata withTheme(String theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = theme;
        return this;
    }

    /**
     * The index position of the media item.
     */
    public GetLibraryItemsMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * The number of leaf items (end nodes) under this media item.
     */
    public GetLibraryItemsMetadata withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }


    /**
     * The number of leaf items (end nodes) under this media item.
     */
    public GetLibraryItemsMetadata withLeafCount(Optional<Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    /**
     * The number of leaf items that have been viewed.
     */
    public GetLibraryItemsMetadata withViewedLeafCount(int viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
        return this;
    }


    /**
     * The number of leaf items that have been viewed.
     */
    public GetLibraryItemsMetadata withViewedLeafCount(Optional<Integer> viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = viewedLeafCount;
        return this;
    }

    /**
     * The number of child items associated with this media item.
     */
    public GetLibraryItemsMetadata withChildCount(int childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    /**
     * The total number of seasons (for TV shows).
     */
    public GetLibraryItemsMetadata withSeasonCount(int seasonCount) {
        Utils.checkNotNull(seasonCount, "seasonCount");
        this.seasonCount = seasonCount;
        return this;
    }

    /**
     * The duration of the media item in milliseconds.
     */
    public GetLibraryItemsMetadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    /**
     * The original release date of the media item.
     */
    public GetLibraryItemsMetadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }


    /**
     * The original release date of the media item.
     */
    public GetLibraryItemsMetadata withOriginallyAvailableAt(Optional<LocalDate> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public GetLibraryItemsMetadata withAddedAt(long addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    /**
     * Unix epoch datetime in seconds
     */
    public GetLibraryItemsMetadata withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    /**
     * Unix epoch datetime in seconds
     */
    public GetLibraryItemsMetadata withUpdatedAt(Optional<Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * The URL for the audience rating image.
     */
    public GetLibraryItemsMetadata withAudienceRatingImage(String audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
        return this;
    }


    /**
     * The URL for the audience rating image.
     */
    public GetLibraryItemsMetadata withAudienceRatingImage(Optional<String> audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = audienceRatingImage;
        return this;
    }

    /**
     * The source from which chapter data is derived.
     */
    public GetLibraryItemsMetadata withChapterSource(String chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = Optional.ofNullable(chapterSource);
        return this;
    }


    /**
     * The source from which chapter data is derived.
     */
    public GetLibraryItemsMetadata withChapterSource(Optional<String> chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = chapterSource;
        return this;
    }

    /**
     * The primary extra key associated with this media item.
     */
    public GetLibraryItemsMetadata withPrimaryExtraKey(String primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
        return this;
    }


    /**
     * The primary extra key associated with this media item.
     */
    public GetLibraryItemsMetadata withPrimaryExtraKey(Optional<String> primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = primaryExtraKey;
        return this;
    }

    /**
     * The original title of the media item (if different).
     */
    public GetLibraryItemsMetadata withOriginalTitle(String originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = Optional.ofNullable(originalTitle);
        return this;
    }


    /**
     * The original title of the media item (if different).
     */
    public GetLibraryItemsMetadata withOriginalTitle(Optional<String> originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = originalTitle;
        return this;
    }

    /**
     * The rating key of the parent media item.
     */
    public GetLibraryItemsMetadata withParentRatingKey(String parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }


    /**
     * The rating key of the parent media item.
     */
    public GetLibraryItemsMetadata withParentRatingKey(Optional<String> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    /**
     * The rating key of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentRatingKey(String grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
        return this;
    }


    /**
     * The rating key of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentRatingKey(Optional<String> grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = grandparentRatingKey;
        return this;
    }

    /**
     * The GUID of the parent media item.
     */
    public GetLibraryItemsMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }


    /**
     * The GUID of the parent media item.
     */
    public GetLibraryItemsMetadata withParentGuid(Optional<String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    /**
     * The GUID of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentGuid(String grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = Optional.ofNullable(grandparentGuid);
        return this;
    }


    /**
     * The GUID of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentGuid(Optional<String> grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = grandparentGuid;
        return this;
    }

    /**
     * The slug for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentSlug(String grandparentSlug) {
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        this.grandparentSlug = Optional.ofNullable(grandparentSlug);
        return this;
    }


    /**
     * The slug for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentSlug(Optional<String> grandparentSlug) {
        Utils.checkNotNull(grandparentSlug, "grandparentSlug");
        this.grandparentSlug = grandparentSlug;
        return this;
    }

    /**
     * The key of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }


    /**
     * The key of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentKey(Optional<String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    /**
     * The key of the parent media item.
     */
    public GetLibraryItemsMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }


    /**
     * The key of the parent media item.
     */
    public GetLibraryItemsMetadata withParentKey(Optional<String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    /**
     * The title of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }


    /**
     * The title of the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentTitle(Optional<String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    /**
     * The thumbnail URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }


    /**
     * The thumbnail URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentThumb(Optional<String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    /**
     * The theme URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentTheme(String grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = Optional.ofNullable(grandparentTheme);
        return this;
    }


    /**
     * The theme URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentTheme(Optional<String> grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = grandparentTheme;
        return this;
    }

    /**
     * The art URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }


    /**
     * The art URL for the grandparent media item.
     */
    public GetLibraryItemsMetadata withGrandparentArt(Optional<String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    /**
     * The title of the parent media item.
     */
    public GetLibraryItemsMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }


    /**
     * The title of the parent media item.
     */
    public GetLibraryItemsMetadata withParentTitle(Optional<String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    /**
     * The index position of the parent media item.
     */
    public GetLibraryItemsMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }


    /**
     * The index position of the parent media item.
     */
    public GetLibraryItemsMetadata withParentIndex(Optional<Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    /**
     * The thumbnail URL for the parent media item.
     */
    public GetLibraryItemsMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }


    /**
     * The thumbnail URL for the parent media item.
     */
    public GetLibraryItemsMetadata withParentThumb(Optional<String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    /**
     * The URL for the rating image.
     */
    public GetLibraryItemsMetadata withRatingImage(String ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = Optional.ofNullable(ratingImage);
        return this;
    }


    /**
     * The URL for the rating image.
     */
    public GetLibraryItemsMetadata withRatingImage(Optional<String> ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = ratingImage;
        return this;
    }

    /**
     * The number of times this media item has been viewed.
     */
    public GetLibraryItemsMetadata withViewCount(int viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }


    /**
     * The number of times this media item has been viewed.
     */
    public GetLibraryItemsMetadata withViewCount(Optional<Integer> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    /**
     * The current playback offset (in milliseconds).
     */
    public GetLibraryItemsMetadata withViewOffset(int viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = Optional.ofNullable(viewOffset);
        return this;
    }


    /**
     * The current playback offset (in milliseconds).
     */
    public GetLibraryItemsMetadata withViewOffset(Optional<Integer> viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = viewOffset;
        return this;
    }

    /**
     * The number of times this media item has been skipped.
     */
    public GetLibraryItemsMetadata withSkipCount(int skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = Optional.ofNullable(skipCount);
        return this;
    }


    /**
     * The number of times this media item has been skipped.
     */
    public GetLibraryItemsMetadata withSkipCount(Optional<Integer> skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = skipCount;
        return this;
    }

    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    public GetLibraryItemsMetadata withSubtype(String subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = Optional.ofNullable(subtype);
        return this;
    }


    /**
     * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
     */
    public GetLibraryItemsMetadata withSubtype(Optional<String> subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = subtype;
        return this;
    }

    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    public GetLibraryItemsMetadata withLastRatedAt(long lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = Optional.ofNullable(lastRatedAt);
        return this;
    }


    /**
     * The Unix timestamp representing the last time the item was rated.
     */
    public GetLibraryItemsMetadata withLastRatedAt(Optional<Long> lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = lastRatedAt;
        return this;
    }

    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    public GetLibraryItemsMetadata withCreatedAtAccuracy(String createdAtAccuracy) {
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        this.createdAtAccuracy = Optional.ofNullable(createdAtAccuracy);
        return this;
    }


    /**
     * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
     */
    public GetLibraryItemsMetadata withCreatedAtAccuracy(Optional<String> createdAtAccuracy) {
        Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
        this.createdAtAccuracy = createdAtAccuracy;
        return this;
    }

    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    public GetLibraryItemsMetadata withCreatedAtTZOffset(String createdAtTZOffset) {
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        this.createdAtTZOffset = Optional.ofNullable(createdAtTZOffset);
        return this;
    }


    /**
     * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
     */
    public GetLibraryItemsMetadata withCreatedAtTZOffset(Optional<String> createdAtTZOffset) {
        Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
        this.createdAtTZOffset = createdAtTZOffset;
        return this;
    }

    /**
     * Unix timestamp for when the media item was last viewed.
     */
    public GetLibraryItemsMetadata withLastViewedAt(int lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = Optional.ofNullable(lastViewedAt);
        return this;
    }


    /**
     * Unix timestamp for when the media item was last viewed.
     */
    public GetLibraryItemsMetadata withLastViewedAt(Optional<Integer> lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = lastViewedAt;
        return this;
    }

    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    public GetLibraryItemsMetadata withUserRating(float userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = Optional.ofNullable(userRating);
        return this;
    }


    /**
     * The rating provided by a user for the item. This value is expressed as a decimal number.
     */
    public GetLibraryItemsMetadata withUserRating(Optional<Float> userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = userRating;
        return this;
    }

    public GetLibraryItemsMetadata withImage(List<GetLibraryItemsImage> image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }


    public GetLibraryItemsMetadata withImage(Optional<? extends List<GetLibraryItemsImage>> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    public GetLibraryItemsMetadata withUltraBlurColors(GetLibraryItemsUltraBlurColors ultraBlurColors) {
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        this.ultraBlurColors = Optional.ofNullable(ultraBlurColors);
        return this;
    }


    public GetLibraryItemsMetadata withUltraBlurColors(Optional<? extends GetLibraryItemsUltraBlurColors> ultraBlurColors) {
        Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
        this.ultraBlurColors = ultraBlurColors;
        return this;
    }

    public GetLibraryItemsMetadata withGuids(List<GetLibraryItemsGuids> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = Optional.ofNullable(guids);
        return this;
    }


    public GetLibraryItemsMetadata withGuids(Optional<? extends List<GetLibraryItemsGuids>> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = guids;
        return this;
    }

    /**
     * The identifier for the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionID(long librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }


    /**
     * The identifier for the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionID(Optional<Long> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    /**
     * The title of the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
        return this;
    }


    /**
     * The title of the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionTitle(Optional<String> librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    /**
     * The key corresponding to the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = Optional.ofNullable(librarySectionKey);
        return this;
    }


    /**
     * The key corresponding to the library section.
     */
    public GetLibraryItemsMetadata withLibrarySectionKey(Optional<String> librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    /**
     * Setting that indicates the episode ordering for the show.
     * Options:
     *   - None = Library default
     *   - tmdbAiring = The Movie Database (Aired)
     *   - aired = TheTVDB (Aired)
     *   - dvd = TheTVDB (DVD)
     *   - absolute = TheTVDB (Absolute)
     */
    public GetLibraryItemsMetadata withShowOrdering(ShowOrdering showOrdering) {
        Utils.checkNotNull(showOrdering, "showOrdering");
        this.showOrdering = Optional.ofNullable(showOrdering);
        return this;
    }


    /**
     * Setting that indicates the episode ordering for the show.
     * Options:
     *   - None = Library default
     *   - tmdbAiring = The Movie Database (Aired)
     *   - aired = TheTVDB (Aired)
     *   - dvd = TheTVDB (DVD)
     *   - absolute = TheTVDB (Absolute)
     */
    public GetLibraryItemsMetadata withShowOrdering(Optional<? extends ShowOrdering> showOrdering) {
        Utils.checkNotNull(showOrdering, "showOrdering");
        this.showOrdering = showOrdering;
        return this;
    }

    /**
     * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
     */
    public GetLibraryItemsMetadata withFlattenSeasons(FlattenSeasons flattenSeasons) {
        Utils.checkNotNull(flattenSeasons, "flattenSeasons");
        this.flattenSeasons = Optional.ofNullable(flattenSeasons);
        return this;
    }


    /**
     * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
     */
    public GetLibraryItemsMetadata withFlattenSeasons(Optional<? extends FlattenSeasons> flattenSeasons) {
        Utils.checkNotNull(flattenSeasons, "flattenSeasons");
        this.flattenSeasons = flattenSeasons;
        return this;
    }

    /**
     * Indicates whether child items should be skipped.
     */
    public GetLibraryItemsMetadata withSkipChildren(boolean skipChildren) {
        Utils.checkNotNull(skipChildren, "skipChildren");
        this.skipChildren = Optional.ofNullable(skipChildren);
        return this;
    }


    /**
     * Indicates whether child items should be skipped.
     */
    public GetLibraryItemsMetadata withSkipChildren(Optional<Boolean> skipChildren) {
        Utils.checkNotNull(skipChildren, "skipChildren");
        this.skipChildren = skipChildren;
        return this;
    }

    public GetLibraryItemsMetadata withMedia(List<GetLibraryItemsMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }


    public GetLibraryItemsMetadata withMedia(Optional<? extends List<GetLibraryItemsMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public GetLibraryItemsMetadata withGenre(List<GetLibraryItemsGenre> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = Optional.ofNullable(genre);
        return this;
    }


    public GetLibraryItemsMetadata withGenre(Optional<? extends List<GetLibraryItemsGenre>> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = genre;
        return this;
    }

    public GetLibraryItemsMetadata withCountry(List<GetLibraryItemsCountry> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }


    public GetLibraryItemsMetadata withCountry(Optional<? extends List<GetLibraryItemsCountry>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public GetLibraryItemsMetadata withDirector(List<GetLibraryItemsDirector> director) {
        Utils.checkNotNull(director, "director");
        this.director = Optional.ofNullable(director);
        return this;
    }


    public GetLibraryItemsMetadata withDirector(Optional<? extends List<GetLibraryItemsDirector>> director) {
        Utils.checkNotNull(director, "director");
        this.director = director;
        return this;
    }

    public GetLibraryItemsMetadata withWriter(List<GetLibraryItemsWriter> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = Optional.ofNullable(writer);
        return this;
    }


    public GetLibraryItemsMetadata withWriter(Optional<? extends List<GetLibraryItemsWriter>> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = writer;
        return this;
    }

    public GetLibraryItemsMetadata withProducer(List<GetLibraryItemsProducer> producer) {
        Utils.checkNotNull(producer, "producer");
        this.producer = Optional.ofNullable(producer);
        return this;
    }


    public GetLibraryItemsMetadata withProducer(Optional<? extends List<GetLibraryItemsProducer>> producer) {
        Utils.checkNotNull(producer, "producer");
        this.producer = producer;
        return this;
    }

    public GetLibraryItemsMetadata withCollection(List<GetLibraryItemsCollection> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }


    public GetLibraryItemsMetadata withCollection(Optional<? extends List<GetLibraryItemsCollection>> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public GetLibraryItemsMetadata withRole(List<GetLibraryItemsRole> role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }


    public GetLibraryItemsMetadata withRole(Optional<? extends List<GetLibraryItemsRole>> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public GetLibraryItemsMetadata withRatings(List<Ratings> ratings) {
        Utils.checkNotNull(ratings, "ratings");
        this.ratings = Optional.ofNullable(ratings);
        return this;
    }


    public GetLibraryItemsMetadata withRatings(Optional<? extends List<Ratings>> ratings) {
        Utils.checkNotNull(ratings, "ratings");
        this.ratings = ratings;
        return this;
    }

    public GetLibraryItemsMetadata withSimilar(List<GetLibraryItemsSimilar> similar) {
        Utils.checkNotNull(similar, "similar");
        this.similar = Optional.ofNullable(similar);
        return this;
    }


    public GetLibraryItemsMetadata withSimilar(Optional<? extends List<GetLibraryItemsSimilar>> similar) {
        Utils.checkNotNull(similar, "similar");
        this.similar = similar;
        return this;
    }

    public GetLibraryItemsMetadata withLocation(List<GetLibraryItemsLocation> location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }


    public GetLibraryItemsMetadata withLocation(Optional<? extends List<GetLibraryItemsLocation>> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public GetLibraryItemsMetadata withChapter(List<Chapter> chapter) {
        Utils.checkNotNull(chapter, "chapter");
        this.chapter = Optional.ofNullable(chapter);
        return this;
    }


    public GetLibraryItemsMetadata withChapter(Optional<? extends List<Chapter>> chapter) {
        Utils.checkNotNull(chapter, "chapter");
        this.chapter = chapter;
        return this;
    }

    public GetLibraryItemsMetadata withMarker(List<Marker> marker) {
        Utils.checkNotNull(marker, "marker");
        this.marker = Optional.ofNullable(marker);
        return this;
    }


    public GetLibraryItemsMetadata withMarker(Optional<? extends List<Marker>> marker) {
        Utils.checkNotNull(marker, "marker");
        this.marker = marker;
        return this;
    }

    public GetLibraryItemsMetadata withExtras(Extras extras) {
        Utils.checkNotNull(extras, "extras");
        this.extras = Optional.ofNullable(extras);
        return this;
    }


    public GetLibraryItemsMetadata withExtras(Optional<? extends Extras> extras) {
        Utils.checkNotNull(extras, "extras");
        this.extras = extras;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsMetadata other = (GetLibraryItemsMetadata) o;
        return 
            Utils.enhancedDeepEquals(this.ratingKey, other.ratingKey) &&
            Utils.enhancedDeepEquals(this.key, other.key) &&
            Utils.enhancedDeepEquals(this.guid, other.guid) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.studio, other.studio) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.title, other.title) &&
            Utils.enhancedDeepEquals(this.banner, other.banner) &&
            Utils.enhancedDeepEquals(this.titleSort, other.titleSort) &&
            Utils.enhancedDeepEquals(this.contentRating, other.contentRating) &&
            Utils.enhancedDeepEquals(this.summary, other.summary) &&
            Utils.enhancedDeepEquals(this.rating, other.rating) &&
            Utils.enhancedDeepEquals(this.audienceRating, other.audienceRating) &&
            Utils.enhancedDeepEquals(this.year, other.year) &&
            Utils.enhancedDeepEquals(this.tagline, other.tagline) &&
            Utils.enhancedDeepEquals(this.thumb, other.thumb) &&
            Utils.enhancedDeepEquals(this.art, other.art) &&
            Utils.enhancedDeepEquals(this.theme, other.theme) &&
            Utils.enhancedDeepEquals(this.index, other.index) &&
            Utils.enhancedDeepEquals(this.leafCount, other.leafCount) &&
            Utils.enhancedDeepEquals(this.viewedLeafCount, other.viewedLeafCount) &&
            Utils.enhancedDeepEquals(this.childCount, other.childCount) &&
            Utils.enhancedDeepEquals(this.seasonCount, other.seasonCount) &&
            Utils.enhancedDeepEquals(this.duration, other.duration) &&
            Utils.enhancedDeepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            Utils.enhancedDeepEquals(this.addedAt, other.addedAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.audienceRatingImage, other.audienceRatingImage) &&
            Utils.enhancedDeepEquals(this.chapterSource, other.chapterSource) &&
            Utils.enhancedDeepEquals(this.primaryExtraKey, other.primaryExtraKey) &&
            Utils.enhancedDeepEquals(this.originalTitle, other.originalTitle) &&
            Utils.enhancedDeepEquals(this.parentRatingKey, other.parentRatingKey) &&
            Utils.enhancedDeepEquals(this.grandparentRatingKey, other.grandparentRatingKey) &&
            Utils.enhancedDeepEquals(this.parentGuid, other.parentGuid) &&
            Utils.enhancedDeepEquals(this.grandparentGuid, other.grandparentGuid) &&
            Utils.enhancedDeepEquals(this.grandparentSlug, other.grandparentSlug) &&
            Utils.enhancedDeepEquals(this.grandparentKey, other.grandparentKey) &&
            Utils.enhancedDeepEquals(this.parentKey, other.parentKey) &&
            Utils.enhancedDeepEquals(this.grandparentTitle, other.grandparentTitle) &&
            Utils.enhancedDeepEquals(this.grandparentThumb, other.grandparentThumb) &&
            Utils.enhancedDeepEquals(this.grandparentTheme, other.grandparentTheme) &&
            Utils.enhancedDeepEquals(this.grandparentArt, other.grandparentArt) &&
            Utils.enhancedDeepEquals(this.parentTitle, other.parentTitle) &&
            Utils.enhancedDeepEquals(this.parentIndex, other.parentIndex) &&
            Utils.enhancedDeepEquals(this.parentThumb, other.parentThumb) &&
            Utils.enhancedDeepEquals(this.ratingImage, other.ratingImage) &&
            Utils.enhancedDeepEquals(this.viewCount, other.viewCount) &&
            Utils.enhancedDeepEquals(this.viewOffset, other.viewOffset) &&
            Utils.enhancedDeepEquals(this.skipCount, other.skipCount) &&
            Utils.enhancedDeepEquals(this.subtype, other.subtype) &&
            Utils.enhancedDeepEquals(this.lastRatedAt, other.lastRatedAt) &&
            Utils.enhancedDeepEquals(this.createdAtAccuracy, other.createdAtAccuracy) &&
            Utils.enhancedDeepEquals(this.createdAtTZOffset, other.createdAtTZOffset) &&
            Utils.enhancedDeepEquals(this.lastViewedAt, other.lastViewedAt) &&
            Utils.enhancedDeepEquals(this.userRating, other.userRating) &&
            Utils.enhancedDeepEquals(this.image, other.image) &&
            Utils.enhancedDeepEquals(this.ultraBlurColors, other.ultraBlurColors) &&
            Utils.enhancedDeepEquals(this.guids, other.guids) &&
            Utils.enhancedDeepEquals(this.librarySectionID, other.librarySectionID) &&
            Utils.enhancedDeepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            Utils.enhancedDeepEquals(this.librarySectionKey, other.librarySectionKey) &&
            Utils.enhancedDeepEquals(this.showOrdering, other.showOrdering) &&
            Utils.enhancedDeepEquals(this.flattenSeasons, other.flattenSeasons) &&
            Utils.enhancedDeepEquals(this.skipChildren, other.skipChildren) &&
            Utils.enhancedDeepEquals(this.media, other.media) &&
            Utils.enhancedDeepEquals(this.genre, other.genre) &&
            Utils.enhancedDeepEquals(this.country, other.country) &&
            Utils.enhancedDeepEquals(this.director, other.director) &&
            Utils.enhancedDeepEquals(this.writer, other.writer) &&
            Utils.enhancedDeepEquals(this.producer, other.producer) &&
            Utils.enhancedDeepEquals(this.collection, other.collection) &&
            Utils.enhancedDeepEquals(this.role, other.role) &&
            Utils.enhancedDeepEquals(this.ratings, other.ratings) &&
            Utils.enhancedDeepEquals(this.similar, other.similar) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.chapter, other.chapter) &&
            Utils.enhancedDeepEquals(this.marker, other.marker) &&
            Utils.enhancedDeepEquals(this.extras, other.extras);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ratingKey, key, guid,
            slug, studio, type,
            title, banner, titleSort,
            contentRating, summary, rating,
            audienceRating, year, tagline,
            thumb, art, theme,
            index, leafCount, viewedLeafCount,
            childCount, seasonCount, duration,
            originallyAvailableAt, addedAt, updatedAt,
            audienceRatingImage, chapterSource, primaryExtraKey,
            originalTitle, parentRatingKey, grandparentRatingKey,
            parentGuid, grandparentGuid, grandparentSlug,
            grandparentKey, parentKey, grandparentTitle,
            grandparentThumb, grandparentTheme, grandparentArt,
            parentTitle, parentIndex, parentThumb,
            ratingImage, viewCount, viewOffset,
            skipCount, subtype, lastRatedAt,
            createdAtAccuracy, createdAtTZOffset, lastViewedAt,
            userRating, image, ultraBlurColors,
            guids, librarySectionID, librarySectionTitle,
            librarySectionKey, showOrdering, flattenSeasons,
            skipChildren, media, genre,
            country, director, writer,
            producer, collection, role,
            ratings, similar, location,
            chapter, marker, extras);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsMetadata.class,
                "ratingKey", ratingKey,
                "key", key,
                "guid", guid,
                "slug", slug,
                "studio", studio,
                "type", type,
                "title", title,
                "banner", banner,
                "titleSort", titleSort,
                "contentRating", contentRating,
                "summary", summary,
                "rating", rating,
                "audienceRating", audienceRating,
                "year", year,
                "tagline", tagline,
                "thumb", thumb,
                "art", art,
                "theme", theme,
                "index", index,
                "leafCount", leafCount,
                "viewedLeafCount", viewedLeafCount,
                "childCount", childCount,
                "seasonCount", seasonCount,
                "duration", duration,
                "originallyAvailableAt", originallyAvailableAt,
                "addedAt", addedAt,
                "updatedAt", updatedAt,
                "audienceRatingImage", audienceRatingImage,
                "chapterSource", chapterSource,
                "primaryExtraKey", primaryExtraKey,
                "originalTitle", originalTitle,
                "parentRatingKey", parentRatingKey,
                "grandparentRatingKey", grandparentRatingKey,
                "parentGuid", parentGuid,
                "grandparentGuid", grandparentGuid,
                "grandparentSlug", grandparentSlug,
                "grandparentKey", grandparentKey,
                "parentKey", parentKey,
                "grandparentTitle", grandparentTitle,
                "grandparentThumb", grandparentThumb,
                "grandparentTheme", grandparentTheme,
                "grandparentArt", grandparentArt,
                "parentTitle", parentTitle,
                "parentIndex", parentIndex,
                "parentThumb", parentThumb,
                "ratingImage", ratingImage,
                "viewCount", viewCount,
                "viewOffset", viewOffset,
                "skipCount", skipCount,
                "subtype", subtype,
                "lastRatedAt", lastRatedAt,
                "createdAtAccuracy", createdAtAccuracy,
                "createdAtTZOffset", createdAtTZOffset,
                "lastViewedAt", lastViewedAt,
                "userRating", userRating,
                "image", image,
                "ultraBlurColors", ultraBlurColors,
                "guids", guids,
                "librarySectionID", librarySectionID,
                "librarySectionTitle", librarySectionTitle,
                "librarySectionKey", librarySectionKey,
                "showOrdering", showOrdering,
                "flattenSeasons", flattenSeasons,
                "skipChildren", skipChildren,
                "media", media,
                "genre", genre,
                "country", country,
                "director", director,
                "writer", writer,
                "producer", producer,
                "collection", collection,
                "role", role,
                "ratings", ratings,
                "similar", similar,
                "location", location,
                "chapter", chapter,
                "marker", marker,
                "extras", extras);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ratingKey;

        private String key;

        private String guid;

        private String slug;

        private Optional<String> studio = Optional.empty();

        private GetLibraryItemsType type;

        private String title;

        private String banner;

        private String titleSort;

        private Optional<String> contentRating = Optional.empty();

        private String summary;

        private Float rating;

        private Double audienceRating;

        private Optional<Integer> year = Optional.empty();

        private String tagline;

        private String thumb;

        private String art;

        private String theme;

        private Integer index;

        private Optional<Integer> leafCount = Optional.empty();

        private Optional<Integer> viewedLeafCount = Optional.empty();

        private Integer childCount;

        private Integer seasonCount;

        private Integer duration;

        private Optional<LocalDate> originallyAvailableAt = Optional.empty();

        private Long addedAt;

        private Optional<Long> updatedAt = Optional.empty();

        private Optional<String> audienceRatingImage = Optional.empty();

        private Optional<String> chapterSource = Optional.empty();

        private Optional<String> primaryExtraKey = Optional.empty();

        private Optional<String> originalTitle = Optional.empty();

        private Optional<String> parentRatingKey = Optional.empty();

        private Optional<String> grandparentRatingKey = Optional.empty();

        private Optional<String> parentGuid = Optional.empty();

        private Optional<String> grandparentGuid = Optional.empty();

        private Optional<String> grandparentSlug = Optional.empty();

        private Optional<String> grandparentKey = Optional.empty();

        private Optional<String> parentKey = Optional.empty();

        private Optional<String> grandparentTitle = Optional.empty();

        private Optional<String> grandparentThumb = Optional.empty();

        private Optional<String> grandparentTheme = Optional.empty();

        private Optional<String> grandparentArt = Optional.empty();

        private Optional<String> parentTitle = Optional.empty();

        private Optional<Integer> parentIndex = Optional.empty();

        private Optional<String> parentThumb = Optional.empty();

        private Optional<String> ratingImage = Optional.empty();

        private Optional<Integer> viewCount = Optional.empty();

        private Optional<Integer> viewOffset = Optional.empty();

        private Optional<Integer> skipCount = Optional.empty();

        private Optional<String> subtype = Optional.empty();

        private Optional<Long> lastRatedAt = Optional.empty();

        private Optional<String> createdAtAccuracy = Optional.empty();

        private Optional<String> createdAtTZOffset = Optional.empty();

        private Optional<Integer> lastViewedAt = Optional.empty();

        private Optional<Float> userRating = Optional.empty();

        private Optional<? extends List<GetLibraryItemsImage>> image = Optional.empty();

        private Optional<? extends GetLibraryItemsUltraBlurColors> ultraBlurColors = Optional.empty();

        private Optional<? extends List<GetLibraryItemsGuids>> guids = Optional.empty();

        private Optional<Long> librarySectionID = Optional.empty();

        private Optional<String> librarySectionTitle = Optional.empty();

        private Optional<String> librarySectionKey = Optional.empty();

        private Optional<? extends ShowOrdering> showOrdering = Optional.empty();

        private Optional<? extends FlattenSeasons> flattenSeasons = Optional.empty();

        private Optional<Boolean> skipChildren = Optional.empty();

        private Optional<? extends List<GetLibraryItemsMedia>> media = Optional.empty();

        private Optional<? extends List<GetLibraryItemsGenre>> genre = Optional.empty();

        private Optional<? extends List<GetLibraryItemsCountry>> country = Optional.empty();

        private Optional<? extends List<GetLibraryItemsDirector>> director = Optional.empty();

        private Optional<? extends List<GetLibraryItemsWriter>> writer = Optional.empty();

        private Optional<? extends List<GetLibraryItemsProducer>> producer = Optional.empty();

        private Optional<? extends List<GetLibraryItemsCollection>> collection = Optional.empty();

        private Optional<? extends List<GetLibraryItemsRole>> role = Optional.empty();

        private Optional<? extends List<Ratings>> ratings = Optional.empty();

        private Optional<? extends List<GetLibraryItemsSimilar>> similar = Optional.empty();

        private Optional<? extends List<GetLibraryItemsLocation>> location = Optional.empty();

        private Optional<? extends List<Chapter>> chapter = Optional.empty();

        private Optional<? extends List<Marker>> marker = Optional.empty();

        private Optional<? extends Extras> extras = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The rating key (Media ID) of this media item. Note: Although this is always an integer, it is represented as a string in the API.
         */
        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }


        /**
         * The unique key for the media item.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }


        /**
         * The globally unique identifier for the media item.
         */
        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }


        /**
         * A URL‚Äêfriendly version of the media title.
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        /**
         * The studio that produced the media item.
         */
        public Builder studio(String studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = Optional.ofNullable(studio);
            return this;
        }

        /**
         * The studio that produced the media item.
         */
        public Builder studio(Optional<String> studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = studio;
            return this;
        }


        public Builder type(GetLibraryItemsType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * The title of the media item.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }


        /**
         * The banner image URL for the media item.
         */
        public Builder banner(String banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = banner;
            return this;
        }


        /**
         * The sort title used for ordering media items.
         */
        public Builder titleSort(String titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = titleSort;
            return this;
        }


        /**
         * The content rating for the media item.
         */
        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        /**
         * The content rating for the media item.
         */
        public Builder contentRating(Optional<String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }


        /**
         * A synopsis of the media item.
         */
        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }


        /**
         * The critic rating for the media item.
         */
        public Builder rating(float rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }


        /**
         * The audience rating for the media item.
         */
        public Builder audienceRating(double audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = audienceRating;
            return this;
        }


        /**
         * The release year of the media item.
         */
        public Builder year(int year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        /**
         * The release year of the media item.
         */
        public Builder year(Optional<Integer> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }


        /**
         * A brief tagline for the media item.
         */
        public Builder tagline(String tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = tagline;
            return this;
        }


        /**
         * The thumbnail image URL for the media item.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }


        /**
         * The art image URL for the media item.
         */
        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }


        /**
         * The theme URL for the media item.
         */
        public Builder theme(String theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = theme;
            return this;
        }


        /**
         * The index position of the media item.
         */
        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }


        /**
         * The number of leaf items (end nodes) under this media item.
         */
        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        /**
         * The number of leaf items (end nodes) under this media item.
         */
        public Builder leafCount(Optional<Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }


        /**
         * The number of leaf items that have been viewed.
         */
        public Builder viewedLeafCount(int viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
            return this;
        }

        /**
         * The number of leaf items that have been viewed.
         */
        public Builder viewedLeafCount(Optional<Integer> viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = viewedLeafCount;
            return this;
        }


        /**
         * The number of child items associated with this media item.
         */
        public Builder childCount(int childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }


        /**
         * The total number of seasons (for TV shows).
         */
        public Builder seasonCount(int seasonCount) {
            Utils.checkNotNull(seasonCount, "seasonCount");
            this.seasonCount = seasonCount;
            return this;
        }


        /**
         * The duration of the media item in milliseconds.
         */
        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }


        /**
         * The original release date of the media item.
         */
        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        /**
         * The original release date of the media item.
         */
        public Builder originallyAvailableAt(Optional<LocalDate> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }


        public Builder addedAt(long addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }


        /**
         * Unix epoch datetime in seconds
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix epoch datetime in seconds
         */
        public Builder updatedAt(Optional<Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * The URL for the audience rating image.
         */
        public Builder audienceRatingImage(String audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
            return this;
        }

        /**
         * The URL for the audience rating image.
         */
        public Builder audienceRatingImage(Optional<String> audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = audienceRatingImage;
            return this;
        }


        /**
         * The source from which chapter data is derived.
         */
        public Builder chapterSource(String chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = Optional.ofNullable(chapterSource);
            return this;
        }

        /**
         * The source from which chapter data is derived.
         */
        public Builder chapterSource(Optional<String> chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = chapterSource;
            return this;
        }


        /**
         * The primary extra key associated with this media item.
         */
        public Builder primaryExtraKey(String primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
            return this;
        }

        /**
         * The primary extra key associated with this media item.
         */
        public Builder primaryExtraKey(Optional<String> primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = primaryExtraKey;
            return this;
        }


        /**
         * The original title of the media item (if different).
         */
        public Builder originalTitle(String originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = Optional.ofNullable(originalTitle);
            return this;
        }

        /**
         * The original title of the media item (if different).
         */
        public Builder originalTitle(Optional<String> originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = originalTitle;
            return this;
        }


        /**
         * The rating key of the parent media item.
         */
        public Builder parentRatingKey(String parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        /**
         * The rating key of the parent media item.
         */
        public Builder parentRatingKey(Optional<String> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }


        /**
         * The rating key of the grandparent media item.
         */
        public Builder grandparentRatingKey(String grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
            return this;
        }

        /**
         * The rating key of the grandparent media item.
         */
        public Builder grandparentRatingKey(Optional<String> grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = grandparentRatingKey;
            return this;
        }


        /**
         * The GUID of the parent media item.
         */
        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        /**
         * The GUID of the parent media item.
         */
        public Builder parentGuid(Optional<String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }


        /**
         * The GUID of the grandparent media item.
         */
        public Builder grandparentGuid(String grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = Optional.ofNullable(grandparentGuid);
            return this;
        }

        /**
         * The GUID of the grandparent media item.
         */
        public Builder grandparentGuid(Optional<String> grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = grandparentGuid;
            return this;
        }


        /**
         * The slug for the grandparent media item.
         */
        public Builder grandparentSlug(String grandparentSlug) {
            Utils.checkNotNull(grandparentSlug, "grandparentSlug");
            this.grandparentSlug = Optional.ofNullable(grandparentSlug);
            return this;
        }

        /**
         * The slug for the grandparent media item.
         */
        public Builder grandparentSlug(Optional<String> grandparentSlug) {
            Utils.checkNotNull(grandparentSlug, "grandparentSlug");
            this.grandparentSlug = grandparentSlug;
            return this;
        }


        /**
         * The key of the grandparent media item.
         */
        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        /**
         * The key of the grandparent media item.
         */
        public Builder grandparentKey(Optional<String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }


        /**
         * The key of the parent media item.
         */
        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        /**
         * The key of the parent media item.
         */
        public Builder parentKey(Optional<String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }


        /**
         * The title of the grandparent media item.
         */
        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        /**
         * The title of the grandparent media item.
         */
        public Builder grandparentTitle(Optional<String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }


        /**
         * The thumbnail URL for the grandparent media item.
         */
        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        /**
         * The thumbnail URL for the grandparent media item.
         */
        public Builder grandparentThumb(Optional<String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }


        /**
         * The theme URL for the grandparent media item.
         */
        public Builder grandparentTheme(String grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = Optional.ofNullable(grandparentTheme);
            return this;
        }

        /**
         * The theme URL for the grandparent media item.
         */
        public Builder grandparentTheme(Optional<String> grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = grandparentTheme;
            return this;
        }


        /**
         * The art URL for the grandparent media item.
         */
        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        /**
         * The art URL for the grandparent media item.
         */
        public Builder grandparentArt(Optional<String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }


        /**
         * The title of the parent media item.
         */
        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        /**
         * The title of the parent media item.
         */
        public Builder parentTitle(Optional<String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }


        /**
         * The index position of the parent media item.
         */
        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        /**
         * The index position of the parent media item.
         */
        public Builder parentIndex(Optional<Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }


        /**
         * The thumbnail URL for the parent media item.
         */
        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        /**
         * The thumbnail URL for the parent media item.
         */
        public Builder parentThumb(Optional<String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }


        /**
         * The URL for the rating image.
         */
        public Builder ratingImage(String ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = Optional.ofNullable(ratingImage);
            return this;
        }

        /**
         * The URL for the rating image.
         */
        public Builder ratingImage(Optional<String> ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = ratingImage;
            return this;
        }


        /**
         * The number of times this media item has been viewed.
         */
        public Builder viewCount(int viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        /**
         * The number of times this media item has been viewed.
         */
        public Builder viewCount(Optional<Integer> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }


        /**
         * The current playback offset (in milliseconds).
         */
        public Builder viewOffset(int viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = Optional.ofNullable(viewOffset);
            return this;
        }

        /**
         * The current playback offset (in milliseconds).
         */
        public Builder viewOffset(Optional<Integer> viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = viewOffset;
            return this;
        }


        /**
         * The number of times this media item has been skipped.
         */
        public Builder skipCount(int skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = Optional.ofNullable(skipCount);
            return this;
        }

        /**
         * The number of times this media item has been skipped.
         */
        public Builder skipCount(Optional<Integer> skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = skipCount;
            return this;
        }


        /**
         * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
         */
        public Builder subtype(String subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = Optional.ofNullable(subtype);
            return this;
        }

        /**
         * A classification that further describes the type of media item. For example, 'clip' indicates that the item is a short video clip.
         */
        public Builder subtype(Optional<String> subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = subtype;
            return this;
        }


        /**
         * The Unix timestamp representing the last time the item was rated.
         */
        public Builder lastRatedAt(long lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = Optional.ofNullable(lastRatedAt);
            return this;
        }

        /**
         * The Unix timestamp representing the last time the item was rated.
         */
        public Builder lastRatedAt(Optional<Long> lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = lastRatedAt;
            return this;
        }


        /**
         * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
         */
        public Builder createdAtAccuracy(String createdAtAccuracy) {
            Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
            this.createdAtAccuracy = Optional.ofNullable(createdAtAccuracy);
            return this;
        }

        /**
         * The accuracy of the creation timestamp. This value indicates the format(s) provided (for example, 'epoch,local' means both epoch and local time formats are available).
         */
        public Builder createdAtAccuracy(Optional<String> createdAtAccuracy) {
            Utils.checkNotNull(createdAtAccuracy, "createdAtAccuracy");
            this.createdAtAccuracy = createdAtAccuracy;
            return this;
        }


        /**
         * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
         */
        public Builder createdAtTZOffset(String createdAtTZOffset) {
            Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
            this.createdAtTZOffset = Optional.ofNullable(createdAtTZOffset);
            return this;
        }

        /**
         * The time zone offset for the creation timestamp, represented as a string. This offset indicates the difference from UTC.
         */
        public Builder createdAtTZOffset(Optional<String> createdAtTZOffset) {
            Utils.checkNotNull(createdAtTZOffset, "createdAtTZOffset");
            this.createdAtTZOffset = createdAtTZOffset;
            return this;
        }


        /**
         * Unix timestamp for when the media item was last viewed.
         */
        public Builder lastViewedAt(int lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = Optional.ofNullable(lastViewedAt);
            return this;
        }

        /**
         * Unix timestamp for when the media item was last viewed.
         */
        public Builder lastViewedAt(Optional<Integer> lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = lastViewedAt;
            return this;
        }


        /**
         * The rating provided by a user for the item. This value is expressed as a decimal number.
         */
        public Builder userRating(float userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = Optional.ofNullable(userRating);
            return this;
        }

        /**
         * The rating provided by a user for the item. This value is expressed as a decimal number.
         */
        public Builder userRating(Optional<Float> userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = userRating;
            return this;
        }


        public Builder image(List<GetLibraryItemsImage> image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends List<GetLibraryItemsImage>> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }


        public Builder ultraBlurColors(GetLibraryItemsUltraBlurColors ultraBlurColors) {
            Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
            this.ultraBlurColors = Optional.ofNullable(ultraBlurColors);
            return this;
        }

        public Builder ultraBlurColors(Optional<? extends GetLibraryItemsUltraBlurColors> ultraBlurColors) {
            Utils.checkNotNull(ultraBlurColors, "ultraBlurColors");
            this.ultraBlurColors = ultraBlurColors;
            return this;
        }


        public Builder guids(List<GetLibraryItemsGuids> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = Optional.ofNullable(guids);
            return this;
        }

        public Builder guids(Optional<? extends List<GetLibraryItemsGuids>> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = guids;
            return this;
        }


        /**
         * The identifier for the library section.
         */
        public Builder librarySectionID(long librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        /**
         * The identifier for the library section.
         */
        public Builder librarySectionID(Optional<Long> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }


        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
            return this;
        }

        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(Optional<String> librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }


        /**
         * The key corresponding to the library section.
         */
        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = Optional.ofNullable(librarySectionKey);
            return this;
        }

        /**
         * The key corresponding to the library section.
         */
        public Builder librarySectionKey(Optional<String> librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }


        /**
         * Setting that indicates the episode ordering for the show.
         * Options:
         *   - None = Library default
         *   - tmdbAiring = The Movie Database (Aired)
         *   - aired = TheTVDB (Aired)
         *   - dvd = TheTVDB (DVD)
         *   - absolute = TheTVDB (Absolute)
         */
        public Builder showOrdering(ShowOrdering showOrdering) {
            Utils.checkNotNull(showOrdering, "showOrdering");
            this.showOrdering = Optional.ofNullable(showOrdering);
            return this;
        }

        /**
         * Setting that indicates the episode ordering for the show.
         * Options:
         *   - None = Library default
         *   - tmdbAiring = The Movie Database (Aired)
         *   - aired = TheTVDB (Aired)
         *   - dvd = TheTVDB (DVD)
         *   - absolute = TheTVDB (Absolute)
         */
        public Builder showOrdering(Optional<? extends ShowOrdering> showOrdering) {
            Utils.checkNotNull(showOrdering, "showOrdering");
            this.showOrdering = showOrdering;
            return this;
        }


        /**
         * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
         */
        public Builder flattenSeasons(FlattenSeasons flattenSeasons) {
            Utils.checkNotNull(flattenSeasons, "flattenSeasons");
            this.flattenSeasons = Optional.ofNullable(flattenSeasons);
            return this;
        }

        /**
         * Setting that indicates if seasons are set to hidden for the show. (-1 = Library default, 0 = Hide, 1 = Show).
         */
        public Builder flattenSeasons(Optional<? extends FlattenSeasons> flattenSeasons) {
            Utils.checkNotNull(flattenSeasons, "flattenSeasons");
            this.flattenSeasons = flattenSeasons;
            return this;
        }


        /**
         * Indicates whether child items should be skipped.
         */
        public Builder skipChildren(boolean skipChildren) {
            Utils.checkNotNull(skipChildren, "skipChildren");
            this.skipChildren = Optional.ofNullable(skipChildren);
            return this;
        }

        /**
         * Indicates whether child items should be skipped.
         */
        public Builder skipChildren(Optional<Boolean> skipChildren) {
            Utils.checkNotNull(skipChildren, "skipChildren");
            this.skipChildren = skipChildren;
            return this;
        }


        public Builder media(List<GetLibraryItemsMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends List<GetLibraryItemsMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }


        public Builder genre(List<GetLibraryItemsGenre> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = Optional.ofNullable(genre);
            return this;
        }

        public Builder genre(Optional<? extends List<GetLibraryItemsGenre>> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = genre;
            return this;
        }


        public Builder country(List<GetLibraryItemsCountry> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends List<GetLibraryItemsCountry>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }


        public Builder director(List<GetLibraryItemsDirector> director) {
            Utils.checkNotNull(director, "director");
            this.director = Optional.ofNullable(director);
            return this;
        }

        public Builder director(Optional<? extends List<GetLibraryItemsDirector>> director) {
            Utils.checkNotNull(director, "director");
            this.director = director;
            return this;
        }


        public Builder writer(List<GetLibraryItemsWriter> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = Optional.ofNullable(writer);
            return this;
        }

        public Builder writer(Optional<? extends List<GetLibraryItemsWriter>> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = writer;
            return this;
        }


        public Builder producer(List<GetLibraryItemsProducer> producer) {
            Utils.checkNotNull(producer, "producer");
            this.producer = Optional.ofNullable(producer);
            return this;
        }

        public Builder producer(Optional<? extends List<GetLibraryItemsProducer>> producer) {
            Utils.checkNotNull(producer, "producer");
            this.producer = producer;
            return this;
        }


        public Builder collection(List<GetLibraryItemsCollection> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends List<GetLibraryItemsCollection>> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }


        public Builder role(List<GetLibraryItemsRole> role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<? extends List<GetLibraryItemsRole>> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }


        public Builder ratings(List<Ratings> ratings) {
            Utils.checkNotNull(ratings, "ratings");
            this.ratings = Optional.ofNullable(ratings);
            return this;
        }

        public Builder ratings(Optional<? extends List<Ratings>> ratings) {
            Utils.checkNotNull(ratings, "ratings");
            this.ratings = ratings;
            return this;
        }


        public Builder similar(List<GetLibraryItemsSimilar> similar) {
            Utils.checkNotNull(similar, "similar");
            this.similar = Optional.ofNullable(similar);
            return this;
        }

        public Builder similar(Optional<? extends List<GetLibraryItemsSimilar>> similar) {
            Utils.checkNotNull(similar, "similar");
            this.similar = similar;
            return this;
        }


        public Builder location(List<GetLibraryItemsLocation> location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<? extends List<GetLibraryItemsLocation>> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }


        public Builder chapter(List<Chapter> chapter) {
            Utils.checkNotNull(chapter, "chapter");
            this.chapter = Optional.ofNullable(chapter);
            return this;
        }

        public Builder chapter(Optional<? extends List<Chapter>> chapter) {
            Utils.checkNotNull(chapter, "chapter");
            this.chapter = chapter;
            return this;
        }


        public Builder marker(List<Marker> marker) {
            Utils.checkNotNull(marker, "marker");
            this.marker = Optional.ofNullable(marker);
            return this;
        }

        public Builder marker(Optional<? extends List<Marker>> marker) {
            Utils.checkNotNull(marker, "marker");
            this.marker = marker;
            return this;
        }


        public Builder extras(Extras extras) {
            Utils.checkNotNull(extras, "extras");
            this.extras = Optional.ofNullable(extras);
            return this;
        }

        public Builder extras(Optional<? extends Extras> extras) {
            Utils.checkNotNull(extras, "extras");
            this.extras = extras;
            return this;
        }

        public GetLibraryItemsMetadata build() {

            return new GetLibraryItemsMetadata(
                ratingKey, key, guid,
                slug, studio, type,
                title, banner, titleSort,
                contentRating, summary, rating,
                audienceRating, year, tagline,
                thumb, art, theme,
                index, leafCount, viewedLeafCount,
                childCount, seasonCount, duration,
                originallyAvailableAt, addedAt, updatedAt,
                audienceRatingImage, chapterSource, primaryExtraKey,
                originalTitle, parentRatingKey, grandparentRatingKey,
                parentGuid, grandparentGuid, grandparentSlug,
                grandparentKey, parentKey, grandparentTitle,
                grandparentThumb, grandparentTheme, grandparentArt,
                parentTitle, parentIndex, parentThumb,
                ratingImage, viewCount, viewOffset,
                skipCount, subtype, lastRatedAt,
                createdAtAccuracy, createdAtTZOffset, lastViewedAt,
                userRating, image, ultraBlurColors,
                guids, librarySectionID, librarySectionTitle,
                librarySectionKey, showOrdering, flattenSeasons,
                skipChildren, media, genre,
                country, director, writer,
                producer, collection, role,
                ratings, similar, location,
                chapter, marker, extras);
        }

    }
}
