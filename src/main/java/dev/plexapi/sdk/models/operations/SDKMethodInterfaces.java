/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk.models.operations;

import dev.plexapi.sdk.utils.Options;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Long;
import java.lang.String;
import java.util.Optional;

public class SDKMethodInterfaces {


    public interface MethodCallGetServerCapabilities {
        GetServerCapabilitiesResponse getServerCapabilities(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetServerPreferences {
        GetServerPreferencesResponse getServerPreferences(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetAvailableClients {
        GetAvailableClientsResponse getAvailableClients(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetDevices {
        GetDevicesResponse getDevices(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetServerIdentity {
        GetServerIdentityResponse getServerIdentity(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMyPlexAccount {
        GetMyPlexAccountResponse getMyPlexAccount(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetResizedPhoto {
        GetResizedPhotoResponse getResizedPhoto(
            GetResizedPhotoRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMediaProviders {
        GetMediaProvidersResponse getMediaProviders(
            String xPlexToken,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetServerList {
        GetServerListResponse getServerList(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallMarkPlayed {
        MarkPlayedResponse markPlayed(
            double key,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallMarkUnplayed {
        MarkUnplayedResponse markUnplayed(
            double key,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdatePlayProgress {
        UpdatePlayProgressResponse updatePlayProgress(
            String key,
            double time,
            String state,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetBannerImage {
        GetBannerImageResponse getBannerImage(
            GetBannerImageRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetThumbImage {
        GetThumbImageResponse getThumbImage(
            GetThumbImageRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTimeline {
        GetTimelineResponse getTimeline(
            GetTimelineRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStartUniversalTranscode {
        StartUniversalTranscodeResponse startUniversalTranscode(
            StartUniversalTranscodeRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetServerActivities {
        GetServerActivitiesResponse getServerActivities(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCancelServerActivities {
        CancelServerActivitiesResponse cancelServerActivities(
            String activityUUID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetButlerTasks {
        GetButlerTasksResponse getButlerTasks(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStartAllTasks {
        StartAllTasksResponse startAllTasks(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStopAllTasks {
        StopAllTasksResponse stopAllTasks(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStartTask {
        StartTaskResponse startTask(
            TaskName taskName,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStopTask {
        StopTaskResponse stopTask(
            PathParamTaskName taskName,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetCompanionsData {
        GetCompanionsDataResponse getCompanionsData(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetUserFriends {
        GetUserFriendsResponse getUserFriends(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetGeoData {
        GetGeoDataResponse getGeoData(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetHomeData {
        GetHomeDataResponse getHomeData(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetServerResources {
        GetServerResourcesResponse getServerResources(
            Optional<? extends IncludeHttps> includeHttps,
            Optional<? extends IncludeRelay> includeRelay,
            Optional<? extends IncludeIPv6> includeIPv6,
            Optional<String> clientID,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPin {
        GetPinResponse getPin(
            GetPinRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTokenByPinId {
        GetTokenByPinIdResponse getTokenByPinId(
            GetTokenByPinIdRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetGlobalHubs {
        GetGlobalHubsResponse getGlobalHubs(
            Optional<Double> count,
            Optional<? extends OnlyTransient> onlyTransient,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetRecentlyAdded {
        GetRecentlyAddedResponse getRecentlyAdded(
            GetRecentlyAddedRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetLibraryHubs {
        GetLibraryHubsResponse getLibraryHubs(
            double sectionId,
            Optional<Double> count,
            Optional<? extends QueryParamOnlyTransient> onlyTransient,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallPerformSearch {
        PerformSearchResponse performSearch(
            String query,
            Optional<Double> sectionId,
            Optional<Double> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallPerformVoiceSearch {
        PerformVoiceSearchResponse performVoiceSearch(
            String query,
            Optional<Double> sectionId,
            Optional<Double> limit,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSearchResults {
        GetSearchResultsResponse getSearchResults(
            String query,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetFileHash {
        GetFileHashResponse getFileHash(
            String url,
            Optional<Double> type,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetRecentlyAddedLibrary {
        GetRecentlyAddedLibraryResponse getRecentlyAddedLibrary(
            GetRecentlyAddedLibraryRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetAllLibraries {
        GetAllLibrariesResponse getAllLibraries(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetLibraryDetails {
        GetLibraryDetailsResponse getLibraryDetails(
            Optional<? extends IncludeDetails> includeDetails,
            int sectionKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeleteLibrary {
        DeleteLibraryResponse deleteLibrary(
            int sectionKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetLibraryItems {
        GetLibraryItemsResponse getLibraryItems(
            GetLibraryItemsRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetRefreshLibraryMetadata {
        GetRefreshLibraryMetadataResponse getRefreshLibraryMetadata(
            Optional<? extends Force> force,
            int sectionKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSearchLibrary {
        GetSearchLibraryResponse getSearchLibrary(
            int sectionKey,
            GetSearchLibraryQueryParamType type,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSearchAllLibraries {
        GetSearchAllLibrariesResponse getSearchAllLibraries(
            GetSearchAllLibrariesRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMetaDataByRatingKey {
        GetMetaDataByRatingKeyResponse getMetaDataByRatingKey(
            long ratingKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetMetadataChildren {
        GetMetadataChildrenResponse getMetadataChildren(
            double ratingKey,
            Optional<String> includeElements,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTopWatchedContent {
        GetTopWatchedContentResponse getTopWatchedContent(
            Optional<Long> includeGuids,
            GetTopWatchedContentQueryParamType type,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetOnDeck {
        GetOnDeckResponse getOnDeck(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetWatchList {
        GetWatchListResponse getWatchList(
            GetWatchListRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLogLine {
        LogLineResponse logLine(
            Level level,
            String message,
            String source,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallLogMultiLine {
        LogMultiLineResponse logMultiLine(
            String request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallEnablePaperTrail {
        EnablePaperTrailResponse enablePaperTrail(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCreatePlaylist {
        CreatePlaylistResponse createPlaylist(
            CreatePlaylistRequest request,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPlaylists {
        GetPlaylistsResponse getPlaylists(
            Optional<? extends PlaylistType> playlistType,
            Optional<? extends QueryParamSmart> smart,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPlaylist {
        GetPlaylistResponse getPlaylist(
            double playlistID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallDeletePlaylist {
        DeletePlaylistResponse deletePlaylist(
            double playlistID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUpdatePlaylist {
        UpdatePlaylistResponse updatePlaylist(
            double playlistID,
            Optional<String> title,
            Optional<String> summary,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetPlaylistContents {
        GetPlaylistContentsResponse getPlaylistContents(
            double playlistID,
            GetPlaylistContentsQueryParamType type,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallClearPlaylistContents {
        ClearPlaylistContentsResponse clearPlaylistContents(
            double playlistID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallAddPlaylistContents {
        AddPlaylistContentsResponse addPlaylistContents(
            double playlistID,
            String uri,
            Optional<Double> playQueueID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallUploadPlaylist {
        UploadPlaylistResponse uploadPlaylist(
            String path,
            QueryParamForce force,
            long sectionID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTransientToken {
        GetTransientTokenResponse getTransientToken(
            GetTransientTokenQueryParamType type,
            Scope scope,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSourceConnectionInformation {
        GetSourceConnectionInformationResponse getSourceConnectionInformation(
            String source,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTokenDetails {
        GetTokenDetailsResponse getTokenDetails(
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallPostUsersSignInData {
        PostUsersSignInDataResponse postUsersSignInData(
            PostUsersSignInDataRequest request,
            Optional<String> serverURL,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetStatistics {
        GetStatisticsResponse getStatistics(
            Optional<Long> timespan,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetResourcesStatistics {
        GetResourcesStatisticsResponse getResourcesStatistics(
            Optional<Long> timespan,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetBandwidthStatistics {
        GetBandwidthStatisticsResponse getBandwidthStatistics(
            Optional<Long> timespan,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSessions {
        GetSessionsResponse getSessions(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetSessionHistory {
        GetSessionHistoryResponse getSessionHistory(
            Optional<String> sort,
            Optional<Long> accountId,
            Optional<? extends QueryParamFilter> filter,
            Optional<Long> librarySectionID,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetTranscodeSessions {
        GetTranscodeSessionsResponse getTranscodeSessions(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallStopTranscodeSession {
        StopTranscodeSessionResponse stopTranscodeSession(
            String sessionKey,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallGetUpdateStatus {
        GetUpdateStatusResponse getUpdateStatus(
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallCheckForUpdates {
        CheckForUpdatesResponse checkForUpdates(
            Optional<? extends Download> download,
            Optional<Options> options) throws Exception;
    }


    public interface MethodCallApplyUpdates {
        ApplyUpdatesResponse applyUpdates(
            Optional<? extends Tonight> tonight,
            Optional<? extends Skip> skip,
            Optional<Options> options) throws Exception;
    }


}
