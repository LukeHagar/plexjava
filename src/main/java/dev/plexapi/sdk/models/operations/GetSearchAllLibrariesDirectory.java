/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import dev.plexapi.sdk.utils.LazySingletonValue;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetSearchAllLibrariesDirectory {

    /**
     * The unique identifier path for the search result item.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The identifier for the library section.
     */
    @JsonProperty("librarySectionID")
    private long librarySectionID;

    /**
     * The key corresponding to the library section.
     */
    @JsonProperty("librarySectionKey")
    private String librarySectionKey;

    /**
     * The title of the library section.
     */
    @JsonProperty("librarySectionTitle")
    private String librarySectionTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionType")
    private Optional<Long> librarySectionType;

    /**
     * The type of the directory.
     */
    @JsonProperty("type")
    private String type;

    @JsonProperty("id")
    private long id;

    /**
     * The filter string used to query this specific item in the library.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private Optional<String> filter;

    @JsonProperty("tag")
    private String tag;

    /**
     * The type of tag associated with this search result (e.g., Director, Actor).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagType")
    private Optional<Long> tagType;

    /**
     * The unique identifier for the tag associated with this search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagKey")
    private Optional<String> tagKey;

    /**
     * The URL to the thumbnail image associated with this search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<String> thumb;

    /**
     * The number of items associated with this search result.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Long> count;

    @JsonCreator
    public GetSearchAllLibrariesDirectory(
            @JsonProperty("key") String key,
            @JsonProperty("librarySectionID") long librarySectionID,
            @JsonProperty("librarySectionKey") String librarySectionKey,
            @JsonProperty("librarySectionTitle") String librarySectionTitle,
            @JsonProperty("type") String type,
            @JsonProperty("id") long id,
            @JsonProperty("filter") Optional<String> filter,
            @JsonProperty("tag") String tag,
            @JsonProperty("tagKey") Optional<String> tagKey,
            @JsonProperty("thumb") Optional<String> thumb,
            @JsonProperty("count") Optional<Long> count) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(tag, "tag");
        Utils.checkNotNull(tagKey, "tagKey");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(count, "count");
        this.key = key;
        this.librarySectionID = librarySectionID;
        this.librarySectionKey = librarySectionKey;
        this.librarySectionTitle = librarySectionTitle;
        this.librarySectionType = Builder._SINGLETON_VALUE_LibrarySectionType.value();
        this.type = type;
        this.id = id;
        this.filter = filter;
        this.tag = tag;
        this.tagType = Builder._SINGLETON_VALUE_TagType.value();
        this.tagKey = tagKey;
        this.thumb = thumb;
        this.count = count;
    }
    
    public GetSearchAllLibrariesDirectory(
            String key,
            long librarySectionID,
            String librarySectionKey,
            String librarySectionTitle,
            String type,
            long id,
            String tag) {
        this(key, librarySectionID, librarySectionKey, librarySectionTitle, type, id, Optional.empty(), tag, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The unique identifier path for the search result item.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The identifier for the library section.
     */
    @JsonIgnore
    public long librarySectionID() {
        return librarySectionID;
    }

    /**
     * The key corresponding to the library section.
     */
    @JsonIgnore
    public String librarySectionKey() {
        return librarySectionKey;
    }

    /**
     * The title of the library section.
     */
    @JsonIgnore
    public String librarySectionTitle() {
        return librarySectionTitle;
    }

    @JsonIgnore
    public Optional<Long> librarySectionType() {
        return librarySectionType;
    }

    /**
     * The type of the directory.
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    /**
     * The filter string used to query this specific item in the library.
     */
    @JsonIgnore
    public Optional<String> filter() {
        return filter;
    }

    @JsonIgnore
    public String tag() {
        return tag;
    }

    /**
     * The type of tag associated with this search result (e.g., Director, Actor).
     */
    @JsonIgnore
    public Optional<Long> tagType() {
        return tagType;
    }

    /**
     * The unique identifier for the tag associated with this search result.
     */
    @JsonIgnore
    public Optional<String> tagKey() {
        return tagKey;
    }

    /**
     * The URL to the thumbnail image associated with this search result.
     */
    @JsonIgnore
    public Optional<String> thumb() {
        return thumb;
    }

    /**
     * The number of items associated with this search result.
     */
    @JsonIgnore
    public Optional<Long> count() {
        return count;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The unique identifier path for the search result item.
     */
    public GetSearchAllLibrariesDirectory withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The identifier for the library section.
     */
    public GetSearchAllLibrariesDirectory withLibrarySectionID(long librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    /**
     * The key corresponding to the library section.
     */
    public GetSearchAllLibrariesDirectory withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    /**
     * The title of the library section.
     */
    public GetSearchAllLibrariesDirectory withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    /**
     * The type of the directory.
     */
    public GetSearchAllLibrariesDirectory withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetSearchAllLibrariesDirectory withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The filter string used to query this specific item in the library.
     */
    public GetSearchAllLibrariesDirectory withFilter(String filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }

    /**
     * The filter string used to query this specific item in the library.
     */
    public GetSearchAllLibrariesDirectory withFilter(Optional<String> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    public GetSearchAllLibrariesDirectory withTag(String tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }

    /**
     * The unique identifier for the tag associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withTagKey(String tagKey) {
        Utils.checkNotNull(tagKey, "tagKey");
        this.tagKey = Optional.ofNullable(tagKey);
        return this;
    }

    /**
     * The unique identifier for the tag associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withTagKey(Optional<String> tagKey) {
        Utils.checkNotNull(tagKey, "tagKey");
        this.tagKey = tagKey;
        return this;
    }

    /**
     * The URL to the thumbnail image associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    /**
     * The URL to the thumbnail image associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withThumb(Optional<String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    /**
     * The number of items associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The number of items associated with this search result.
     */
    public GetSearchAllLibrariesDirectory withCount(Optional<Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSearchAllLibrariesDirectory other = (GetSearchAllLibrariesDirectory) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            Objects.deepEquals(this.librarySectionKey, other.librarySectionKey) &&
            Objects.deepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            Objects.deepEquals(this.librarySectionType, other.librarySectionType) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.filter, other.filter) &&
            Objects.deepEquals(this.tag, other.tag) &&
            Objects.deepEquals(this.tagType, other.tagType) &&
            Objects.deepEquals(this.tagKey, other.tagKey) &&
            Objects.deepEquals(this.thumb, other.thumb) &&
            Objects.deepEquals(this.count, other.count);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            librarySectionID,
            librarySectionKey,
            librarySectionTitle,
            librarySectionType,
            type,
            id,
            filter,
            tag,
            tagType,
            tagKey,
            thumb,
            count);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSearchAllLibrariesDirectory.class,
                "key", key,
                "librarySectionID", librarySectionID,
                "librarySectionKey", librarySectionKey,
                "librarySectionTitle", librarySectionTitle,
                "librarySectionType", librarySectionType,
                "type", type,
                "id", id,
                "filter", filter,
                "tag", tag,
                "tagType", tagType,
                "tagKey", tagKey,
                "thumb", thumb,
                "count", count);
    }
    
    public final static class Builder {
 
        private String key;
 
        private Long librarySectionID;
 
        private String librarySectionKey;
 
        private String librarySectionTitle;
 
        private String type;
 
        private Long id;
 
        private Optional<String> filter = Optional.empty();
 
        private String tag;
 
        private Optional<String> tagKey = Optional.empty();
 
        private Optional<String> thumb = Optional.empty();
 
        private Optional<Long> count = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier path for the search result item.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * The identifier for the library section.
         */
        public Builder librarySectionID(long librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        /**
         * The key corresponding to the library section.
         */
        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }

        /**
         * The title of the library section.
         */
        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }

        /**
         * The type of the directory.
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The filter string used to query this specific item in the library.
         */
        public Builder filter(String filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * The filter string used to query this specific item in the library.
         */
        public Builder filter(Optional<String> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        public Builder tag(String tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }

        /**
         * The unique identifier for the tag associated with this search result.
         */
        public Builder tagKey(String tagKey) {
            Utils.checkNotNull(tagKey, "tagKey");
            this.tagKey = Optional.ofNullable(tagKey);
            return this;
        }

        /**
         * The unique identifier for the tag associated with this search result.
         */
        public Builder tagKey(Optional<String> tagKey) {
            Utils.checkNotNull(tagKey, "tagKey");
            this.tagKey = tagKey;
            return this;
        }

        /**
         * The URL to the thumbnail image associated with this search result.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        /**
         * The URL to the thumbnail image associated with this search result.
         */
        public Builder thumb(Optional<String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        /**
         * The number of items associated with this search result.
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of items associated with this search result.
         */
        public Builder count(Optional<Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }
        
        public GetSearchAllLibrariesDirectory build() {
            return new GetSearchAllLibrariesDirectory(
                key,
                librarySectionID,
                librarySectionKey,
                librarySectionTitle,
                type,
                id,
                filter,
                tag,
                tagKey,
                thumb,
                count);
        }

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_LibrarySectionType =
                new LazySingletonValue<>(
                        "librarySectionType",
                        "1",
                        new TypeReference<Optional<Long>>() {});

        private static final LazySingletonValue<Optional<Long>> _SINGLETON_VALUE_TagType =
                new LazySingletonValue<>(
                        "tagType",
                        "4",
                        new TypeReference<Optional<Long>>() {});
    }
}
