/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;


public class GetMediaMetaDataLocation {
    /**
     * The file path for the location.
     */
    @JsonProperty("path")
    private String path;

    @JsonCreator
    public GetMediaMetaDataLocation(
            @JsonProperty("path") String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
    }

    /**
     * The file path for the location.
     */
    @JsonIgnore
    public String path() {
        return path;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The file path for the location.
     */
    public GetMediaMetaDataLocation withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaMetaDataLocation other = (GetMediaMetaDataLocation) o;
        return 
            Utils.enhancedDeepEquals(this.path, other.path);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            path);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaMetaDataLocation.class,
                "path", path);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String path;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The file path for the location.
         */
        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        public GetMediaMetaDataLocation build() {

            return new GetMediaMetaDataLocation(
                path);
        }

    }
}
