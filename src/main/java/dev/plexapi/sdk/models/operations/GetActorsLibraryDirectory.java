/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public class GetActorsLibraryDirectory {

    /**
     * A fast lookup key for the actor relative url.
     */
    @JsonProperty("fastKey")
    private String fastKey;

    /**
     * URL for the thumbnail image of the actor.
     */
    @JsonProperty("thumb")
    private String thumb;

    /**
     * A unique key representing the actor.
     */
    @JsonProperty("key")
    private String key;

    /**
     * The name of the actor.
     */
    @JsonProperty("title")
    private String title;

    @JsonCreator
    public GetActorsLibraryDirectory(
            @JsonProperty("fastKey") String fastKey,
            @JsonProperty("thumb") String thumb,
            @JsonProperty("key") String key,
            @JsonProperty("title") String title) {
        Utils.checkNotNull(fastKey, "fastKey");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(title, "title");
        this.fastKey = fastKey;
        this.thumb = thumb;
        this.key = key;
        this.title = title;
    }

    /**
     * A fast lookup key for the actor relative url.
     */
    @JsonIgnore
    public String fastKey() {
        return fastKey;
    }

    /**
     * URL for the thumbnail image of the actor.
     */
    @JsonIgnore
    public String thumb() {
        return thumb;
    }

    /**
     * A unique key representing the actor.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    /**
     * The name of the actor.
     */
    @JsonIgnore
    public String title() {
        return title;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * A fast lookup key for the actor relative url.
     */
    public GetActorsLibraryDirectory withFastKey(String fastKey) {
        Utils.checkNotNull(fastKey, "fastKey");
        this.fastKey = fastKey;
        return this;
    }

    /**
     * URL for the thumbnail image of the actor.
     */
    public GetActorsLibraryDirectory withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    /**
     * A unique key representing the actor.
     */
    public GetActorsLibraryDirectory withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * The name of the actor.
     */
    public GetActorsLibraryDirectory withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetActorsLibraryDirectory other = (GetActorsLibraryDirectory) o;
        return 
            Objects.deepEquals(this.fastKey, other.fastKey) &&
            Objects.deepEquals(this.thumb, other.thumb) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fastKey,
            thumb,
            key,
            title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetActorsLibraryDirectory.class,
                "fastKey", fastKey,
                "thumb", thumb,
                "key", key,
                "title", title);
    }
    
    public final static class Builder {
 
        private String fastKey;
 
        private String thumb;
 
        private String key;
 
        private String title;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A fast lookup key for the actor relative url.
         */
        public Builder fastKey(String fastKey) {
            Utils.checkNotNull(fastKey, "fastKey");
            this.fastKey = fastKey;
            return this;
        }

        /**
         * URL for the thumbnail image of the actor.
         */
        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        /**
         * A unique key representing the actor.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * The name of the actor.
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }
        
        public GetActorsLibraryDirectory build() {
            return new GetActorsLibraryDirectory(
                fastKey,
                thumb,
                key,
                title);
        }
    }
}
