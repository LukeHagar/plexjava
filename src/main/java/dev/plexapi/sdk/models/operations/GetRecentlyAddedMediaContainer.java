/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package dev.plexapi.sdk.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetRecentlyAddedMediaContainer {

    /**
     * Number of media items returned in this response.
     */
    @JsonProperty("size")
    private int size;

    /**
     * Total number of media items in the library.
     */
    @JsonProperty("totalSize")
    private int totalSize;

    /**
     * Offset value for pagination.
     */
    @JsonProperty("offset")
    private long offset;

    /**
     * Indicates whether syncing is allowed.
     */
    @JsonProperty("allowSync")
    private boolean allowSync;

    /**
     * An plugin identifier for the media container.
     */
    @JsonProperty("identifier")
    private String identifier;

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Meta")
    private Optional<? extends Meta> meta;

    /**
     * An array of metadata items.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Metadata")
    private Optional<? extends List<GetRecentlyAddedMetadata>> metadata;

    @JsonCreator
    public GetRecentlyAddedMediaContainer(
            @JsonProperty("size") int size,
            @JsonProperty("totalSize") int totalSize,
            @JsonProperty("offset") long offset,
            @JsonProperty("allowSync") boolean allowSync,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("Meta") Optional<? extends Meta> meta,
            @JsonProperty("Metadata") Optional<? extends List<GetRecentlyAddedMetadata>> metadata) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(totalSize, "totalSize");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(allowSync, "allowSync");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(meta, "meta");
        Utils.checkNotNull(metadata, "metadata");
        this.size = size;
        this.totalSize = totalSize;
        this.offset = offset;
        this.allowSync = allowSync;
        this.identifier = identifier;
        this.meta = meta;
        this.metadata = metadata;
    }
    
    public GetRecentlyAddedMediaContainer(
            int size,
            int totalSize,
            long offset,
            boolean allowSync,
            String identifier) {
        this(size, totalSize, offset, allowSync, identifier, Optional.empty(), Optional.empty());
    }

    /**
     * Number of media items returned in this response.
     */
    @JsonIgnore
    public int size() {
        return size;
    }

    /**
     * Total number of media items in the library.
     */
    @JsonIgnore
    public int totalSize() {
        return totalSize;
    }

    /**
     * Offset value for pagination.
     */
    @JsonIgnore
    public long offset() {
        return offset;
    }

    /**
     * Indicates whether syncing is allowed.
     */
    @JsonIgnore
    public boolean allowSync() {
        return allowSync;
    }

    /**
     * An plugin identifier for the media container.
     */
    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Meta> meta() {
        return (Optional<Meta>) meta;
    }

    /**
     * An array of metadata items.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GetRecentlyAddedMetadata>> metadata() {
        return (Optional<List<GetRecentlyAddedMetadata>>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of media items returned in this response.
     */
    public GetRecentlyAddedMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * Total number of media items in the library.
     */
    public GetRecentlyAddedMediaContainer withTotalSize(int totalSize) {
        Utils.checkNotNull(totalSize, "totalSize");
        this.totalSize = totalSize;
        return this;
    }

    /**
     * Offset value for pagination.
     */
    public GetRecentlyAddedMediaContainer withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * Indicates whether syncing is allowed.
     */
    public GetRecentlyAddedMediaContainer withAllowSync(boolean allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = allowSync;
        return this;
    }

    /**
     * An plugin identifier for the media container.
     */
    public GetRecentlyAddedMediaContainer withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     * 
     */
    public GetRecentlyAddedMediaContainer withMeta(Meta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    /**
     * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
     * 
     */
    public GetRecentlyAddedMediaContainer withMeta(Optional<? extends Meta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    /**
     * An array of metadata items.
     */
    public GetRecentlyAddedMediaContainer withMetadata(List<GetRecentlyAddedMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * An array of metadata items.
     */
    public GetRecentlyAddedMediaContainer withMetadata(Optional<? extends List<GetRecentlyAddedMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetRecentlyAddedMediaContainer other = (GetRecentlyAddedMediaContainer) o;
        return 
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.totalSize, other.totalSize) &&
            Objects.deepEquals(this.offset, other.offset) &&
            Objects.deepEquals(this.allowSync, other.allowSync) &&
            Objects.deepEquals(this.identifier, other.identifier) &&
            Objects.deepEquals(this.meta, other.meta) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            size,
            totalSize,
            offset,
            allowSync,
            identifier,
            meta,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetRecentlyAddedMediaContainer.class,
                "size", size,
                "totalSize", totalSize,
                "offset", offset,
                "allowSync", allowSync,
                "identifier", identifier,
                "meta", meta,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Integer size;
 
        private Integer totalSize;
 
        private Long offset;
 
        private Boolean allowSync;
 
        private String identifier;
 
        private Optional<? extends Meta> meta = Optional.empty();
 
        private Optional<? extends List<GetRecentlyAddedMetadata>> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of media items returned in this response.
         */
        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * Total number of media items in the library.
         */
        public Builder totalSize(int totalSize) {
            Utils.checkNotNull(totalSize, "totalSize");
            this.totalSize = totalSize;
            return this;
        }

        /**
         * Offset value for pagination.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        /**
         * Indicates whether syncing is allowed.
         */
        public Builder allowSync(boolean allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = allowSync;
            return this;
        }

        /**
         * An plugin identifier for the media container.
         */
        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        /**
         * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
         * 
         */
        public Builder meta(Meta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        /**
         * The Meta object is only included in the response if the `includeMeta` parameter is set to `1`.
         * 
         */
        public Builder meta(Optional<? extends Meta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        /**
         * An array of metadata items.
         */
        public Builder metadata(List<GetRecentlyAddedMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * An array of metadata items.
         */
        public Builder metadata(Optional<? extends List<GetRecentlyAddedMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public GetRecentlyAddedMediaContainer build() {
            return new GetRecentlyAddedMediaContainer(
                size,
                totalSize,
                offset,
                allowSync,
                identifier,
                meta,
                metadata);
        }
    }
}

