/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;

/**
 * Marker
 * 
 * <p>The final status of the marker
 */
public class Marker {

    @JsonProperty("id")
    private long id;


    @JsonProperty("type")
    private String type;


    @JsonProperty("startTimeOffset")
    private long startTimeOffset;


    @JsonProperty("endTimeOffset")
    private long endTimeOffset;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("final")
    private Optional<Boolean> final_;

    /**
     * Attributes associated with the marker.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Attributes")
    private Optional<? extends Attributes> attributes;

    @JsonCreator
    public Marker(
            @JsonProperty("id") long id,
            @JsonProperty("type") String type,
            @JsonProperty("startTimeOffset") long startTimeOffset,
            @JsonProperty("endTimeOffset") long endTimeOffset,
            @JsonProperty("final") Optional<Boolean> final_,
            @JsonProperty("Attributes") Optional<? extends Attributes> attributes) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(startTimeOffset, "startTimeOffset");
        Utils.checkNotNull(endTimeOffset, "endTimeOffset");
        Utils.checkNotNull(final_, "final_");
        Utils.checkNotNull(attributes, "attributes");
        this.id = id;
        this.type = type;
        this.startTimeOffset = startTimeOffset;
        this.endTimeOffset = endTimeOffset;
        this.final_ = final_;
        this.attributes = attributes;
    }
    
    public Marker(
            long id,
            String type,
            long startTimeOffset,
            long endTimeOffset) {
        this(id, type, startTimeOffset,
            endTimeOffset, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    @JsonIgnore
    public long startTimeOffset() {
        return startTimeOffset;
    }

    @JsonIgnore
    public long endTimeOffset() {
        return endTimeOffset;
    }

    @JsonIgnore
    public Optional<Boolean> final_() {
        return final_;
    }

    /**
     * Attributes associated with the marker.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Attributes> attributes() {
        return (Optional<Attributes>) attributes;
    }

    public static Builder builder() {
        return new Builder();
    }


    public Marker withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Marker withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Marker withStartTimeOffset(long startTimeOffset) {
        Utils.checkNotNull(startTimeOffset, "startTimeOffset");
        this.startTimeOffset = startTimeOffset;
        return this;
    }

    public Marker withEndTimeOffset(long endTimeOffset) {
        Utils.checkNotNull(endTimeOffset, "endTimeOffset");
        this.endTimeOffset = endTimeOffset;
        return this;
    }

    public Marker withFinal(boolean final_) {
        Utils.checkNotNull(final_, "final_");
        this.final_ = Optional.ofNullable(final_);
        return this;
    }


    public Marker withFinal(Optional<Boolean> final_) {
        Utils.checkNotNull(final_, "final_");
        this.final_ = final_;
        return this;
    }

    /**
     * Attributes associated with the marker.
     */
    public Marker withAttributes(Attributes attributes) {
        Utils.checkNotNull(attributes, "attributes");
        this.attributes = Optional.ofNullable(attributes);
        return this;
    }


    /**
     * Attributes associated with the marker.
     */
    public Marker withAttributes(Optional<? extends Attributes> attributes) {
        Utils.checkNotNull(attributes, "attributes");
        this.attributes = attributes;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Marker other = (Marker) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.startTimeOffset, other.startTimeOffset) &&
            Utils.enhancedDeepEquals(this.endTimeOffset, other.endTimeOffset) &&
            Utils.enhancedDeepEquals(this.final_, other.final_) &&
            Utils.enhancedDeepEquals(this.attributes, other.attributes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, type, startTimeOffset,
            endTimeOffset, final_, attributes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Marker.class,
                "id", id,
                "type", type,
                "startTimeOffset", startTimeOffset,
                "endTimeOffset", endTimeOffset,
                "final_", final_,
                "attributes", attributes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long id;

        private String type;

        private Long startTimeOffset;

        private Long endTimeOffset;

        private Optional<Boolean> final_ = Optional.empty();

        private Optional<? extends Attributes> attributes = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder startTimeOffset(long startTimeOffset) {
            Utils.checkNotNull(startTimeOffset, "startTimeOffset");
            this.startTimeOffset = startTimeOffset;
            return this;
        }


        public Builder endTimeOffset(long endTimeOffset) {
            Utils.checkNotNull(endTimeOffset, "endTimeOffset");
            this.endTimeOffset = endTimeOffset;
            return this;
        }


        public Builder final_(boolean final_) {
            Utils.checkNotNull(final_, "final_");
            this.final_ = Optional.ofNullable(final_);
            return this;
        }

        public Builder final_(Optional<Boolean> final_) {
            Utils.checkNotNull(final_, "final_");
            this.final_ = final_;
            return this;
        }


        /**
         * Attributes associated with the marker.
         */
        public Builder attributes(Attributes attributes) {
            Utils.checkNotNull(attributes, "attributes");
            this.attributes = Optional.ofNullable(attributes);
            return this;
        }

        /**
         * Attributes associated with the marker.
         */
        public Builder attributes(Optional<? extends Attributes> attributes) {
            Utils.checkNotNull(attributes, "attributes");
            this.attributes = attributes;
            return this;
        }

        public Marker build() {

            return new Marker(
                id, type, startTimeOffset,
                endTimeOffset, final_, attributes);
        }

    }
}
