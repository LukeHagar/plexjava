/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.Level;
import dev.plexapi.sdk.models.operations.LogLineRequest;
import dev.plexapi.sdk.operations.LogLine;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Exception;
import java.lang.String;
import java.util.concurrent.CompletableFuture;

public class LogLineRequestBuilder {

    private Level level;
    private String message;
    private String source;
    private final SDKConfiguration sdkConfiguration;

    public LogLineRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public LogLineRequestBuilder level(Level level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    public LogLineRequestBuilder message(String message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public LogLineRequestBuilder source(String source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }


    private LogLineRequest buildRequest() {

        LogLineRequest request = new LogLineRequest(level,
            message,
            source);

        return request;
    }

    public CompletableFuture<LogLineResponse> call() throws Exception {
        
        AsyncRequestOperation<LogLineRequest, LogLineResponse> operation
              = new LogLine.Async(sdkConfiguration);
        LogLineRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }
}
