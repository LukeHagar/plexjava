/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class GetMediaPostersMediaContainer {

    /**
     * Number of media items returned in this response.
     */
    @JsonProperty("size")
    private int size;

    /**
     * The version number for media tags.
     */
    @JsonProperty("mediaTagVersion")
    private long mediaTagVersion;

    /**
     * The prefix used for media tag resource paths.
     */
    @JsonProperty("mediaTagPrefix")
    private String mediaTagPrefix;

    /**
     * An plugin identifier for the media container.
     */
    @JsonProperty("identifier")
    private String identifier;

    @JsonProperty("Metadata")
    private List<GetMediaPostersMetadata> metadata;

    @JsonCreator
    public GetMediaPostersMediaContainer(
            @JsonProperty("size") int size,
            @JsonProperty("mediaTagVersion") long mediaTagVersion,
            @JsonProperty("mediaTagPrefix") String mediaTagPrefix,
            @JsonProperty("identifier") String identifier,
            @JsonProperty("Metadata") List<GetMediaPostersMetadata> metadata) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(metadata, "metadata");
        this.size = size;
        this.mediaTagVersion = mediaTagVersion;
        this.mediaTagPrefix = mediaTagPrefix;
        this.identifier = identifier;
        this.metadata = metadata;
    }

    /**
     * Number of media items returned in this response.
     */
    @JsonIgnore
    public int size() {
        return size;
    }

    /**
     * The version number for media tags.
     */
    @JsonIgnore
    public long mediaTagVersion() {
        return mediaTagVersion;
    }

    /**
     * The prefix used for media tag resource paths.
     */
    @JsonIgnore
    public String mediaTagPrefix() {
        return mediaTagPrefix;
    }

    /**
     * An plugin identifier for the media container.
     */
    @JsonIgnore
    public String identifier() {
        return identifier;
    }

    @JsonIgnore
    public List<GetMediaPostersMetadata> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * Number of media items returned in this response.
     */
    public GetMediaPostersMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    /**
     * The version number for media tags.
     */
    public GetMediaPostersMediaContainer withMediaTagVersion(long mediaTagVersion) {
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        this.mediaTagVersion = mediaTagVersion;
        return this;
    }

    /**
     * The prefix used for media tag resource paths.
     */
    public GetMediaPostersMediaContainer withMediaTagPrefix(String mediaTagPrefix) {
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        this.mediaTagPrefix = mediaTagPrefix;
        return this;
    }

    /**
     * An plugin identifier for the media container.
     */
    public GetMediaPostersMediaContainer withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public GetMediaPostersMediaContainer withMetadata(List<GetMediaPostersMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMediaPostersMediaContainer other = (GetMediaPostersMediaContainer) o;
        return 
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.mediaTagVersion, other.mediaTagVersion) &&
            Objects.deepEquals(this.mediaTagPrefix, other.mediaTagPrefix) &&
            Objects.deepEquals(this.identifier, other.identifier) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            size,
            mediaTagVersion,
            mediaTagPrefix,
            identifier,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMediaPostersMediaContainer.class,
                "size", size,
                "mediaTagVersion", mediaTagVersion,
                "mediaTagPrefix", mediaTagPrefix,
                "identifier", identifier,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Integer size;
 
        private Long mediaTagVersion;
 
        private String mediaTagPrefix;
 
        private String identifier;
 
        private List<GetMediaPostersMetadata> metadata;
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of media items returned in this response.
         */
        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        /**
         * The version number for media tags.
         */
        public Builder mediaTagVersion(long mediaTagVersion) {
            Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
            this.mediaTagVersion = mediaTagVersion;
            return this;
        }

        /**
         * The prefix used for media tag resource paths.
         */
        public Builder mediaTagPrefix(String mediaTagPrefix) {
            Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
            this.mediaTagPrefix = mediaTagPrefix;
            return this;
        }

        /**
         * An plugin identifier for the media container.
         */
        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder metadata(List<GetMediaPostersMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public GetMediaPostersMediaContainer build() {
            return new GetMediaPostersMediaContainer(
                size,
                mediaTagVersion,
                mediaTagPrefix,
                identifier,
                metadata);
        }
    }
}
