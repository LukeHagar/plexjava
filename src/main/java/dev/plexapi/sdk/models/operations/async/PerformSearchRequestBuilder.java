/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk.models.operations.async;

import static dev.plexapi.sdk.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import dev.plexapi.sdk.SDKConfiguration;
import dev.plexapi.sdk.models.operations.PerformSearchRequest;
import dev.plexapi.sdk.operations.PerformSearch;
import dev.plexapi.sdk.utils.LazySingletonValue;
import dev.plexapi.sdk.utils.Utils;
import java.lang.Double;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

public class PerformSearchRequestBuilder {

    private String query;
    private Optional<Double> sectionId = Optional.empty();
    private Optional<Double> limit = Utils.readDefaultOrConstValue(
                            "limit",
                            "3",
                            new TypeReference<Optional<Double>>() {});
    private final SDKConfiguration sdkConfiguration;

    public PerformSearchRequestBuilder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public PerformSearchRequestBuilder query(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }
                
    public PerformSearchRequestBuilder sectionId(double sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = Optional.of(sectionId);
        return this;
    }

    public PerformSearchRequestBuilder sectionId(Optional<Double> sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = sectionId;
        return this;
    }
                
    public PerformSearchRequestBuilder limit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.of(limit);
        return this;
    }

    public PerformSearchRequestBuilder limit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }


    private PerformSearchRequest buildRequest() {
        if (limit == null) {
            limit = _SINGLETON_VALUE_Limit.value();
        }

        PerformSearchRequest request = new PerformSearchRequest(query,
            sectionId,
            limit);

        return request;
    }

    public CompletableFuture<PerformSearchResponse> call() throws Exception {
        
        AsyncRequestOperation<PerformSearchRequest, PerformSearchResponse> operation
              = new PerformSearch.Async(sdkConfiguration);
        PerformSearchRequest request = buildRequest();

        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

    private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_Limit =
            new LazySingletonValue<>(
                    "limit",
                    "3",
                    new TypeReference<Optional<Double>>() {});
}
