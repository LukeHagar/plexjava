/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;
import static dev.plexapi.sdk.operations.Operations.RequestlessOperation;

import dev.plexapi.sdk.models.operations.GetSourceConnectionInformationRequest;
import dev.plexapi.sdk.models.operations.GetSourceConnectionInformationRequestBuilder;
import dev.plexapi.sdk.models.operations.GetSourceConnectionInformationResponse;
import dev.plexapi.sdk.models.operations.GetTokenDetailsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetTokenDetailsResponse;
import dev.plexapi.sdk.models.operations.GetTransientTokenQueryParamType;
import dev.plexapi.sdk.models.operations.GetTransientTokenRequest;
import dev.plexapi.sdk.models.operations.GetTransientTokenRequestBuilder;
import dev.plexapi.sdk.models.operations.GetTransientTokenResponse;
import dev.plexapi.sdk.models.operations.PostUsersSignInDataRequest;
import dev.plexapi.sdk.models.operations.PostUsersSignInDataRequestBuilder;
import dev.plexapi.sdk.models.operations.PostUsersSignInDataResponse;
import dev.plexapi.sdk.models.operations.Scope;
import dev.plexapi.sdk.operations.GetSourceConnectionInformation;
import dev.plexapi.sdk.operations.GetTokenDetails;
import dev.plexapi.sdk.operations.GetTransientToken;
import dev.plexapi.sdk.operations.PostUsersSignInData;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * API Calls regarding authentication for Plex Media Server
 */
public class Authentication {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncAuthentication asyncSDK;

    Authentication(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncAuthentication(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncAuthentication async() {
        return asyncSDK;
    }

    /**
     * Get a Transient Token
     * 
     * <p>This endpoint provides the caller with a temporary token with the same access level as the caller's token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * 
     * @return The call builder
     */
    public GetTransientTokenRequestBuilder getTransientToken() {
        return new GetTransientTokenRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Transient Token
     * 
     * <p>This endpoint provides the caller with a temporary token with the same access level as the caller's token. These tokens are valid for up to 48 hours and are destroyed if the server instance is restarted.
     * 
     * @param type `delegation` - This is the only supported `type` parameter.
     * @param scope `all` - This is the only supported `scope` parameter.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTransientTokenResponse getTransientToken(GetTransientTokenQueryParamType type, Scope scope) throws Exception {
        GetTransientTokenRequest request =
            GetTransientTokenRequest
                .builder()
                .type(type)
                .scope(scope)
                .build();
        RequestOperation<GetTransientTokenRequest, GetTransientTokenResponse> operation
              = new GetTransientToken.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Source Connection Information
     * 
     * <p>If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token.
     * Note: requires Plex Media Server &gt;= 1.15.4.
     * 
     * @return The call builder
     */
    public GetSourceConnectionInformationRequestBuilder getSourceConnectionInformation() {
        return new GetSourceConnectionInformationRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Source Connection Information
     * 
     * <p>If a caller requires connection details and a transient token for a source that is known to the server, for example a cloud media provider or shared PMS, then this endpoint can be called. This endpoint is only accessible with either an admin token or a valid transient token generated from an admin token.
     * Note: requires Plex Media Server &gt;= 1.15.4.
     * 
     * @param source The source identifier with an included prefix.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetSourceConnectionInformationResponse getSourceConnectionInformation(String source) throws Exception {
        GetSourceConnectionInformationRequest request =
            GetSourceConnectionInformationRequest
                .builder()
                .source(source)
                .build();
        RequestOperation<GetSourceConnectionInformationRequest, GetSourceConnectionInformationResponse> operation
              = new GetSourceConnectionInformation.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Token Details
     * 
     * <p>Get the User data from the provided X-Plex-Token
     * 
     * @return The call builder
     */
    public GetTokenDetailsRequestBuilder getTokenDetails() {
        return new GetTokenDetailsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Token Details
     * 
     * <p>Get the User data from the provided X-Plex-Token
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenDetailsResponse getTokenDetailsDirect() throws Exception {
        return getTokenDetails(Optional.empty());
    }

    /**
     * Get Token Details
     * 
     * <p>Get the User data from the provided X-Plex-Token
     * 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenDetailsResponse getTokenDetails(Optional<String> serverURL) throws Exception {
        RequestlessOperation<GetTokenDetailsResponse> operation
            = new GetTokenDetails.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get User Sign In Data
     * 
     * <p>Sign in user with username and password and return user data with Plex authentication token
     * 
     * @return The call builder
     */
    public PostUsersSignInDataRequestBuilder postUsersSignInData() {
        return new PostUsersSignInDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Get User Sign In Data
     * 
     * <p>Sign in user with username and password and return user data with Plex authentication token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostUsersSignInDataResponse postUsersSignInData(PostUsersSignInDataRequest request) throws Exception {
        return postUsersSignInData(request, Optional.empty());
    }

    /**
     * Get User Sign In Data
     * 
     * <p>Sign in user with username and password and return user data with Plex authentication token
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostUsersSignInDataResponse postUsersSignInData(PostUsersSignInDataRequest request, Optional<String> serverURL) throws Exception {
        RequestOperation<PostUsersSignInDataRequest, PostUsersSignInDataResponse> operation
              = new PostUsersSignInData.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
