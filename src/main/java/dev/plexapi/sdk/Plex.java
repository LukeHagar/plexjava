/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestlessOperation;
import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetCompanionsDataRequestBuilder;
import dev.plexapi.sdk.models.operations.GetCompanionsDataResponse;
import dev.plexapi.sdk.models.operations.GetGeoDataRequestBuilder;
import dev.plexapi.sdk.models.operations.GetGeoDataResponse;
import dev.plexapi.sdk.models.operations.GetHomeDataRequestBuilder;
import dev.plexapi.sdk.models.operations.GetHomeDataResponse;
import dev.plexapi.sdk.models.operations.GetPinRequest;
import dev.plexapi.sdk.models.operations.GetPinRequestBuilder;
import dev.plexapi.sdk.models.operations.GetPinResponse;
import dev.plexapi.sdk.models.operations.GetServerResourcesRequest;
import dev.plexapi.sdk.models.operations.GetServerResourcesRequestBuilder;
import dev.plexapi.sdk.models.operations.GetServerResourcesResponse;
import dev.plexapi.sdk.models.operations.GetTokenByPinIdRequest;
import dev.plexapi.sdk.models.operations.GetTokenByPinIdRequestBuilder;
import dev.plexapi.sdk.models.operations.GetTokenByPinIdResponse;
import dev.plexapi.sdk.models.operations.GetUserFriendsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetUserFriendsResponse;
import dev.plexapi.sdk.models.operations.IncludeHttps;
import dev.plexapi.sdk.models.operations.IncludeIPv6;
import dev.plexapi.sdk.models.operations.IncludeRelay;
import dev.plexapi.sdk.operations.GetCompanionsData;
import dev.plexapi.sdk.operations.GetGeoData;
import dev.plexapi.sdk.operations.GetHomeData;
import dev.plexapi.sdk.operations.GetPin;
import dev.plexapi.sdk.operations.GetServerResources;
import dev.plexapi.sdk.operations.GetTokenByPinId;
import dev.plexapi.sdk.operations.GetUserFriends;
import java.lang.Exception;
import java.lang.String;
import java.util.Optional;

/**
 * API Calls that perform operations directly against https://Plex.tv
 */
public class Plex {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncPlex asyncSDK;

    Plex(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncPlex(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncPlex async() {
        return asyncSDK;
    }

    /**
     * Get Companions Data
     * 
     * <p>Get Companions Data
     * 
     * @return The call builder
     */
    public GetCompanionsDataRequestBuilder getCompanionsData() {
        return new GetCompanionsDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Companions Data
     * 
     * <p>Get Companions Data
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompanionsDataResponse getCompanionsDataDirect() throws Exception {
        return getCompanionsData(Optional.empty());
    }

    /**
     * Get Companions Data
     * 
     * <p>Get Companions Data
     * 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompanionsDataResponse getCompanionsData(Optional<String> serverURL) throws Exception {
        RequestlessOperation<GetCompanionsDataResponse> operation
            = new GetCompanionsData.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get list of friends of the user logged in
     * 
     * <p>Get friends of provided auth token.
     * 
     * @return The call builder
     */
    public GetUserFriendsRequestBuilder getUserFriends() {
        return new GetUserFriendsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get list of friends of the user logged in
     * 
     * <p>Get friends of provided auth token.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserFriendsResponse getUserFriendsDirect() throws Exception {
        return getUserFriends(Optional.empty());
    }

    /**
     * Get list of friends of the user logged in
     * 
     * <p>Get friends of provided auth token.
     * 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUserFriendsResponse getUserFriends(Optional<String> serverURL) throws Exception {
        RequestlessOperation<GetUserFriendsResponse> operation
            = new GetUserFriends.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Geo Data
     * 
     * <p>Returns the geolocation and locale data of the caller
     * 
     * @return The call builder
     */
    public GetGeoDataRequestBuilder getGeoData() {
        return new GetGeoDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Geo Data
     * 
     * <p>Returns the geolocation and locale data of the caller
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGeoDataResponse getGeoDataDirect() throws Exception {
        return getGeoData(Optional.empty());
    }

    /**
     * Get Geo Data
     * 
     * <p>Returns the geolocation and locale data of the caller
     * 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetGeoDataResponse getGeoData(Optional<String> serverURL) throws Exception {
        RequestlessOperation<GetGeoDataResponse> operation
            = new GetGeoData.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Plex Home Data
     * 
     * <p>Retrieves the home data for the authenticated user, including details like home ID, name, guest access information, and subscription status.
     * 
     * @return The call builder
     */
    public GetHomeDataRequestBuilder getHomeData() {
        return new GetHomeDataRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Plex Home Data
     * 
     * <p>Retrieves the home data for the authenticated user, including details like home ID, name, guest access information, and subscription status.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetHomeDataResponse getHomeDataDirect() throws Exception {
        RequestlessOperation<GetHomeDataResponse> operation
            = new GetHomeData.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest());
    }

    /**
     * Get Server Resources
     * 
     * <p>Get Plex server access tokens and server connections
     * 
     * @return The call builder
     */
    public GetServerResourcesRequestBuilder getServerResources() {
        return new GetServerResourcesRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Server Resources
     * 
     * <p>Get Plex server access tokens and server connections
     * 
     * @param clientID An opaque identifier unique to the client (UUID, serial number, or other unique device ID)
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerResourcesResponse getServerResources(String clientID) throws Exception {
        return getServerResources(Optional.empty(), Optional.empty(), Optional.empty(),
            clientID, Optional.empty());
    }

    /**
     * Get Server Resources
     * 
     * <p>Get Plex server access tokens and server connections
     * 
     * @param includeHttps Include Https entries in the results
     * @param includeRelay Include Relay addresses in the results 
     *         E.g: https://10-0-0-25.bbf8e10c7fa20447cacee74cd9914cde.plex.direct:32400
     *         
     * @param includeIPv6 Include IPv6 entries in the results
     * @param clientID An opaque identifier unique to the client (UUID, serial number, or other unique device ID)
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetServerResourcesResponse getServerResources(
            Optional<? extends IncludeHttps> includeHttps, Optional<? extends IncludeRelay> includeRelay,
            Optional<? extends IncludeIPv6> includeIPv6, String clientID,
            Optional<String> serverURL) throws Exception {
        GetServerResourcesRequest request =
            GetServerResourcesRequest
                .builder()
                .includeHttps(includeHttps)
                .includeRelay(includeRelay)
                .includeIPv6(includeIPv6)
                .clientID(clientID)
                .build();
        RequestOperation<GetServerResourcesRequest, GetServerResourcesResponse> operation
              = new GetServerResources.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get a Pin
     * 
     * <p>Retrieve a Pin ID from Plex.tv to use for authentication flows
     * 
     * @return The call builder
     */
    public GetPinRequestBuilder getPin() {
        return new GetPinRequestBuilder(sdkConfiguration);
    }

    /**
     * Get a Pin
     * 
     * <p>Retrieve a Pin ID from Plex.tv to use for authentication flows
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPinResponse getPin(GetPinRequest request) throws Exception {
        return getPin(request, Optional.empty());
    }

    /**
     * Get a Pin
     * 
     * <p>Retrieve a Pin ID from Plex.tv to use for authentication flows
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetPinResponse getPin(GetPinRequest request, Optional<String> serverURL) throws Exception {
        RequestOperation<GetPinRequest, GetPinResponse> operation
              = new GetPin.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Access Token by PinId
     * 
     * <p>Retrieve an Access Token from Plex.tv after the Pin has been authenticated
     * 
     * @return The call builder
     */
    public GetTokenByPinIdRequestBuilder getTokenByPinId() {
        return new GetTokenByPinIdRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Access Token by PinId
     * 
     * <p>Retrieve an Access Token from Plex.tv after the Pin has been authenticated
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenByPinIdResponse getTokenByPinId(GetTokenByPinIdRequest request) throws Exception {
        return getTokenByPinId(request, Optional.empty());
    }

    /**
     * Get Access Token by PinId
     * 
     * <p>Retrieve an Access Token from Plex.tv after the Pin has been authenticated
     * 
     * @param request The request object containing all the parameters for the API call.
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTokenByPinIdResponse getTokenByPinId(GetTokenByPinIdRequest request, Optional<String> serverURL) throws Exception {
        RequestOperation<GetTokenByPinIdRequest, GetTokenByPinIdResponse> operation
              = new GetTokenByPinId.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
