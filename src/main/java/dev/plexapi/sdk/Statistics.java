/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package dev.plexapi.sdk;

import static dev.plexapi.sdk.operations.Operations.RequestOperation;

import dev.plexapi.sdk.models.operations.GetBandwidthStatisticsRequest;
import dev.plexapi.sdk.models.operations.GetBandwidthStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetBandwidthStatisticsResponse;
import dev.plexapi.sdk.models.operations.GetResourcesStatisticsRequest;
import dev.plexapi.sdk.models.operations.GetResourcesStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetResourcesStatisticsResponse;
import dev.plexapi.sdk.models.operations.GetStatisticsRequest;
import dev.plexapi.sdk.models.operations.GetStatisticsRequestBuilder;
import dev.plexapi.sdk.models.operations.GetStatisticsResponse;
import dev.plexapi.sdk.operations.GetBandwidthStatistics;
import dev.plexapi.sdk.operations.GetResourcesStatistics;
import dev.plexapi.sdk.operations.GetStatistics;
import java.lang.Exception;
import java.lang.Long;
import java.util.Optional;

/**
 * API Calls that perform operations with Plex Media Server Statistics
 */
public class Statistics {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncStatistics asyncSDK;

    Statistics(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncStatistics(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncStatistics async() {
        return asyncSDK;
    }

    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @return The call builder
     */
    public GetStatisticsRequestBuilder getStatistics() {
        return new GetStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetStatisticsResponse getStatisticsDirect() throws Exception {
        return getStatistics(Optional.empty());
    }

    /**
     * Get Media Statistics
     * 
     * <p>This will return the media statistics for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetStatisticsResponse getStatistics(Optional<Long> timespan) throws Exception {
        GetStatisticsRequest request =
            GetStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        RequestOperation<GetStatisticsRequest, GetStatisticsResponse> operation
              = new GetStatistics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @return The call builder
     */
    public GetResourcesStatisticsRequestBuilder getResourcesStatistics() {
        return new GetResourcesStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetResourcesStatisticsResponse getResourcesStatisticsDirect() throws Exception {
        return getResourcesStatistics(Optional.empty());
    }

    /**
     * Get Resources Statistics
     * 
     * <p>This will return the resources for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetResourcesStatisticsResponse getResourcesStatistics(Optional<Long> timespan) throws Exception {
        GetResourcesStatisticsRequest request =
            GetResourcesStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        RequestOperation<GetResourcesStatisticsRequest, GetResourcesStatisticsResponse> operation
              = new GetResourcesStatistics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @return The call builder
     */
    public GetBandwidthStatisticsRequestBuilder getBandwidthStatistics() {
        return new GetBandwidthStatisticsRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBandwidthStatisticsResponse getBandwidthStatisticsDirect() throws Exception {
        return getBandwidthStatistics(Optional.empty());
    }

    /**
     * Get Bandwidth Statistics
     * 
     * <p>This will return the bandwidth statistics for the server
     * 
     * @param timespan The timespan to retrieve statistics for
     *         the exact meaning of this parameter is not known
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetBandwidthStatisticsResponse getBandwidthStatistics(Optional<Long> timespan) throws Exception {
        GetBandwidthStatisticsRequest request =
            GetBandwidthStatisticsRequest
                .builder()
                .timespan(timespan)
                .build();
        RequestOperation<GetBandwidthStatisticsRequest, GetBandwidthStatisticsResponse> operation
              = new GetBandwidthStatistics.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
