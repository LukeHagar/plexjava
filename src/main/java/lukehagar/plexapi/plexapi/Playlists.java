/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import lukehagar.plexapi.plexapi.models.errors.SDKError;
import lukehagar.plexapi.plexapi.models.operations.SDKMethodInterfaces.*;
import lukehagar.plexapi.plexapi.utils.HTTPClient;
import lukehagar.plexapi.plexapi.utils.HTTPRequest;
import lukehagar.plexapi.plexapi.utils.JSON;
import lukehagar.plexapi.plexapi.utils.Utils;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Playlists are ordered collections of media. They can be dumb (just a list of media) or smart (based on a media query, such as "all albums from 2017"). 
 * They can be organized in (optionally nesting) folders.
 * Retrieving a playlist, or its items, will trigger a refresh of its metadata. 
 * This may cause the duration and number of items to change.
 * 
 */
public class Playlists implements
            MethodCallCreatePlaylist,
            MethodCallGetPlaylists,
            MethodCallGetPlaylist,
            MethodCallDeletePlaylist,
            MethodCallUpdatePlaylist,
            MethodCallGetPlaylistContents,
            MethodCallClearPlaylistContents,
            MethodCallAddPlaylistContents,
            MethodCallUploadPlaylist {

    private final SDKConfiguration sdkConfiguration;

    Playlists(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public lukehagar.plexapi.plexapi.models.operations.CreatePlaylistRequestBuilder createPlaylist() {
        return new lukehagar.plexapi.plexapi.models.operations.CreatePlaylistRequestBuilder(this);
    }

    /**
     * Create a Playlist
     * Create a new playlist. By default the playlist is blank. To create a playlist along with a first item, pass:
     * - `uri` - The content URI for what we're playing (e.g. `server://1234/com.plexapp.plugins.library/library/metadata/1`).
     * - `playQueueID` - To create a playlist from an existing play queue.
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponse createPlaylist(
            lukehagar.plexapi.plexapi.models.operations.CreatePlaylistRequest request) throws Exception {

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/playlists");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.CreatePlaylistRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.CreatePlaylistResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.CreatePlaylistPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.CreatePlaylistPlaylistsResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistsRequestBuilder getPlaylists() {
        return new lukehagar.plexapi.plexapi.models.operations.GetPlaylistsRequestBuilder(this);
    }

    /**
     * Get All Playlists
     * Get All Playlists given the specified filters.
     * @param playlistType limit to a type of playlist.
     * @param smart type of playlists to return (default is all).
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponse getPlaylists(
            Optional<? extends lukehagar.plexapi.plexapi.models.operations.PlaylistType> playlistType,
            Optional<? extends lukehagar.plexapi.plexapi.models.operations.QueryParamSmart> smart) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistsRequest request =
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistsRequest
                .builder()
                .playlistType(playlistType)
                .smart(smart)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/playlists");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistsResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistsPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistsPlaylistsResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistRequestBuilder getPlaylist() {
        return new lukehagar.plexapi.plexapi.models.operations.GetPlaylistRequestBuilder(this);
    }

    /**
     * Retrieve Playlist
     * Gets detailed metadata for a playlist. A playlist for many purposes (rating, editing metadata, tagging), can be treated like a regular metadata item:
     * Smart playlist details contain the `content` attribute. This is the content URI for the generator. This can then be parsed by a client to provide smart playlist editing.
     * 
     * @param playlistID the ID of the playlist
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponse getPlaylist(
            double playlistID) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistRequest request =
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistRequest
                .builder()
                .playlistID(playlistID)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistRequest.class,
                baseUrl,
                "/playlists/{playlistID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistPlaylistsResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.DeletePlaylistRequestBuilder deletePlaylist() {
        return new lukehagar.plexapi.plexapi.models.operations.DeletePlaylistRequestBuilder(this);
    }

    /**
     * Deletes a Playlist
     * This endpoint will delete a playlist
     * 
     * @param playlistID the ID of the playlist
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponse deletePlaylist(
            double playlistID) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.DeletePlaylistRequest request =
            lukehagar.plexapi.plexapi.models.operations.DeletePlaylistRequest
                .builder()
                .playlistID(playlistID)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.DeletePlaylistRequest.class,
                baseUrl,
                "/playlists/{playlistID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.DeletePlaylistResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequestBuilder updatePlaylist() {
        return new lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequestBuilder(this);
    }

    /**
     * Update a Playlist
     * From PMS version 1.9.1 clients can also edit playlist metadata using this endpoint as they would via `PUT /library/metadata/{playlistID}`
     * 
     * @param playlistID the ID of the playlist
     * @param title name of the playlist
     * @param summary summary description of the playlist
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponse updatePlaylist(
            double playlistID,
            Optional<? extends String> title,
            Optional<? extends String> summary) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequest request =
            lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequest
                .builder()
                .playlistID(playlistID)
                .title(title)
                .summary(summary)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequest.class,
                baseUrl,
                "/playlists/{playlistID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.UpdatePlaylistResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequestBuilder getPlaylistContents() {
        return new lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequestBuilder(this);
    }

    /**
     * Retrieve Playlist Contents
     * Gets the contents of a playlist. Should be paged by clients via standard mechanisms. 
     * By default leaves are returned (e.g. episodes, movies). In order to return other types you can use the `type` parameter. 
     * For example, you could use this to display a list of recently added albums vis a smart playlist. 
     * Note that for dumb playlists, items have a `playlistItemID` attribute which is used for deleting or moving items.
     * 
     * @param playlistID the ID of the playlist
     * @param type the metadata type of the item to return
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponse getPlaylistContents(
            double playlistID,
            double type) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequest request =
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequest
                .builder()
                .playlistID(playlistID)
                .type(type)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequest.class,
                baseUrl,
                "/playlists/{playlistID}/items",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPlaylistContentsPlaylistsResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsRequestBuilder clearPlaylistContents() {
        return new lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsRequestBuilder(this);
    }

    /**
     * Delete Playlist Contents
     * Clears a playlist, only works with dumb playlists. Returns the playlist.
     * 
     * @param playlistID the ID of the playlist
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponse clearPlaylistContents(
            double playlistID) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsRequest request =
            lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsRequest
                .builder()
                .playlistID(playlistID)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsRequest.class,
                baseUrl,
                "/playlists/{playlistID}/items",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.ClearPlaylistContentsResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequestBuilder addPlaylistContents() {
        return new lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequestBuilder(this);
    }

    /**
     * Adding to a Playlist
     * Adds a generator to a playlist, same parameters as the POST to create. With a dumb playlist, this adds the specified items to the playlist.
     * With a smart playlist, passing a new `uri` parameter replaces the rules for the playlist. Returns the playlist.
     * 
     * @param playlistID the ID of the playlist
     * @param uri the content URI for the playlist
     * @param playQueueID the play queue to add to a playlist
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponse addPlaylistContents(
            double playlistID,
            String uri,
            Optional<? extends Double> playQueueID) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequest request =
            lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequest
                .builder()
                .playlistID(playlistID)
                .uri(uri)
                .playQueueID(playQueueID)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequest.class,
                baseUrl,
                "/playlists/{playlistID}/items",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsPlaylistsResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.AddPlaylistContentsPlaylistsResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.UploadPlaylistRequestBuilder uploadPlaylist() {
        return new lukehagar.plexapi.plexapi.models.operations.UploadPlaylistRequestBuilder(this);
    }

    /**
     * Upload Playlist
     * Imports m3u playlists by passing a path on the server to scan for m3u-formatted playlist files, or a path to a single playlist file.
     * 
     * @param path absolute path to a directory on the server where m3u files are stored, or the absolute path to a playlist file on the server. 
    If the `path` argument is a directory, that path will be scanned for playlist files to be processed. 
    Each file in that directory creates a separate playlist, with a name based on the filename of the file that created it. 
    The GUID of each playlist is based on the filename. 
    If the `path` argument is a file, that file will be used to create a new playlist, with the name based on the filename of the file that created it. 
    The GUID of each playlist is based on the filename.

     * @param force Force overwriting of duplicate playlists.  
    By default, a playlist file uploaded with the same path will overwrite the existing playlist. 
    The `force` argument is used to disable overwriting.  
    If the `force` argument is set to 0, a new playlist will be created suffixed with the date and time that the duplicate was uploaded.

     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponse uploadPlaylist(
            String path,
            lukehagar.plexapi.plexapi.models.operations.Force force) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.UploadPlaylistRequest request =
            lukehagar.plexapi.plexapi.models.operations.UploadPlaylistRequest
                .builder()
                .path(path)
                .force(force)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/playlists/upload");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.UploadPlaylistRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.UploadPlaylistResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
