/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetSearchResultsRequest {

    /**
     * The search query string to use
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private String query;

    public GetSearchResultsRequest(
            String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
    }

    /**
     * The search query string to use
     */
    public String query() {
        return query;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The search query string to use
     */
    public GetSearchResultsRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSearchResultsRequest other = (GetSearchResultsRequest) o;
        return 
            java.util.Objects.deepEquals(this.query, other.query);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            query);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSearchResultsRequest.class,
                "query", query);
    }
    
    public final static class Builder {
 
        private String query;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The search query string to use
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public GetSearchResultsRequest build() {
            return new GetSearchResultsRequest(
                query);
        }
    }
}

