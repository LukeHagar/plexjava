/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class Player {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends String> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineIdentifier")
    private Optional<? extends String> machineIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private Optional<? extends String> model;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    private Optional<? extends String> platform;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformVersion")
    private Optional<? extends String> platformVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("product")
    private Optional<? extends String> product;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    private Optional<? extends String> profile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("remotePublicAddress")
    private Optional<? extends String> remotePublicAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("local")
    private Optional<? extends Boolean> local;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("relayed")
    private Optional<? extends Boolean> relayed;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secure")
    private Optional<? extends Boolean> secure;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userID")
    private Optional<? extends Integer> userID;

    @JsonCreator
    public Player(
            @JsonProperty("address") Optional<? extends String> address,
            @JsonProperty("machineIdentifier") Optional<? extends String> machineIdentifier,
            @JsonProperty("model") Optional<? extends String> model,
            @JsonProperty("platform") Optional<? extends String> platform,
            @JsonProperty("platformVersion") Optional<? extends String> platformVersion,
            @JsonProperty("product") Optional<? extends String> product,
            @JsonProperty("profile") Optional<? extends String> profile,
            @JsonProperty("remotePublicAddress") Optional<? extends String> remotePublicAddress,
            @JsonProperty("state") Optional<? extends String> state,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("local") Optional<? extends Boolean> local,
            @JsonProperty("relayed") Optional<? extends Boolean> relayed,
            @JsonProperty("secure") Optional<? extends Boolean> secure,
            @JsonProperty("userID") Optional<? extends Integer> userID) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(platform, "platform");
        Utils.checkNotNull(platformVersion, "platformVersion");
        Utils.checkNotNull(product, "product");
        Utils.checkNotNull(profile, "profile");
        Utils.checkNotNull(remotePublicAddress, "remotePublicAddress");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(local, "local");
        Utils.checkNotNull(relayed, "relayed");
        Utils.checkNotNull(secure, "secure");
        Utils.checkNotNull(userID, "userID");
        this.address = address;
        this.machineIdentifier = machineIdentifier;
        this.model = model;
        this.platform = platform;
        this.platformVersion = platformVersion;
        this.product = product;
        this.profile = profile;
        this.remotePublicAddress = remotePublicAddress;
        this.state = state;
        this.title = title;
        this.version = version;
        this.local = local;
        this.relayed = relayed;
        this.secure = secure;
        this.userID = userID;
    }
    
    public Player() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> address() {
        return (Optional<String>) address;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> machineIdentifier() {
        return (Optional<String>) machineIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> model() {
        return (Optional<String>) model;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> platform() {
        return (Optional<String>) platform;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> platformVersion() {
        return (Optional<String>) platformVersion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> product() {
        return (Optional<String>) product;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> profile() {
        return (Optional<String>) profile;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> remotePublicAddress() {
        return (Optional<String>) remotePublicAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> state() {
        return (Optional<String>) state;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> version() {
        return (Optional<String>) version;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> local() {
        return (Optional<Boolean>) local;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> relayed() {
        return (Optional<Boolean>) relayed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> secure() {
        return (Optional<Boolean>) secure;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> userID() {
        return (Optional<Integer>) userID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Player withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public Player withAddress(Optional<? extends String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public Player withMachineIdentifier(String machineIdentifier) {
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        this.machineIdentifier = Optional.ofNullable(machineIdentifier);
        return this;
    }

    public Player withMachineIdentifier(Optional<? extends String> machineIdentifier) {
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        this.machineIdentifier = machineIdentifier;
        return this;
    }

    public Player withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }

    public Player withModel(Optional<? extends String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    public Player withPlatform(String platform) {
        Utils.checkNotNull(platform, "platform");
        this.platform = Optional.ofNullable(platform);
        return this;
    }

    public Player withPlatform(Optional<? extends String> platform) {
        Utils.checkNotNull(platform, "platform");
        this.platform = platform;
        return this;
    }

    public Player withPlatformVersion(String platformVersion) {
        Utils.checkNotNull(platformVersion, "platformVersion");
        this.platformVersion = Optional.ofNullable(platformVersion);
        return this;
    }

    public Player withPlatformVersion(Optional<? extends String> platformVersion) {
        Utils.checkNotNull(platformVersion, "platformVersion");
        this.platformVersion = platformVersion;
        return this;
    }

    public Player withProduct(String product) {
        Utils.checkNotNull(product, "product");
        this.product = Optional.ofNullable(product);
        return this;
    }

    public Player withProduct(Optional<? extends String> product) {
        Utils.checkNotNull(product, "product");
        this.product = product;
        return this;
    }

    public Player withProfile(String profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = Optional.ofNullable(profile);
        return this;
    }

    public Player withProfile(Optional<? extends String> profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = profile;
        return this;
    }

    public Player withRemotePublicAddress(String remotePublicAddress) {
        Utils.checkNotNull(remotePublicAddress, "remotePublicAddress");
        this.remotePublicAddress = Optional.ofNullable(remotePublicAddress);
        return this;
    }

    public Player withRemotePublicAddress(Optional<? extends String> remotePublicAddress) {
        Utils.checkNotNull(remotePublicAddress, "remotePublicAddress");
        this.remotePublicAddress = remotePublicAddress;
        return this;
    }

    public Player withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public Player withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public Player withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public Player withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Player withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public Player withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    public Player withLocal(boolean local) {
        Utils.checkNotNull(local, "local");
        this.local = Optional.ofNullable(local);
        return this;
    }

    public Player withLocal(Optional<? extends Boolean> local) {
        Utils.checkNotNull(local, "local");
        this.local = local;
        return this;
    }

    public Player withRelayed(boolean relayed) {
        Utils.checkNotNull(relayed, "relayed");
        this.relayed = Optional.ofNullable(relayed);
        return this;
    }

    public Player withRelayed(Optional<? extends Boolean> relayed) {
        Utils.checkNotNull(relayed, "relayed");
        this.relayed = relayed;
        return this;
    }

    public Player withSecure(boolean secure) {
        Utils.checkNotNull(secure, "secure");
        this.secure = Optional.ofNullable(secure);
        return this;
    }

    public Player withSecure(Optional<? extends Boolean> secure) {
        Utils.checkNotNull(secure, "secure");
        this.secure = secure;
        return this;
    }

    public Player withUserID(int userID) {
        Utils.checkNotNull(userID, "userID");
        this.userID = Optional.ofNullable(userID);
        return this;
    }

    public Player withUserID(Optional<? extends Integer> userID) {
        Utils.checkNotNull(userID, "userID");
        this.userID = userID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Player other = (Player) o;
        return 
            java.util.Objects.deepEquals(this.address, other.address) &&
            java.util.Objects.deepEquals(this.machineIdentifier, other.machineIdentifier) &&
            java.util.Objects.deepEquals(this.model, other.model) &&
            java.util.Objects.deepEquals(this.platform, other.platform) &&
            java.util.Objects.deepEquals(this.platformVersion, other.platformVersion) &&
            java.util.Objects.deepEquals(this.product, other.product) &&
            java.util.Objects.deepEquals(this.profile, other.profile) &&
            java.util.Objects.deepEquals(this.remotePublicAddress, other.remotePublicAddress) &&
            java.util.Objects.deepEquals(this.state, other.state) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.local, other.local) &&
            java.util.Objects.deepEquals(this.relayed, other.relayed) &&
            java.util.Objects.deepEquals(this.secure, other.secure) &&
            java.util.Objects.deepEquals(this.userID, other.userID);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            address,
            machineIdentifier,
            model,
            platform,
            platformVersion,
            product,
            profile,
            remotePublicAddress,
            state,
            title,
            version,
            local,
            relayed,
            secure,
            userID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Player.class,
                "address", address,
                "machineIdentifier", machineIdentifier,
                "model", model,
                "platform", platform,
                "platformVersion", platformVersion,
                "product", product,
                "profile", profile,
                "remotePublicAddress", remotePublicAddress,
                "state", state,
                "title", title,
                "version", version,
                "local", local,
                "relayed", relayed,
                "secure", secure,
                "userID", userID);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> address = Optional.empty();
 
        private Optional<? extends String> machineIdentifier = Optional.empty();
 
        private Optional<? extends String> model = Optional.empty();
 
        private Optional<? extends String> platform = Optional.empty();
 
        private Optional<? extends String> platformVersion = Optional.empty();
 
        private Optional<? extends String> product = Optional.empty();
 
        private Optional<? extends String> profile = Optional.empty();
 
        private Optional<? extends String> remotePublicAddress = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends Boolean> local = Optional.empty();
 
        private Optional<? extends Boolean> relayed = Optional.empty();
 
        private Optional<? extends Boolean> secure = Optional.empty();
 
        private Optional<? extends Integer> userID = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder machineIdentifier(String machineIdentifier) {
            Utils.checkNotNull(machineIdentifier, "machineIdentifier");
            this.machineIdentifier = Optional.ofNullable(machineIdentifier);
            return this;
        }

        public Builder machineIdentifier(Optional<? extends String> machineIdentifier) {
            Utils.checkNotNull(machineIdentifier, "machineIdentifier");
            this.machineIdentifier = machineIdentifier;
            return this;
        }

        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        public Builder model(Optional<? extends String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        public Builder platform(String platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = Optional.ofNullable(platform);
            return this;
        }

        public Builder platform(Optional<? extends String> platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = platform;
            return this;
        }

        public Builder platformVersion(String platformVersion) {
            Utils.checkNotNull(platformVersion, "platformVersion");
            this.platformVersion = Optional.ofNullable(platformVersion);
            return this;
        }

        public Builder platformVersion(Optional<? extends String> platformVersion) {
            Utils.checkNotNull(platformVersion, "platformVersion");
            this.platformVersion = platformVersion;
            return this;
        }

        public Builder product(String product) {
            Utils.checkNotNull(product, "product");
            this.product = Optional.ofNullable(product);
            return this;
        }

        public Builder product(Optional<? extends String> product) {
            Utils.checkNotNull(product, "product");
            this.product = product;
            return this;
        }

        public Builder profile(String profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = Optional.ofNullable(profile);
            return this;
        }

        public Builder profile(Optional<? extends String> profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = profile;
            return this;
        }

        public Builder remotePublicAddress(String remotePublicAddress) {
            Utils.checkNotNull(remotePublicAddress, "remotePublicAddress");
            this.remotePublicAddress = Optional.ofNullable(remotePublicAddress);
            return this;
        }

        public Builder remotePublicAddress(Optional<? extends String> remotePublicAddress) {
            Utils.checkNotNull(remotePublicAddress, "remotePublicAddress");
            this.remotePublicAddress = remotePublicAddress;
            return this;
        }

        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        public Builder local(boolean local) {
            Utils.checkNotNull(local, "local");
            this.local = Optional.ofNullable(local);
            return this;
        }

        public Builder local(Optional<? extends Boolean> local) {
            Utils.checkNotNull(local, "local");
            this.local = local;
            return this;
        }

        public Builder relayed(boolean relayed) {
            Utils.checkNotNull(relayed, "relayed");
            this.relayed = Optional.ofNullable(relayed);
            return this;
        }

        public Builder relayed(Optional<? extends Boolean> relayed) {
            Utils.checkNotNull(relayed, "relayed");
            this.relayed = relayed;
            return this;
        }

        public Builder secure(boolean secure) {
            Utils.checkNotNull(secure, "secure");
            this.secure = Optional.ofNullable(secure);
            return this;
        }

        public Builder secure(Optional<? extends Boolean> secure) {
            Utils.checkNotNull(secure, "secure");
            this.secure = secure;
            return this;
        }

        public Builder userID(int userID) {
            Utils.checkNotNull(userID, "userID");
            this.userID = Optional.ofNullable(userID);
            return this;
        }

        public Builder userID(Optional<? extends Integer> userID) {
            Utils.checkNotNull(userID, "userID");
            this.userID = userID;
            return this;
        }
        
        public Player build() {
            return new Player(
                address,
                machineIdentifier,
                model,
                platform,
                platformVersion,
                product,
                profile,
                remotePublicAddress,
                state,
                title,
                version,
                local,
                relayed,
                secure,
                userID);
        }
    }
}

