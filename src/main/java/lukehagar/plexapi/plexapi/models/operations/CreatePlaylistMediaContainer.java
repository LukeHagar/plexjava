/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class CreatePlaylistMediaContainer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Integer> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Metadata")
    private Optional<? extends java.util.List<CreatePlaylistMetadata>> metadata;

    @JsonCreator
    public CreatePlaylistMediaContainer(
            @JsonProperty("size") Optional<? extends Integer> size,
            @JsonProperty("Metadata") Optional<? extends java.util.List<CreatePlaylistMetadata>> metadata) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(metadata, "metadata");
        this.size = size;
        this.metadata = metadata;
    }
    
    public CreatePlaylistMediaContainer() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> size() {
        return (Optional<Integer>) size;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<CreatePlaylistMetadata>> metadata() {
        return (Optional<java.util.List<CreatePlaylistMetadata>>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreatePlaylistMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public CreatePlaylistMediaContainer withSize(Optional<? extends Integer> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public CreatePlaylistMediaContainer withMetadata(java.util.List<CreatePlaylistMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CreatePlaylistMediaContainer withMetadata(Optional<? extends java.util.List<CreatePlaylistMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePlaylistMediaContainer other = (CreatePlaylistMediaContainer) o;
        return 
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            size,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePlaylistMediaContainer.class,
                "size", size,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> size = Optional.empty();
 
        private Optional<? extends java.util.List<CreatePlaylistMetadata>> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<? extends Integer> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder metadata(java.util.List<CreatePlaylistMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends java.util.List<CreatePlaylistMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public CreatePlaylistMediaContainer build() {
            return new CreatePlaylistMediaContainer(
                size,
                metadata);
        }
    }
}

