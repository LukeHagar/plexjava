/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetTransientTokenRequest {

    /**
     * `delegation` - This is the only supported `type` parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private GetTransientTokenQueryParamType type;

    /**
     * `all` - This is the only supported `scope` parameter.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scope")
    private Scope scope;

    public GetTransientTokenRequest(
            GetTransientTokenQueryParamType type,
            Scope scope) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(scope, "scope");
        this.type = type;
        this.scope = scope;
    }

    /**
     * `delegation` - This is the only supported `type` parameter.
     */
    public GetTransientTokenQueryParamType type() {
        return type;
    }

    /**
     * `all` - This is the only supported `scope` parameter.
     */
    public Scope scope() {
        return scope;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * `delegation` - This is the only supported `type` parameter.
     */
    public GetTransientTokenRequest withType(GetTransientTokenQueryParamType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * `all` - This is the only supported `scope` parameter.
     */
    public GetTransientTokenRequest withScope(Scope scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTransientTokenRequest other = (GetTransientTokenRequest) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.scope, other.scope);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            scope);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTransientTokenRequest.class,
                "type", type,
                "scope", scope);
    }
    
    public final static class Builder {
 
        private GetTransientTokenQueryParamType type;
 
        private Scope scope;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * `delegation` - This is the only supported `type` parameter.
         */
        public Builder type(GetTransientTokenQueryParamType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * `all` - This is the only supported `scope` parameter.
         */
        public Builder scope(Scope scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }
        
        public GetTransientTokenRequest build() {
            return new GetTransientTokenRequest(
                type,
                scope);
        }
    }
}

