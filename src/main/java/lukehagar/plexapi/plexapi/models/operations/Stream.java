/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class Stream {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Integer> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamType")
    private Optional<? extends Integer> streamType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    private Optional<? extends Boolean> default_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    private Optional<? extends String> codec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    private Optional<? extends Integer> bitrate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitDepth")
    private Optional<? extends Integer> bitDepth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chromaLocation")
    private Optional<? extends String> chromaLocation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chromaSubsampling")
    private Optional<? extends String> chromaSubsampling;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codedHeight")
    private Optional<? extends Integer> codedHeight;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codedWidth")
    private Optional<? extends Integer> codedWidth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorPrimaries")
    private Optional<? extends String> colorPrimaries;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorRange")
    private Optional<? extends String> colorRange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorSpace")
    private Optional<? extends String> colorSpace;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("colorTrc")
    private Optional<? extends String> colorTrc;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frameRate")
    private Optional<? extends Integer> frameRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasScalingMatrix")
    private Optional<? extends Boolean> hasScalingMatrix;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<? extends Integer> height;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private Optional<? extends Integer> level;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile")
    private Optional<? extends String> profile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refFrames")
    private Optional<? extends Integer> refFrames;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scanType")
    private Optional<? extends String> scanType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamIdentifier")
    private Optional<? extends String> streamIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<? extends Integer> width;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayTitle")
    private Optional<? extends String> displayTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extendedDisplayTitle")
    private Optional<? extends String> extendedDisplayTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selected")
    private Optional<? extends Boolean> selected;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels")
    private Optional<? extends Integer> channels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private Optional<? extends String> language;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageTag")
    private Optional<? extends String> languageTag;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("languageCode")
    private Optional<? extends String> languageCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplingRate")
    private Optional<? extends Integer> samplingRate;

    public Stream(
            @JsonProperty("id") Optional<? extends Integer> id,
            @JsonProperty("streamType") Optional<? extends Integer> streamType,
            @JsonProperty("default") Optional<? extends Boolean> default_,
            @JsonProperty("codec") Optional<? extends String> codec,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("bitrate") Optional<? extends Integer> bitrate,
            @JsonProperty("bitDepth") Optional<? extends Integer> bitDepth,
            @JsonProperty("chromaLocation") Optional<? extends String> chromaLocation,
            @JsonProperty("chromaSubsampling") Optional<? extends String> chromaSubsampling,
            @JsonProperty("codedHeight") Optional<? extends Integer> codedHeight,
            @JsonProperty("codedWidth") Optional<? extends Integer> codedWidth,
            @JsonProperty("colorPrimaries") Optional<? extends String> colorPrimaries,
            @JsonProperty("colorRange") Optional<? extends String> colorRange,
            @JsonProperty("colorSpace") Optional<? extends String> colorSpace,
            @JsonProperty("colorTrc") Optional<? extends String> colorTrc,
            @JsonProperty("frameRate") Optional<? extends Integer> frameRate,
            @JsonProperty("hasScalingMatrix") Optional<? extends Boolean> hasScalingMatrix,
            @JsonProperty("height") Optional<? extends Integer> height,
            @JsonProperty("level") Optional<? extends Integer> level,
            @JsonProperty("profile") Optional<? extends String> profile,
            @JsonProperty("refFrames") Optional<? extends Integer> refFrames,
            @JsonProperty("scanType") Optional<? extends String> scanType,
            @JsonProperty("streamIdentifier") Optional<? extends String> streamIdentifier,
            @JsonProperty("width") Optional<? extends Integer> width,
            @JsonProperty("displayTitle") Optional<? extends String> displayTitle,
            @JsonProperty("extendedDisplayTitle") Optional<? extends String> extendedDisplayTitle,
            @JsonProperty("selected") Optional<? extends Boolean> selected,
            @JsonProperty("channels") Optional<? extends Integer> channels,
            @JsonProperty("language") Optional<? extends String> language,
            @JsonProperty("languageTag") Optional<? extends String> languageTag,
            @JsonProperty("languageCode") Optional<? extends String> languageCode,
            @JsonProperty("samplingRate") Optional<? extends Integer> samplingRate) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(streamType, "streamType");
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(codec, "codec");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(bitDepth, "bitDepth");
        Utils.checkNotNull(chromaLocation, "chromaLocation");
        Utils.checkNotNull(chromaSubsampling, "chromaSubsampling");
        Utils.checkNotNull(codedHeight, "codedHeight");
        Utils.checkNotNull(codedWidth, "codedWidth");
        Utils.checkNotNull(colorPrimaries, "colorPrimaries");
        Utils.checkNotNull(colorRange, "colorRange");
        Utils.checkNotNull(colorSpace, "colorSpace");
        Utils.checkNotNull(colorTrc, "colorTrc");
        Utils.checkNotNull(frameRate, "frameRate");
        Utils.checkNotNull(hasScalingMatrix, "hasScalingMatrix");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(profile, "profile");
        Utils.checkNotNull(refFrames, "refFrames");
        Utils.checkNotNull(scanType, "scanType");
        Utils.checkNotNull(streamIdentifier, "streamIdentifier");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(displayTitle, "displayTitle");
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        Utils.checkNotNull(selected, "selected");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(languageTag, "languageTag");
        Utils.checkNotNull(languageCode, "languageCode");
        Utils.checkNotNull(samplingRate, "samplingRate");
        this.id = id;
        this.streamType = streamType;
        this.default_ = default_;
        this.codec = codec;
        this.index = index;
        this.bitrate = bitrate;
        this.bitDepth = bitDepth;
        this.chromaLocation = chromaLocation;
        this.chromaSubsampling = chromaSubsampling;
        this.codedHeight = codedHeight;
        this.codedWidth = codedWidth;
        this.colorPrimaries = colorPrimaries;
        this.colorRange = colorRange;
        this.colorSpace = colorSpace;
        this.colorTrc = colorTrc;
        this.frameRate = frameRate;
        this.hasScalingMatrix = hasScalingMatrix;
        this.height = height;
        this.level = level;
        this.profile = profile;
        this.refFrames = refFrames;
        this.scanType = scanType;
        this.streamIdentifier = streamIdentifier;
        this.width = width;
        this.displayTitle = displayTitle;
        this.extendedDisplayTitle = extendedDisplayTitle;
        this.selected = selected;
        this.channels = channels;
        this.language = language;
        this.languageTag = languageTag;
        this.languageCode = languageCode;
        this.samplingRate = samplingRate;
    }

    public Optional<? extends Integer> id() {
        return id;
    }

    public Optional<? extends Integer> streamType() {
        return streamType;
    }

    public Optional<? extends Boolean> default_() {
        return default_;
    }

    public Optional<? extends String> codec() {
        return codec;
    }

    public Optional<? extends Integer> index() {
        return index;
    }

    public Optional<? extends Integer> bitrate() {
        return bitrate;
    }

    public Optional<? extends Integer> bitDepth() {
        return bitDepth;
    }

    public Optional<? extends String> chromaLocation() {
        return chromaLocation;
    }

    public Optional<? extends String> chromaSubsampling() {
        return chromaSubsampling;
    }

    public Optional<? extends Integer> codedHeight() {
        return codedHeight;
    }

    public Optional<? extends Integer> codedWidth() {
        return codedWidth;
    }

    public Optional<? extends String> colorPrimaries() {
        return colorPrimaries;
    }

    public Optional<? extends String> colorRange() {
        return colorRange;
    }

    public Optional<? extends String> colorSpace() {
        return colorSpace;
    }

    public Optional<? extends String> colorTrc() {
        return colorTrc;
    }

    public Optional<? extends Integer> frameRate() {
        return frameRate;
    }

    public Optional<? extends Boolean> hasScalingMatrix() {
        return hasScalingMatrix;
    }

    public Optional<? extends Integer> height() {
        return height;
    }

    public Optional<? extends Integer> level() {
        return level;
    }

    public Optional<? extends String> profile() {
        return profile;
    }

    public Optional<? extends Integer> refFrames() {
        return refFrames;
    }

    public Optional<? extends String> scanType() {
        return scanType;
    }

    public Optional<? extends String> streamIdentifier() {
        return streamIdentifier;
    }

    public Optional<? extends Integer> width() {
        return width;
    }

    public Optional<? extends String> displayTitle() {
        return displayTitle;
    }

    public Optional<? extends String> extendedDisplayTitle() {
        return extendedDisplayTitle;
    }

    public Optional<? extends Boolean> selected() {
        return selected;
    }

    public Optional<? extends Integer> channels() {
        return channels;
    }

    public Optional<? extends String> language() {
        return language;
    }

    public Optional<? extends String> languageTag() {
        return languageTag;
    }

    public Optional<? extends String> languageCode() {
        return languageCode;
    }

    public Optional<? extends Integer> samplingRate() {
        return samplingRate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Stream withId(int id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Stream withId(Optional<? extends Integer> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Stream withStreamType(int streamType) {
        Utils.checkNotNull(streamType, "streamType");
        this.streamType = Optional.ofNullable(streamType);
        return this;
    }

    public Stream withStreamType(Optional<? extends Integer> streamType) {
        Utils.checkNotNull(streamType, "streamType");
        this.streamType = streamType;
        return this;
    }

    public Stream withDefault(boolean default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = Optional.ofNullable(default_);
        return this;
    }

    public Stream withDefault(Optional<? extends Boolean> default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public Stream withCodec(String codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = Optional.ofNullable(codec);
        return this;
    }

    public Stream withCodec(Optional<? extends String> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
        return this;
    }

    public Stream withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public Stream withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public Stream withBitrate(int bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = Optional.ofNullable(bitrate);
        return this;
    }

    public Stream withBitrate(Optional<? extends Integer> bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    public Stream withBitDepth(int bitDepth) {
        Utils.checkNotNull(bitDepth, "bitDepth");
        this.bitDepth = Optional.ofNullable(bitDepth);
        return this;
    }

    public Stream withBitDepth(Optional<? extends Integer> bitDepth) {
        Utils.checkNotNull(bitDepth, "bitDepth");
        this.bitDepth = bitDepth;
        return this;
    }

    public Stream withChromaLocation(String chromaLocation) {
        Utils.checkNotNull(chromaLocation, "chromaLocation");
        this.chromaLocation = Optional.ofNullable(chromaLocation);
        return this;
    }

    public Stream withChromaLocation(Optional<? extends String> chromaLocation) {
        Utils.checkNotNull(chromaLocation, "chromaLocation");
        this.chromaLocation = chromaLocation;
        return this;
    }

    public Stream withChromaSubsampling(String chromaSubsampling) {
        Utils.checkNotNull(chromaSubsampling, "chromaSubsampling");
        this.chromaSubsampling = Optional.ofNullable(chromaSubsampling);
        return this;
    }

    public Stream withChromaSubsampling(Optional<? extends String> chromaSubsampling) {
        Utils.checkNotNull(chromaSubsampling, "chromaSubsampling");
        this.chromaSubsampling = chromaSubsampling;
        return this;
    }

    public Stream withCodedHeight(int codedHeight) {
        Utils.checkNotNull(codedHeight, "codedHeight");
        this.codedHeight = Optional.ofNullable(codedHeight);
        return this;
    }

    public Stream withCodedHeight(Optional<? extends Integer> codedHeight) {
        Utils.checkNotNull(codedHeight, "codedHeight");
        this.codedHeight = codedHeight;
        return this;
    }

    public Stream withCodedWidth(int codedWidth) {
        Utils.checkNotNull(codedWidth, "codedWidth");
        this.codedWidth = Optional.ofNullable(codedWidth);
        return this;
    }

    public Stream withCodedWidth(Optional<? extends Integer> codedWidth) {
        Utils.checkNotNull(codedWidth, "codedWidth");
        this.codedWidth = codedWidth;
        return this;
    }

    public Stream withColorPrimaries(String colorPrimaries) {
        Utils.checkNotNull(colorPrimaries, "colorPrimaries");
        this.colorPrimaries = Optional.ofNullable(colorPrimaries);
        return this;
    }

    public Stream withColorPrimaries(Optional<? extends String> colorPrimaries) {
        Utils.checkNotNull(colorPrimaries, "colorPrimaries");
        this.colorPrimaries = colorPrimaries;
        return this;
    }

    public Stream withColorRange(String colorRange) {
        Utils.checkNotNull(colorRange, "colorRange");
        this.colorRange = Optional.ofNullable(colorRange);
        return this;
    }

    public Stream withColorRange(Optional<? extends String> colorRange) {
        Utils.checkNotNull(colorRange, "colorRange");
        this.colorRange = colorRange;
        return this;
    }

    public Stream withColorSpace(String colorSpace) {
        Utils.checkNotNull(colorSpace, "colorSpace");
        this.colorSpace = Optional.ofNullable(colorSpace);
        return this;
    }

    public Stream withColorSpace(Optional<? extends String> colorSpace) {
        Utils.checkNotNull(colorSpace, "colorSpace");
        this.colorSpace = colorSpace;
        return this;
    }

    public Stream withColorTrc(String colorTrc) {
        Utils.checkNotNull(colorTrc, "colorTrc");
        this.colorTrc = Optional.ofNullable(colorTrc);
        return this;
    }

    public Stream withColorTrc(Optional<? extends String> colorTrc) {
        Utils.checkNotNull(colorTrc, "colorTrc");
        this.colorTrc = colorTrc;
        return this;
    }

    public Stream withFrameRate(int frameRate) {
        Utils.checkNotNull(frameRate, "frameRate");
        this.frameRate = Optional.ofNullable(frameRate);
        return this;
    }

    public Stream withFrameRate(Optional<? extends Integer> frameRate) {
        Utils.checkNotNull(frameRate, "frameRate");
        this.frameRate = frameRate;
        return this;
    }

    public Stream withHasScalingMatrix(boolean hasScalingMatrix) {
        Utils.checkNotNull(hasScalingMatrix, "hasScalingMatrix");
        this.hasScalingMatrix = Optional.ofNullable(hasScalingMatrix);
        return this;
    }

    public Stream withHasScalingMatrix(Optional<? extends Boolean> hasScalingMatrix) {
        Utils.checkNotNull(hasScalingMatrix, "hasScalingMatrix");
        this.hasScalingMatrix = hasScalingMatrix;
        return this;
    }

    public Stream withHeight(int height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    public Stream withHeight(Optional<? extends Integer> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public Stream withLevel(int level) {
        Utils.checkNotNull(level, "level");
        this.level = Optional.ofNullable(level);
        return this;
    }

    public Stream withLevel(Optional<? extends Integer> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    public Stream withProfile(String profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = Optional.ofNullable(profile);
        return this;
    }

    public Stream withProfile(Optional<? extends String> profile) {
        Utils.checkNotNull(profile, "profile");
        this.profile = profile;
        return this;
    }

    public Stream withRefFrames(int refFrames) {
        Utils.checkNotNull(refFrames, "refFrames");
        this.refFrames = Optional.ofNullable(refFrames);
        return this;
    }

    public Stream withRefFrames(Optional<? extends Integer> refFrames) {
        Utils.checkNotNull(refFrames, "refFrames");
        this.refFrames = refFrames;
        return this;
    }

    public Stream withScanType(String scanType) {
        Utils.checkNotNull(scanType, "scanType");
        this.scanType = Optional.ofNullable(scanType);
        return this;
    }

    public Stream withScanType(Optional<? extends String> scanType) {
        Utils.checkNotNull(scanType, "scanType");
        this.scanType = scanType;
        return this;
    }

    public Stream withStreamIdentifier(String streamIdentifier) {
        Utils.checkNotNull(streamIdentifier, "streamIdentifier");
        this.streamIdentifier = Optional.ofNullable(streamIdentifier);
        return this;
    }

    public Stream withStreamIdentifier(Optional<? extends String> streamIdentifier) {
        Utils.checkNotNull(streamIdentifier, "streamIdentifier");
        this.streamIdentifier = streamIdentifier;
        return this;
    }

    public Stream withWidth(int width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    public Stream withWidth(Optional<? extends Integer> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    public Stream withDisplayTitle(String displayTitle) {
        Utils.checkNotNull(displayTitle, "displayTitle");
        this.displayTitle = Optional.ofNullable(displayTitle);
        return this;
    }

    public Stream withDisplayTitle(Optional<? extends String> displayTitle) {
        Utils.checkNotNull(displayTitle, "displayTitle");
        this.displayTitle = displayTitle;
        return this;
    }

    public Stream withExtendedDisplayTitle(String extendedDisplayTitle) {
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        this.extendedDisplayTitle = Optional.ofNullable(extendedDisplayTitle);
        return this;
    }

    public Stream withExtendedDisplayTitle(Optional<? extends String> extendedDisplayTitle) {
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        this.extendedDisplayTitle = extendedDisplayTitle;
        return this;
    }

    public Stream withSelected(boolean selected) {
        Utils.checkNotNull(selected, "selected");
        this.selected = Optional.ofNullable(selected);
        return this;
    }

    public Stream withSelected(Optional<? extends Boolean> selected) {
        Utils.checkNotNull(selected, "selected");
        this.selected = selected;
        return this;
    }

    public Stream withChannels(int channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    public Stream withChannels(Optional<? extends Integer> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public Stream withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = Optional.ofNullable(language);
        return this;
    }

    public Stream withLanguage(Optional<? extends String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public Stream withLanguageTag(String languageTag) {
        Utils.checkNotNull(languageTag, "languageTag");
        this.languageTag = Optional.ofNullable(languageTag);
        return this;
    }

    public Stream withLanguageTag(Optional<? extends String> languageTag) {
        Utils.checkNotNull(languageTag, "languageTag");
        this.languageTag = languageTag;
        return this;
    }

    public Stream withLanguageCode(String languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = Optional.ofNullable(languageCode);
        return this;
    }

    public Stream withLanguageCode(Optional<? extends String> languageCode) {
        Utils.checkNotNull(languageCode, "languageCode");
        this.languageCode = languageCode;
        return this;
    }

    public Stream withSamplingRate(int samplingRate) {
        Utils.checkNotNull(samplingRate, "samplingRate");
        this.samplingRate = Optional.ofNullable(samplingRate);
        return this;
    }

    public Stream withSamplingRate(Optional<? extends Integer> samplingRate) {
        Utils.checkNotNull(samplingRate, "samplingRate");
        this.samplingRate = samplingRate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Stream other = (Stream) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.streamType, other.streamType) &&
            java.util.Objects.deepEquals(this.default_, other.default_) &&
            java.util.Objects.deepEquals(this.codec, other.codec) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.bitrate, other.bitrate) &&
            java.util.Objects.deepEquals(this.bitDepth, other.bitDepth) &&
            java.util.Objects.deepEquals(this.chromaLocation, other.chromaLocation) &&
            java.util.Objects.deepEquals(this.chromaSubsampling, other.chromaSubsampling) &&
            java.util.Objects.deepEquals(this.codedHeight, other.codedHeight) &&
            java.util.Objects.deepEquals(this.codedWidth, other.codedWidth) &&
            java.util.Objects.deepEquals(this.colorPrimaries, other.colorPrimaries) &&
            java.util.Objects.deepEquals(this.colorRange, other.colorRange) &&
            java.util.Objects.deepEquals(this.colorSpace, other.colorSpace) &&
            java.util.Objects.deepEquals(this.colorTrc, other.colorTrc) &&
            java.util.Objects.deepEquals(this.frameRate, other.frameRate) &&
            java.util.Objects.deepEquals(this.hasScalingMatrix, other.hasScalingMatrix) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.level, other.level) &&
            java.util.Objects.deepEquals(this.profile, other.profile) &&
            java.util.Objects.deepEquals(this.refFrames, other.refFrames) &&
            java.util.Objects.deepEquals(this.scanType, other.scanType) &&
            java.util.Objects.deepEquals(this.streamIdentifier, other.streamIdentifier) &&
            java.util.Objects.deepEquals(this.width, other.width) &&
            java.util.Objects.deepEquals(this.displayTitle, other.displayTitle) &&
            java.util.Objects.deepEquals(this.extendedDisplayTitle, other.extendedDisplayTitle) &&
            java.util.Objects.deepEquals(this.selected, other.selected) &&
            java.util.Objects.deepEquals(this.channels, other.channels) &&
            java.util.Objects.deepEquals(this.language, other.language) &&
            java.util.Objects.deepEquals(this.languageTag, other.languageTag) &&
            java.util.Objects.deepEquals(this.languageCode, other.languageCode) &&
            java.util.Objects.deepEquals(this.samplingRate, other.samplingRate);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            streamType,
            default_,
            codec,
            index,
            bitrate,
            bitDepth,
            chromaLocation,
            chromaSubsampling,
            codedHeight,
            codedWidth,
            colorPrimaries,
            colorRange,
            colorSpace,
            colorTrc,
            frameRate,
            hasScalingMatrix,
            height,
            level,
            profile,
            refFrames,
            scanType,
            streamIdentifier,
            width,
            displayTitle,
            extendedDisplayTitle,
            selected,
            channels,
            language,
            languageTag,
            languageCode,
            samplingRate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Stream.class,
                "id", id,
                "streamType", streamType,
                "default_", default_,
                "codec", codec,
                "index", index,
                "bitrate", bitrate,
                "bitDepth", bitDepth,
                "chromaLocation", chromaLocation,
                "chromaSubsampling", chromaSubsampling,
                "codedHeight", codedHeight,
                "codedWidth", codedWidth,
                "colorPrimaries", colorPrimaries,
                "colorRange", colorRange,
                "colorSpace", colorSpace,
                "colorTrc", colorTrc,
                "frameRate", frameRate,
                "hasScalingMatrix", hasScalingMatrix,
                "height", height,
                "level", level,
                "profile", profile,
                "refFrames", refFrames,
                "scanType", scanType,
                "streamIdentifier", streamIdentifier,
                "width", width,
                "displayTitle", displayTitle,
                "extendedDisplayTitle", extendedDisplayTitle,
                "selected", selected,
                "channels", channels,
                "language", language,
                "languageTag", languageTag,
                "languageCode", languageCode,
                "samplingRate", samplingRate);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> id = Optional.empty();
 
        private Optional<? extends Integer> streamType = Optional.empty();
 
        private Optional<? extends Boolean> default_ = Optional.empty();
 
        private Optional<? extends String> codec = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends Integer> bitrate = Optional.empty();
 
        private Optional<? extends Integer> bitDepth = Optional.empty();
 
        private Optional<? extends String> chromaLocation = Optional.empty();
 
        private Optional<? extends String> chromaSubsampling = Optional.empty();
 
        private Optional<? extends Integer> codedHeight = Optional.empty();
 
        private Optional<? extends Integer> codedWidth = Optional.empty();
 
        private Optional<? extends String> colorPrimaries = Optional.empty();
 
        private Optional<? extends String> colorRange = Optional.empty();
 
        private Optional<? extends String> colorSpace = Optional.empty();
 
        private Optional<? extends String> colorTrc = Optional.empty();
 
        private Optional<? extends Integer> frameRate = Optional.empty();
 
        private Optional<? extends Boolean> hasScalingMatrix = Optional.empty();
 
        private Optional<? extends Integer> height = Optional.empty();
 
        private Optional<? extends Integer> level = Optional.empty();
 
        private Optional<? extends String> profile = Optional.empty();
 
        private Optional<? extends Integer> refFrames = Optional.empty();
 
        private Optional<? extends String> scanType = Optional.empty();
 
        private Optional<? extends String> streamIdentifier = Optional.empty();
 
        private Optional<? extends Integer> width = Optional.empty();
 
        private Optional<? extends String> displayTitle = Optional.empty();
 
        private Optional<? extends String> extendedDisplayTitle = Optional.empty();
 
        private Optional<? extends Boolean> selected = Optional.empty();
 
        private Optional<? extends Integer> channels = Optional.empty();
 
        private Optional<? extends String> language = Optional.empty();
 
        private Optional<? extends String> languageTag = Optional.empty();
 
        private Optional<? extends String> languageCode = Optional.empty();
 
        private Optional<? extends Integer> samplingRate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(int id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Integer> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder streamType(int streamType) {
            Utils.checkNotNull(streamType, "streamType");
            this.streamType = Optional.ofNullable(streamType);
            return this;
        }

        public Builder streamType(Optional<? extends Integer> streamType) {
            Utils.checkNotNull(streamType, "streamType");
            this.streamType = streamType;
            return this;
        }

        public Builder default_(boolean default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        public Builder default_(Optional<? extends Boolean> default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder codec(String codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = Optional.ofNullable(codec);
            return this;
        }

        public Builder codec(Optional<? extends String> codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = codec;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder bitrate(int bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = Optional.ofNullable(bitrate);
            return this;
        }

        public Builder bitrate(Optional<? extends Integer> bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        public Builder bitDepth(int bitDepth) {
            Utils.checkNotNull(bitDepth, "bitDepth");
            this.bitDepth = Optional.ofNullable(bitDepth);
            return this;
        }

        public Builder bitDepth(Optional<? extends Integer> bitDepth) {
            Utils.checkNotNull(bitDepth, "bitDepth");
            this.bitDepth = bitDepth;
            return this;
        }

        public Builder chromaLocation(String chromaLocation) {
            Utils.checkNotNull(chromaLocation, "chromaLocation");
            this.chromaLocation = Optional.ofNullable(chromaLocation);
            return this;
        }

        public Builder chromaLocation(Optional<? extends String> chromaLocation) {
            Utils.checkNotNull(chromaLocation, "chromaLocation");
            this.chromaLocation = chromaLocation;
            return this;
        }

        public Builder chromaSubsampling(String chromaSubsampling) {
            Utils.checkNotNull(chromaSubsampling, "chromaSubsampling");
            this.chromaSubsampling = Optional.ofNullable(chromaSubsampling);
            return this;
        }

        public Builder chromaSubsampling(Optional<? extends String> chromaSubsampling) {
            Utils.checkNotNull(chromaSubsampling, "chromaSubsampling");
            this.chromaSubsampling = chromaSubsampling;
            return this;
        }

        public Builder codedHeight(int codedHeight) {
            Utils.checkNotNull(codedHeight, "codedHeight");
            this.codedHeight = Optional.ofNullable(codedHeight);
            return this;
        }

        public Builder codedHeight(Optional<? extends Integer> codedHeight) {
            Utils.checkNotNull(codedHeight, "codedHeight");
            this.codedHeight = codedHeight;
            return this;
        }

        public Builder codedWidth(int codedWidth) {
            Utils.checkNotNull(codedWidth, "codedWidth");
            this.codedWidth = Optional.ofNullable(codedWidth);
            return this;
        }

        public Builder codedWidth(Optional<? extends Integer> codedWidth) {
            Utils.checkNotNull(codedWidth, "codedWidth");
            this.codedWidth = codedWidth;
            return this;
        }

        public Builder colorPrimaries(String colorPrimaries) {
            Utils.checkNotNull(colorPrimaries, "colorPrimaries");
            this.colorPrimaries = Optional.ofNullable(colorPrimaries);
            return this;
        }

        public Builder colorPrimaries(Optional<? extends String> colorPrimaries) {
            Utils.checkNotNull(colorPrimaries, "colorPrimaries");
            this.colorPrimaries = colorPrimaries;
            return this;
        }

        public Builder colorRange(String colorRange) {
            Utils.checkNotNull(colorRange, "colorRange");
            this.colorRange = Optional.ofNullable(colorRange);
            return this;
        }

        public Builder colorRange(Optional<? extends String> colorRange) {
            Utils.checkNotNull(colorRange, "colorRange");
            this.colorRange = colorRange;
            return this;
        }

        public Builder colorSpace(String colorSpace) {
            Utils.checkNotNull(colorSpace, "colorSpace");
            this.colorSpace = Optional.ofNullable(colorSpace);
            return this;
        }

        public Builder colorSpace(Optional<? extends String> colorSpace) {
            Utils.checkNotNull(colorSpace, "colorSpace");
            this.colorSpace = colorSpace;
            return this;
        }

        public Builder colorTrc(String colorTrc) {
            Utils.checkNotNull(colorTrc, "colorTrc");
            this.colorTrc = Optional.ofNullable(colorTrc);
            return this;
        }

        public Builder colorTrc(Optional<? extends String> colorTrc) {
            Utils.checkNotNull(colorTrc, "colorTrc");
            this.colorTrc = colorTrc;
            return this;
        }

        public Builder frameRate(int frameRate) {
            Utils.checkNotNull(frameRate, "frameRate");
            this.frameRate = Optional.ofNullable(frameRate);
            return this;
        }

        public Builder frameRate(Optional<? extends Integer> frameRate) {
            Utils.checkNotNull(frameRate, "frameRate");
            this.frameRate = frameRate;
            return this;
        }

        public Builder hasScalingMatrix(boolean hasScalingMatrix) {
            Utils.checkNotNull(hasScalingMatrix, "hasScalingMatrix");
            this.hasScalingMatrix = Optional.ofNullable(hasScalingMatrix);
            return this;
        }

        public Builder hasScalingMatrix(Optional<? extends Boolean> hasScalingMatrix) {
            Utils.checkNotNull(hasScalingMatrix, "hasScalingMatrix");
            this.hasScalingMatrix = hasScalingMatrix;
            return this;
        }

        public Builder height(int height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        public Builder height(Optional<? extends Integer> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder level(int level) {
            Utils.checkNotNull(level, "level");
            this.level = Optional.ofNullable(level);
            return this;
        }

        public Builder level(Optional<? extends Integer> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        public Builder profile(String profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = Optional.ofNullable(profile);
            return this;
        }

        public Builder profile(Optional<? extends String> profile) {
            Utils.checkNotNull(profile, "profile");
            this.profile = profile;
            return this;
        }

        public Builder refFrames(int refFrames) {
            Utils.checkNotNull(refFrames, "refFrames");
            this.refFrames = Optional.ofNullable(refFrames);
            return this;
        }

        public Builder refFrames(Optional<? extends Integer> refFrames) {
            Utils.checkNotNull(refFrames, "refFrames");
            this.refFrames = refFrames;
            return this;
        }

        public Builder scanType(String scanType) {
            Utils.checkNotNull(scanType, "scanType");
            this.scanType = Optional.ofNullable(scanType);
            return this;
        }

        public Builder scanType(Optional<? extends String> scanType) {
            Utils.checkNotNull(scanType, "scanType");
            this.scanType = scanType;
            return this;
        }

        public Builder streamIdentifier(String streamIdentifier) {
            Utils.checkNotNull(streamIdentifier, "streamIdentifier");
            this.streamIdentifier = Optional.ofNullable(streamIdentifier);
            return this;
        }

        public Builder streamIdentifier(Optional<? extends String> streamIdentifier) {
            Utils.checkNotNull(streamIdentifier, "streamIdentifier");
            this.streamIdentifier = streamIdentifier;
            return this;
        }

        public Builder width(int width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        public Builder width(Optional<? extends Integer> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        public Builder displayTitle(String displayTitle) {
            Utils.checkNotNull(displayTitle, "displayTitle");
            this.displayTitle = Optional.ofNullable(displayTitle);
            return this;
        }

        public Builder displayTitle(Optional<? extends String> displayTitle) {
            Utils.checkNotNull(displayTitle, "displayTitle");
            this.displayTitle = displayTitle;
            return this;
        }

        public Builder extendedDisplayTitle(String extendedDisplayTitle) {
            Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
            this.extendedDisplayTitle = Optional.ofNullable(extendedDisplayTitle);
            return this;
        }

        public Builder extendedDisplayTitle(Optional<? extends String> extendedDisplayTitle) {
            Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
            this.extendedDisplayTitle = extendedDisplayTitle;
            return this;
        }

        public Builder selected(boolean selected) {
            Utils.checkNotNull(selected, "selected");
            this.selected = Optional.ofNullable(selected);
            return this;
        }

        public Builder selected(Optional<? extends Boolean> selected) {
            Utils.checkNotNull(selected, "selected");
            this.selected = selected;
            return this;
        }

        public Builder channels(int channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Optional<? extends Integer> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = Optional.ofNullable(language);
            return this;
        }

        public Builder language(Optional<? extends String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        public Builder languageTag(String languageTag) {
            Utils.checkNotNull(languageTag, "languageTag");
            this.languageTag = Optional.ofNullable(languageTag);
            return this;
        }

        public Builder languageTag(Optional<? extends String> languageTag) {
            Utils.checkNotNull(languageTag, "languageTag");
            this.languageTag = languageTag;
            return this;
        }

        public Builder languageCode(String languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = Optional.ofNullable(languageCode);
            return this;
        }

        public Builder languageCode(Optional<? extends String> languageCode) {
            Utils.checkNotNull(languageCode, "languageCode");
            this.languageCode = languageCode;
            return this;
        }

        public Builder samplingRate(int samplingRate) {
            Utils.checkNotNull(samplingRate, "samplingRate");
            this.samplingRate = Optional.ofNullable(samplingRate);
            return this;
        }

        public Builder samplingRate(Optional<? extends Integer> samplingRate) {
            Utils.checkNotNull(samplingRate, "samplingRate");
            this.samplingRate = samplingRate;
            return this;
        }
        
        public Stream build() {
            return new Stream(
                id,
                streamType,
                default_,
                codec,
                index,
                bitrate,
                bitDepth,
                chromaLocation,
                chromaSubsampling,
                codedHeight,
                codedWidth,
                colorPrimaries,
                colorRange,
                colorSpace,
                colorTrc,
                frameRate,
                hasScalingMatrix,
                height,
                level,
                profile,
                refFrames,
                scanType,
                streamIdentifier,
                width,
                displayTitle,
                extendedDisplayTitle,
                selected,
                channels,
                language,
                languageTag,
                languageCode,
                samplingRate);
        }
    }
}

