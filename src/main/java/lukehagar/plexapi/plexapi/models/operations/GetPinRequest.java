/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.LazySingletonValue;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetPinRequest {

    /**
     * Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=strong")
    private Optional<? extends Boolean> strong;

    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Plex-Client-Identifier")
    private Optional<? extends String> xPlexClientIdentifier;

    /**
     * Product name of the application shown in the list of devices
     * 
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Plex-Product")
    private String xPlexProduct;

    @JsonCreator
    public GetPinRequest(
            Optional<? extends Boolean> strong,
            Optional<? extends String> xPlexClientIdentifier,
            String xPlexProduct) {
        Utils.checkNotNull(strong, "strong");
        Utils.checkNotNull(xPlexClientIdentifier, "xPlexClientIdentifier");
        Utils.checkNotNull(xPlexProduct, "xPlexProduct");
        this.strong = strong;
        this.xPlexClientIdentifier = xPlexClientIdentifier;
        this.xPlexProduct = xPlexProduct;
    }
    
    public GetPinRequest(
            String xPlexProduct) {
        this(Optional.empty(), Optional.empty(), xPlexProduct);
    }

    /**
     * Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> strong() {
        return (Optional<Boolean>) strong;
    }

    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> xPlexClientIdentifier() {
        return (Optional<String>) xPlexClientIdentifier;
    }

    /**
     * Product name of the application shown in the list of devices
     * 
     */
    @JsonIgnore
    public String xPlexProduct() {
        return xPlexProduct;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     * 
     */
    public GetPinRequest withStrong(boolean strong) {
        Utils.checkNotNull(strong, "strong");
        this.strong = Optional.ofNullable(strong);
        return this;
    }

    /**
     * Determines the kind of code returned by the API call
     * Strong codes are used for Pin authentication flows
     * Non-Strong codes are used for `Plex.tv/link`
     * 
     */
    public GetPinRequest withStrong(Optional<? extends Boolean> strong) {
        Utils.checkNotNull(strong, "strong");
        this.strong = strong;
        return this;
    }

    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     * 
     */
    public GetPinRequest withXPlexClientIdentifier(String xPlexClientIdentifier) {
        Utils.checkNotNull(xPlexClientIdentifier, "xPlexClientIdentifier");
        this.xPlexClientIdentifier = Optional.ofNullable(xPlexClientIdentifier);
        return this;
    }

    /**
     * The unique identifier for the client application
     * This is used to track the client application and its usage
     * (UUID, serial number, or other number unique per device)
     * 
     */
    public GetPinRequest withXPlexClientIdentifier(Optional<? extends String> xPlexClientIdentifier) {
        Utils.checkNotNull(xPlexClientIdentifier, "xPlexClientIdentifier");
        this.xPlexClientIdentifier = xPlexClientIdentifier;
        return this;
    }

    /**
     * Product name of the application shown in the list of devices
     * 
     */
    public GetPinRequest withXPlexProduct(String xPlexProduct) {
        Utils.checkNotNull(xPlexProduct, "xPlexProduct");
        this.xPlexProduct = xPlexProduct;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPinRequest other = (GetPinRequest) o;
        return 
            java.util.Objects.deepEquals(this.strong, other.strong) &&
            java.util.Objects.deepEquals(this.xPlexClientIdentifier, other.xPlexClientIdentifier) &&
            java.util.Objects.deepEquals(this.xPlexProduct, other.xPlexProduct);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            strong,
            xPlexClientIdentifier,
            xPlexProduct);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPinRequest.class,
                "strong", strong,
                "xPlexClientIdentifier", xPlexClientIdentifier,
                "xPlexProduct", xPlexProduct);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> strong;
 
        private Optional<? extends String> xPlexClientIdentifier = Optional.empty();
 
        private String xPlexProduct;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Determines the kind of code returned by the API call
         * Strong codes are used for Pin authentication flows
         * Non-Strong codes are used for `Plex.tv/link`
         * 
         */
        public Builder strong(boolean strong) {
            Utils.checkNotNull(strong, "strong");
            this.strong = Optional.ofNullable(strong);
            return this;
        }

        /**
         * Determines the kind of code returned by the API call
         * Strong codes are used for Pin authentication flows
         * Non-Strong codes are used for `Plex.tv/link`
         * 
         */
        public Builder strong(Optional<? extends Boolean> strong) {
            Utils.checkNotNull(strong, "strong");
            this.strong = strong;
            return this;
        }

        /**
         * The unique identifier for the client application
         * This is used to track the client application and its usage
         * (UUID, serial number, or other number unique per device)
         * 
         */
        public Builder xPlexClientIdentifier(String xPlexClientIdentifier) {
            Utils.checkNotNull(xPlexClientIdentifier, "xPlexClientIdentifier");
            this.xPlexClientIdentifier = Optional.ofNullable(xPlexClientIdentifier);
            return this;
        }

        /**
         * The unique identifier for the client application
         * This is used to track the client application and its usage
         * (UUID, serial number, or other number unique per device)
         * 
         */
        public Builder xPlexClientIdentifier(Optional<? extends String> xPlexClientIdentifier) {
            Utils.checkNotNull(xPlexClientIdentifier, "xPlexClientIdentifier");
            this.xPlexClientIdentifier = xPlexClientIdentifier;
            return this;
        }

        /**
         * Product name of the application shown in the list of devices
         * 
         */
        public Builder xPlexProduct(String xPlexProduct) {
            Utils.checkNotNull(xPlexProduct, "xPlexProduct");
            this.xPlexProduct = xPlexProduct;
            return this;
        }
        
        public GetPinRequest build() {
            if (strong == null) {
                strong = _SINGLETON_VALUE_Strong.value();
            }
            return new GetPinRequest(
                strong,
                xPlexClientIdentifier,
                xPlexProduct);
        }

        private static final LazySingletonValue<Optional<? extends Boolean>> _SINGLETON_VALUE_Strong =
                new LazySingletonValue<>(
                        "strong",
                        "false",
                        new TypeReference<Optional<? extends Boolean>>() {});
    }
}

