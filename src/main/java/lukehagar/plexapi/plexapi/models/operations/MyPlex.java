/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class MyPlex {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authToken")
    private Optional<? extends String> authToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private Optional<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mappingState")
    private Optional<? extends String> mappingState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mappingError")
    private Optional<? extends String> mappingError;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signInState")
    private Optional<? extends String> signInState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicAddress")
    private Optional<? extends String> publicAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicPort")
    private Optional<? extends Double> publicPort;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privateAddress")
    private Optional<? extends String> privateAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("privatePort")
    private Optional<? extends Double> privatePort;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionFeatures")
    private Optional<? extends String> subscriptionFeatures;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionActive")
    private Optional<? extends Boolean> subscriptionActive;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptionState")
    private Optional<? extends String> subscriptionState;

    public MyPlex(
            @JsonProperty("authToken") Optional<? extends String> authToken,
            @JsonProperty("username") Optional<? extends String> username,
            @JsonProperty("mappingState") Optional<? extends String> mappingState,
            @JsonProperty("mappingError") Optional<? extends String> mappingError,
            @JsonProperty("signInState") Optional<? extends String> signInState,
            @JsonProperty("publicAddress") Optional<? extends String> publicAddress,
            @JsonProperty("publicPort") Optional<? extends Double> publicPort,
            @JsonProperty("privateAddress") Optional<? extends String> privateAddress,
            @JsonProperty("privatePort") Optional<? extends Double> privatePort,
            @JsonProperty("subscriptionFeatures") Optional<? extends String> subscriptionFeatures,
            @JsonProperty("subscriptionActive") Optional<? extends Boolean> subscriptionActive,
            @JsonProperty("subscriptionState") Optional<? extends String> subscriptionState) {
        Utils.checkNotNull(authToken, "authToken");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(mappingState, "mappingState");
        Utils.checkNotNull(mappingError, "mappingError");
        Utils.checkNotNull(signInState, "signInState");
        Utils.checkNotNull(publicAddress, "publicAddress");
        Utils.checkNotNull(publicPort, "publicPort");
        Utils.checkNotNull(privateAddress, "privateAddress");
        Utils.checkNotNull(privatePort, "privatePort");
        Utils.checkNotNull(subscriptionFeatures, "subscriptionFeatures");
        Utils.checkNotNull(subscriptionActive, "subscriptionActive");
        Utils.checkNotNull(subscriptionState, "subscriptionState");
        this.authToken = authToken;
        this.username = username;
        this.mappingState = mappingState;
        this.mappingError = mappingError;
        this.signInState = signInState;
        this.publicAddress = publicAddress;
        this.publicPort = publicPort;
        this.privateAddress = privateAddress;
        this.privatePort = privatePort;
        this.subscriptionFeatures = subscriptionFeatures;
        this.subscriptionActive = subscriptionActive;
        this.subscriptionState = subscriptionState;
    }

    public Optional<? extends String> authToken() {
        return authToken;
    }

    public Optional<? extends String> username() {
        return username;
    }

    public Optional<? extends String> mappingState() {
        return mappingState;
    }

    public Optional<? extends String> mappingError() {
        return mappingError;
    }

    public Optional<? extends String> signInState() {
        return signInState;
    }

    public Optional<? extends String> publicAddress() {
        return publicAddress;
    }

    public Optional<? extends Double> publicPort() {
        return publicPort;
    }

    public Optional<? extends String> privateAddress() {
        return privateAddress;
    }

    public Optional<? extends Double> privatePort() {
        return privatePort;
    }

    public Optional<? extends String> subscriptionFeatures() {
        return subscriptionFeatures;
    }

    public Optional<? extends Boolean> subscriptionActive() {
        return subscriptionActive;
    }

    public Optional<? extends String> subscriptionState() {
        return subscriptionState;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MyPlex withAuthToken(String authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = Optional.ofNullable(authToken);
        return this;
    }

    public MyPlex withAuthToken(Optional<? extends String> authToken) {
        Utils.checkNotNull(authToken, "authToken");
        this.authToken = authToken;
        return this;
    }

    public MyPlex withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    public MyPlex withUsername(Optional<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public MyPlex withMappingState(String mappingState) {
        Utils.checkNotNull(mappingState, "mappingState");
        this.mappingState = Optional.ofNullable(mappingState);
        return this;
    }

    public MyPlex withMappingState(Optional<? extends String> mappingState) {
        Utils.checkNotNull(mappingState, "mappingState");
        this.mappingState = mappingState;
        return this;
    }

    public MyPlex withMappingError(String mappingError) {
        Utils.checkNotNull(mappingError, "mappingError");
        this.mappingError = Optional.ofNullable(mappingError);
        return this;
    }

    public MyPlex withMappingError(Optional<? extends String> mappingError) {
        Utils.checkNotNull(mappingError, "mappingError");
        this.mappingError = mappingError;
        return this;
    }

    public MyPlex withSignInState(String signInState) {
        Utils.checkNotNull(signInState, "signInState");
        this.signInState = Optional.ofNullable(signInState);
        return this;
    }

    public MyPlex withSignInState(Optional<? extends String> signInState) {
        Utils.checkNotNull(signInState, "signInState");
        this.signInState = signInState;
        return this;
    }

    public MyPlex withPublicAddress(String publicAddress) {
        Utils.checkNotNull(publicAddress, "publicAddress");
        this.publicAddress = Optional.ofNullable(publicAddress);
        return this;
    }

    public MyPlex withPublicAddress(Optional<? extends String> publicAddress) {
        Utils.checkNotNull(publicAddress, "publicAddress");
        this.publicAddress = publicAddress;
        return this;
    }

    public MyPlex withPublicPort(double publicPort) {
        Utils.checkNotNull(publicPort, "publicPort");
        this.publicPort = Optional.ofNullable(publicPort);
        return this;
    }

    public MyPlex withPublicPort(Optional<? extends Double> publicPort) {
        Utils.checkNotNull(publicPort, "publicPort");
        this.publicPort = publicPort;
        return this;
    }

    public MyPlex withPrivateAddress(String privateAddress) {
        Utils.checkNotNull(privateAddress, "privateAddress");
        this.privateAddress = Optional.ofNullable(privateAddress);
        return this;
    }

    public MyPlex withPrivateAddress(Optional<? extends String> privateAddress) {
        Utils.checkNotNull(privateAddress, "privateAddress");
        this.privateAddress = privateAddress;
        return this;
    }

    public MyPlex withPrivatePort(double privatePort) {
        Utils.checkNotNull(privatePort, "privatePort");
        this.privatePort = Optional.ofNullable(privatePort);
        return this;
    }

    public MyPlex withPrivatePort(Optional<? extends Double> privatePort) {
        Utils.checkNotNull(privatePort, "privatePort");
        this.privatePort = privatePort;
        return this;
    }

    public MyPlex withSubscriptionFeatures(String subscriptionFeatures) {
        Utils.checkNotNull(subscriptionFeatures, "subscriptionFeatures");
        this.subscriptionFeatures = Optional.ofNullable(subscriptionFeatures);
        return this;
    }

    public MyPlex withSubscriptionFeatures(Optional<? extends String> subscriptionFeatures) {
        Utils.checkNotNull(subscriptionFeatures, "subscriptionFeatures");
        this.subscriptionFeatures = subscriptionFeatures;
        return this;
    }

    public MyPlex withSubscriptionActive(boolean subscriptionActive) {
        Utils.checkNotNull(subscriptionActive, "subscriptionActive");
        this.subscriptionActive = Optional.ofNullable(subscriptionActive);
        return this;
    }

    public MyPlex withSubscriptionActive(Optional<? extends Boolean> subscriptionActive) {
        Utils.checkNotNull(subscriptionActive, "subscriptionActive");
        this.subscriptionActive = subscriptionActive;
        return this;
    }

    public MyPlex withSubscriptionState(String subscriptionState) {
        Utils.checkNotNull(subscriptionState, "subscriptionState");
        this.subscriptionState = Optional.ofNullable(subscriptionState);
        return this;
    }

    public MyPlex withSubscriptionState(Optional<? extends String> subscriptionState) {
        Utils.checkNotNull(subscriptionState, "subscriptionState");
        this.subscriptionState = subscriptionState;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MyPlex other = (MyPlex) o;
        return 
            java.util.Objects.deepEquals(this.authToken, other.authToken) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.mappingState, other.mappingState) &&
            java.util.Objects.deepEquals(this.mappingError, other.mappingError) &&
            java.util.Objects.deepEquals(this.signInState, other.signInState) &&
            java.util.Objects.deepEquals(this.publicAddress, other.publicAddress) &&
            java.util.Objects.deepEquals(this.publicPort, other.publicPort) &&
            java.util.Objects.deepEquals(this.privateAddress, other.privateAddress) &&
            java.util.Objects.deepEquals(this.privatePort, other.privatePort) &&
            java.util.Objects.deepEquals(this.subscriptionFeatures, other.subscriptionFeatures) &&
            java.util.Objects.deepEquals(this.subscriptionActive, other.subscriptionActive) &&
            java.util.Objects.deepEquals(this.subscriptionState, other.subscriptionState);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            authToken,
            username,
            mappingState,
            mappingError,
            signInState,
            publicAddress,
            publicPort,
            privateAddress,
            privatePort,
            subscriptionFeatures,
            subscriptionActive,
            subscriptionState);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MyPlex.class,
                "authToken", authToken,
                "username", username,
                "mappingState", mappingState,
                "mappingError", mappingError,
                "signInState", signInState,
                "publicAddress", publicAddress,
                "publicPort", publicPort,
                "privateAddress", privateAddress,
                "privatePort", privatePort,
                "subscriptionFeatures", subscriptionFeatures,
                "subscriptionActive", subscriptionActive,
                "subscriptionState", subscriptionState);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> authToken = Optional.empty();
 
        private Optional<? extends String> username = Optional.empty();
 
        private Optional<? extends String> mappingState = Optional.empty();
 
        private Optional<? extends String> mappingError = Optional.empty();
 
        private Optional<? extends String> signInState = Optional.empty();
 
        private Optional<? extends String> publicAddress = Optional.empty();
 
        private Optional<? extends Double> publicPort = Optional.empty();
 
        private Optional<? extends String> privateAddress = Optional.empty();
 
        private Optional<? extends Double> privatePort = Optional.empty();
 
        private Optional<? extends String> subscriptionFeatures = Optional.empty();
 
        private Optional<? extends Boolean> subscriptionActive = Optional.empty();
 
        private Optional<? extends String> subscriptionState = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder authToken(String authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = Optional.ofNullable(authToken);
            return this;
        }

        public Builder authToken(Optional<? extends String> authToken) {
            Utils.checkNotNull(authToken, "authToken");
            this.authToken = authToken;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        public Builder username(Optional<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder mappingState(String mappingState) {
            Utils.checkNotNull(mappingState, "mappingState");
            this.mappingState = Optional.ofNullable(mappingState);
            return this;
        }

        public Builder mappingState(Optional<? extends String> mappingState) {
            Utils.checkNotNull(mappingState, "mappingState");
            this.mappingState = mappingState;
            return this;
        }

        public Builder mappingError(String mappingError) {
            Utils.checkNotNull(mappingError, "mappingError");
            this.mappingError = Optional.ofNullable(mappingError);
            return this;
        }

        public Builder mappingError(Optional<? extends String> mappingError) {
            Utils.checkNotNull(mappingError, "mappingError");
            this.mappingError = mappingError;
            return this;
        }

        public Builder signInState(String signInState) {
            Utils.checkNotNull(signInState, "signInState");
            this.signInState = Optional.ofNullable(signInState);
            return this;
        }

        public Builder signInState(Optional<? extends String> signInState) {
            Utils.checkNotNull(signInState, "signInState");
            this.signInState = signInState;
            return this;
        }

        public Builder publicAddress(String publicAddress) {
            Utils.checkNotNull(publicAddress, "publicAddress");
            this.publicAddress = Optional.ofNullable(publicAddress);
            return this;
        }

        public Builder publicAddress(Optional<? extends String> publicAddress) {
            Utils.checkNotNull(publicAddress, "publicAddress");
            this.publicAddress = publicAddress;
            return this;
        }

        public Builder publicPort(double publicPort) {
            Utils.checkNotNull(publicPort, "publicPort");
            this.publicPort = Optional.ofNullable(publicPort);
            return this;
        }

        public Builder publicPort(Optional<? extends Double> publicPort) {
            Utils.checkNotNull(publicPort, "publicPort");
            this.publicPort = publicPort;
            return this;
        }

        public Builder privateAddress(String privateAddress) {
            Utils.checkNotNull(privateAddress, "privateAddress");
            this.privateAddress = Optional.ofNullable(privateAddress);
            return this;
        }

        public Builder privateAddress(Optional<? extends String> privateAddress) {
            Utils.checkNotNull(privateAddress, "privateAddress");
            this.privateAddress = privateAddress;
            return this;
        }

        public Builder privatePort(double privatePort) {
            Utils.checkNotNull(privatePort, "privatePort");
            this.privatePort = Optional.ofNullable(privatePort);
            return this;
        }

        public Builder privatePort(Optional<? extends Double> privatePort) {
            Utils.checkNotNull(privatePort, "privatePort");
            this.privatePort = privatePort;
            return this;
        }

        public Builder subscriptionFeatures(String subscriptionFeatures) {
            Utils.checkNotNull(subscriptionFeatures, "subscriptionFeatures");
            this.subscriptionFeatures = Optional.ofNullable(subscriptionFeatures);
            return this;
        }

        public Builder subscriptionFeatures(Optional<? extends String> subscriptionFeatures) {
            Utils.checkNotNull(subscriptionFeatures, "subscriptionFeatures");
            this.subscriptionFeatures = subscriptionFeatures;
            return this;
        }

        public Builder subscriptionActive(boolean subscriptionActive) {
            Utils.checkNotNull(subscriptionActive, "subscriptionActive");
            this.subscriptionActive = Optional.ofNullable(subscriptionActive);
            return this;
        }

        public Builder subscriptionActive(Optional<? extends Boolean> subscriptionActive) {
            Utils.checkNotNull(subscriptionActive, "subscriptionActive");
            this.subscriptionActive = subscriptionActive;
            return this;
        }

        public Builder subscriptionState(String subscriptionState) {
            Utils.checkNotNull(subscriptionState, "subscriptionState");
            this.subscriptionState = Optional.ofNullable(subscriptionState);
            return this;
        }

        public Builder subscriptionState(Optional<? extends String> subscriptionState) {
            Utils.checkNotNull(subscriptionState, "subscriptionState");
            this.subscriptionState = subscriptionState;
            return this;
        }
        
        public MyPlex build() {
            return new MyPlex(
                authToken,
                username,
                mappingState,
                mappingError,
                signInState,
                publicAddress,
                publicPort,
                privateAddress,
                privatePort,
                subscriptionFeatures,
                subscriptionActive,
                subscriptionState);
        }
    }
}

