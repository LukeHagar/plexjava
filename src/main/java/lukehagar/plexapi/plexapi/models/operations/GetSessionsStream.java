/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetSessionsStream {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("albumGain")
    private Optional<? extends String> albumGain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("albumPeak")
    private Optional<? extends String> albumPeak;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("albumRange")
    private Optional<? extends String> albumRange;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioChannelLayout")
    private Optional<? extends String> audioChannelLayout;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitDepth")
    private Optional<? extends Integer> bitDepth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    private Optional<? extends Integer> bitrate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channels")
    private Optional<? extends Integer> channels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("codec")
    private Optional<? extends String> codec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayTitle")
    private Optional<? extends String> displayTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extendedDisplayTitle")
    private Optional<? extends String> extendedDisplayTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gain")
    private Optional<? extends String> gain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loudness")
    private Optional<? extends String> loudness;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lra")
    private Optional<? extends String> lra;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("peak")
    private Optional<? extends String> peak;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("samplingRate")
    private Optional<? extends Integer> samplingRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selected")
    private Optional<? extends Boolean> selected;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamType")
    private Optional<? extends Integer> streamType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<? extends String> location;

    @JsonCreator
    public GetSessionsStream(
            @JsonProperty("albumGain") Optional<? extends String> albumGain,
            @JsonProperty("albumPeak") Optional<? extends String> albumPeak,
            @JsonProperty("albumRange") Optional<? extends String> albumRange,
            @JsonProperty("audioChannelLayout") Optional<? extends String> audioChannelLayout,
            @JsonProperty("bitDepth") Optional<? extends Integer> bitDepth,
            @JsonProperty("bitrate") Optional<? extends Integer> bitrate,
            @JsonProperty("channels") Optional<? extends Integer> channels,
            @JsonProperty("codec") Optional<? extends String> codec,
            @JsonProperty("displayTitle") Optional<? extends String> displayTitle,
            @JsonProperty("extendedDisplayTitle") Optional<? extends String> extendedDisplayTitle,
            @JsonProperty("gain") Optional<? extends String> gain,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("loudness") Optional<? extends String> loudness,
            @JsonProperty("lra") Optional<? extends String> lra,
            @JsonProperty("peak") Optional<? extends String> peak,
            @JsonProperty("samplingRate") Optional<? extends Integer> samplingRate,
            @JsonProperty("selected") Optional<? extends Boolean> selected,
            @JsonProperty("streamType") Optional<? extends Integer> streamType,
            @JsonProperty("location") Optional<? extends String> location) {
        Utils.checkNotNull(albumGain, "albumGain");
        Utils.checkNotNull(albumPeak, "albumPeak");
        Utils.checkNotNull(albumRange, "albumRange");
        Utils.checkNotNull(audioChannelLayout, "audioChannelLayout");
        Utils.checkNotNull(bitDepth, "bitDepth");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(channels, "channels");
        Utils.checkNotNull(codec, "codec");
        Utils.checkNotNull(displayTitle, "displayTitle");
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        Utils.checkNotNull(gain, "gain");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(loudness, "loudness");
        Utils.checkNotNull(lra, "lra");
        Utils.checkNotNull(peak, "peak");
        Utils.checkNotNull(samplingRate, "samplingRate");
        Utils.checkNotNull(selected, "selected");
        Utils.checkNotNull(streamType, "streamType");
        Utils.checkNotNull(location, "location");
        this.albumGain = albumGain;
        this.albumPeak = albumPeak;
        this.albumRange = albumRange;
        this.audioChannelLayout = audioChannelLayout;
        this.bitDepth = bitDepth;
        this.bitrate = bitrate;
        this.channels = channels;
        this.codec = codec;
        this.displayTitle = displayTitle;
        this.extendedDisplayTitle = extendedDisplayTitle;
        this.gain = gain;
        this.id = id;
        this.index = index;
        this.loudness = loudness;
        this.lra = lra;
        this.peak = peak;
        this.samplingRate = samplingRate;
        this.selected = selected;
        this.streamType = streamType;
        this.location = location;
    }
    
    public GetSessionsStream() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> albumGain() {
        return (Optional<String>) albumGain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> albumPeak() {
        return (Optional<String>) albumPeak;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> albumRange() {
        return (Optional<String>) albumRange;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> audioChannelLayout() {
        return (Optional<String>) audioChannelLayout;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> bitDepth() {
        return (Optional<Integer>) bitDepth;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> bitrate() {
        return (Optional<Integer>) bitrate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> channels() {
        return (Optional<Integer>) channels;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> codec() {
        return (Optional<String>) codec;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> displayTitle() {
        return (Optional<String>) displayTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> extendedDisplayTitle() {
        return (Optional<String>) extendedDisplayTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> gain() {
        return (Optional<String>) gain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> index() {
        return (Optional<Integer>) index;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> loudness() {
        return (Optional<String>) loudness;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> lra() {
        return (Optional<String>) lra;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> peak() {
        return (Optional<String>) peak;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> samplingRate() {
        return (Optional<Integer>) samplingRate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> selected() {
        return (Optional<Boolean>) selected;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> streamType() {
        return (Optional<Integer>) streamType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> location() {
        return (Optional<String>) location;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetSessionsStream withAlbumGain(String albumGain) {
        Utils.checkNotNull(albumGain, "albumGain");
        this.albumGain = Optional.ofNullable(albumGain);
        return this;
    }

    public GetSessionsStream withAlbumGain(Optional<? extends String> albumGain) {
        Utils.checkNotNull(albumGain, "albumGain");
        this.albumGain = albumGain;
        return this;
    }

    public GetSessionsStream withAlbumPeak(String albumPeak) {
        Utils.checkNotNull(albumPeak, "albumPeak");
        this.albumPeak = Optional.ofNullable(albumPeak);
        return this;
    }

    public GetSessionsStream withAlbumPeak(Optional<? extends String> albumPeak) {
        Utils.checkNotNull(albumPeak, "albumPeak");
        this.albumPeak = albumPeak;
        return this;
    }

    public GetSessionsStream withAlbumRange(String albumRange) {
        Utils.checkNotNull(albumRange, "albumRange");
        this.albumRange = Optional.ofNullable(albumRange);
        return this;
    }

    public GetSessionsStream withAlbumRange(Optional<? extends String> albumRange) {
        Utils.checkNotNull(albumRange, "albumRange");
        this.albumRange = albumRange;
        return this;
    }

    public GetSessionsStream withAudioChannelLayout(String audioChannelLayout) {
        Utils.checkNotNull(audioChannelLayout, "audioChannelLayout");
        this.audioChannelLayout = Optional.ofNullable(audioChannelLayout);
        return this;
    }

    public GetSessionsStream withAudioChannelLayout(Optional<? extends String> audioChannelLayout) {
        Utils.checkNotNull(audioChannelLayout, "audioChannelLayout");
        this.audioChannelLayout = audioChannelLayout;
        return this;
    }

    public GetSessionsStream withBitDepth(int bitDepth) {
        Utils.checkNotNull(bitDepth, "bitDepth");
        this.bitDepth = Optional.ofNullable(bitDepth);
        return this;
    }

    public GetSessionsStream withBitDepth(Optional<? extends Integer> bitDepth) {
        Utils.checkNotNull(bitDepth, "bitDepth");
        this.bitDepth = bitDepth;
        return this;
    }

    public GetSessionsStream withBitrate(int bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = Optional.ofNullable(bitrate);
        return this;
    }

    public GetSessionsStream withBitrate(Optional<? extends Integer> bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    public GetSessionsStream withChannels(int channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = Optional.ofNullable(channels);
        return this;
    }

    public GetSessionsStream withChannels(Optional<? extends Integer> channels) {
        Utils.checkNotNull(channels, "channels");
        this.channels = channels;
        return this;
    }

    public GetSessionsStream withCodec(String codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = Optional.ofNullable(codec);
        return this;
    }

    public GetSessionsStream withCodec(Optional<? extends String> codec) {
        Utils.checkNotNull(codec, "codec");
        this.codec = codec;
        return this;
    }

    public GetSessionsStream withDisplayTitle(String displayTitle) {
        Utils.checkNotNull(displayTitle, "displayTitle");
        this.displayTitle = Optional.ofNullable(displayTitle);
        return this;
    }

    public GetSessionsStream withDisplayTitle(Optional<? extends String> displayTitle) {
        Utils.checkNotNull(displayTitle, "displayTitle");
        this.displayTitle = displayTitle;
        return this;
    }

    public GetSessionsStream withExtendedDisplayTitle(String extendedDisplayTitle) {
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        this.extendedDisplayTitle = Optional.ofNullable(extendedDisplayTitle);
        return this;
    }

    public GetSessionsStream withExtendedDisplayTitle(Optional<? extends String> extendedDisplayTitle) {
        Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
        this.extendedDisplayTitle = extendedDisplayTitle;
        return this;
    }

    public GetSessionsStream withGain(String gain) {
        Utils.checkNotNull(gain, "gain");
        this.gain = Optional.ofNullable(gain);
        return this;
    }

    public GetSessionsStream withGain(Optional<? extends String> gain) {
        Utils.checkNotNull(gain, "gain");
        this.gain = gain;
        return this;
    }

    public GetSessionsStream withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public GetSessionsStream withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetSessionsStream withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetSessionsStream withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetSessionsStream withLoudness(String loudness) {
        Utils.checkNotNull(loudness, "loudness");
        this.loudness = Optional.ofNullable(loudness);
        return this;
    }

    public GetSessionsStream withLoudness(Optional<? extends String> loudness) {
        Utils.checkNotNull(loudness, "loudness");
        this.loudness = loudness;
        return this;
    }

    public GetSessionsStream withLra(String lra) {
        Utils.checkNotNull(lra, "lra");
        this.lra = Optional.ofNullable(lra);
        return this;
    }

    public GetSessionsStream withLra(Optional<? extends String> lra) {
        Utils.checkNotNull(lra, "lra");
        this.lra = lra;
        return this;
    }

    public GetSessionsStream withPeak(String peak) {
        Utils.checkNotNull(peak, "peak");
        this.peak = Optional.ofNullable(peak);
        return this;
    }

    public GetSessionsStream withPeak(Optional<? extends String> peak) {
        Utils.checkNotNull(peak, "peak");
        this.peak = peak;
        return this;
    }

    public GetSessionsStream withSamplingRate(int samplingRate) {
        Utils.checkNotNull(samplingRate, "samplingRate");
        this.samplingRate = Optional.ofNullable(samplingRate);
        return this;
    }

    public GetSessionsStream withSamplingRate(Optional<? extends Integer> samplingRate) {
        Utils.checkNotNull(samplingRate, "samplingRate");
        this.samplingRate = samplingRate;
        return this;
    }

    public GetSessionsStream withSelected(boolean selected) {
        Utils.checkNotNull(selected, "selected");
        this.selected = Optional.ofNullable(selected);
        return this;
    }

    public GetSessionsStream withSelected(Optional<? extends Boolean> selected) {
        Utils.checkNotNull(selected, "selected");
        this.selected = selected;
        return this;
    }

    public GetSessionsStream withStreamType(int streamType) {
        Utils.checkNotNull(streamType, "streamType");
        this.streamType = Optional.ofNullable(streamType);
        return this;
    }

    public GetSessionsStream withStreamType(Optional<? extends Integer> streamType) {
        Utils.checkNotNull(streamType, "streamType");
        this.streamType = streamType;
        return this;
    }

    public GetSessionsStream withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public GetSessionsStream withLocation(Optional<? extends String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSessionsStream other = (GetSessionsStream) o;
        return 
            java.util.Objects.deepEquals(this.albumGain, other.albumGain) &&
            java.util.Objects.deepEquals(this.albumPeak, other.albumPeak) &&
            java.util.Objects.deepEquals(this.albumRange, other.albumRange) &&
            java.util.Objects.deepEquals(this.audioChannelLayout, other.audioChannelLayout) &&
            java.util.Objects.deepEquals(this.bitDepth, other.bitDepth) &&
            java.util.Objects.deepEquals(this.bitrate, other.bitrate) &&
            java.util.Objects.deepEquals(this.channels, other.channels) &&
            java.util.Objects.deepEquals(this.codec, other.codec) &&
            java.util.Objects.deepEquals(this.displayTitle, other.displayTitle) &&
            java.util.Objects.deepEquals(this.extendedDisplayTitle, other.extendedDisplayTitle) &&
            java.util.Objects.deepEquals(this.gain, other.gain) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.loudness, other.loudness) &&
            java.util.Objects.deepEquals(this.lra, other.lra) &&
            java.util.Objects.deepEquals(this.peak, other.peak) &&
            java.util.Objects.deepEquals(this.samplingRate, other.samplingRate) &&
            java.util.Objects.deepEquals(this.selected, other.selected) &&
            java.util.Objects.deepEquals(this.streamType, other.streamType) &&
            java.util.Objects.deepEquals(this.location, other.location);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            albumGain,
            albumPeak,
            albumRange,
            audioChannelLayout,
            bitDepth,
            bitrate,
            channels,
            codec,
            displayTitle,
            extendedDisplayTitle,
            gain,
            id,
            index,
            loudness,
            lra,
            peak,
            samplingRate,
            selected,
            streamType,
            location);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSessionsStream.class,
                "albumGain", albumGain,
                "albumPeak", albumPeak,
                "albumRange", albumRange,
                "audioChannelLayout", audioChannelLayout,
                "bitDepth", bitDepth,
                "bitrate", bitrate,
                "channels", channels,
                "codec", codec,
                "displayTitle", displayTitle,
                "extendedDisplayTitle", extendedDisplayTitle,
                "gain", gain,
                "id", id,
                "index", index,
                "loudness", loudness,
                "lra", lra,
                "peak", peak,
                "samplingRate", samplingRate,
                "selected", selected,
                "streamType", streamType,
                "location", location);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> albumGain = Optional.empty();
 
        private Optional<? extends String> albumPeak = Optional.empty();
 
        private Optional<? extends String> albumRange = Optional.empty();
 
        private Optional<? extends String> audioChannelLayout = Optional.empty();
 
        private Optional<? extends Integer> bitDepth = Optional.empty();
 
        private Optional<? extends Integer> bitrate = Optional.empty();
 
        private Optional<? extends Integer> channels = Optional.empty();
 
        private Optional<? extends String> codec = Optional.empty();
 
        private Optional<? extends String> displayTitle = Optional.empty();
 
        private Optional<? extends String> extendedDisplayTitle = Optional.empty();
 
        private Optional<? extends String> gain = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends String> loudness = Optional.empty();
 
        private Optional<? extends String> lra = Optional.empty();
 
        private Optional<? extends String> peak = Optional.empty();
 
        private Optional<? extends Integer> samplingRate = Optional.empty();
 
        private Optional<? extends Boolean> selected = Optional.empty();
 
        private Optional<? extends Integer> streamType = Optional.empty();
 
        private Optional<? extends String> location = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder albumGain(String albumGain) {
            Utils.checkNotNull(albumGain, "albumGain");
            this.albumGain = Optional.ofNullable(albumGain);
            return this;
        }

        public Builder albumGain(Optional<? extends String> albumGain) {
            Utils.checkNotNull(albumGain, "albumGain");
            this.albumGain = albumGain;
            return this;
        }

        public Builder albumPeak(String albumPeak) {
            Utils.checkNotNull(albumPeak, "albumPeak");
            this.albumPeak = Optional.ofNullable(albumPeak);
            return this;
        }

        public Builder albumPeak(Optional<? extends String> albumPeak) {
            Utils.checkNotNull(albumPeak, "albumPeak");
            this.albumPeak = albumPeak;
            return this;
        }

        public Builder albumRange(String albumRange) {
            Utils.checkNotNull(albumRange, "albumRange");
            this.albumRange = Optional.ofNullable(albumRange);
            return this;
        }

        public Builder albumRange(Optional<? extends String> albumRange) {
            Utils.checkNotNull(albumRange, "albumRange");
            this.albumRange = albumRange;
            return this;
        }

        public Builder audioChannelLayout(String audioChannelLayout) {
            Utils.checkNotNull(audioChannelLayout, "audioChannelLayout");
            this.audioChannelLayout = Optional.ofNullable(audioChannelLayout);
            return this;
        }

        public Builder audioChannelLayout(Optional<? extends String> audioChannelLayout) {
            Utils.checkNotNull(audioChannelLayout, "audioChannelLayout");
            this.audioChannelLayout = audioChannelLayout;
            return this;
        }

        public Builder bitDepth(int bitDepth) {
            Utils.checkNotNull(bitDepth, "bitDepth");
            this.bitDepth = Optional.ofNullable(bitDepth);
            return this;
        }

        public Builder bitDepth(Optional<? extends Integer> bitDepth) {
            Utils.checkNotNull(bitDepth, "bitDepth");
            this.bitDepth = bitDepth;
            return this;
        }

        public Builder bitrate(int bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = Optional.ofNullable(bitrate);
            return this;
        }

        public Builder bitrate(Optional<? extends Integer> bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        public Builder channels(int channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = Optional.ofNullable(channels);
            return this;
        }

        public Builder channels(Optional<? extends Integer> channels) {
            Utils.checkNotNull(channels, "channels");
            this.channels = channels;
            return this;
        }

        public Builder codec(String codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = Optional.ofNullable(codec);
            return this;
        }

        public Builder codec(Optional<? extends String> codec) {
            Utils.checkNotNull(codec, "codec");
            this.codec = codec;
            return this;
        }

        public Builder displayTitle(String displayTitle) {
            Utils.checkNotNull(displayTitle, "displayTitle");
            this.displayTitle = Optional.ofNullable(displayTitle);
            return this;
        }

        public Builder displayTitle(Optional<? extends String> displayTitle) {
            Utils.checkNotNull(displayTitle, "displayTitle");
            this.displayTitle = displayTitle;
            return this;
        }

        public Builder extendedDisplayTitle(String extendedDisplayTitle) {
            Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
            this.extendedDisplayTitle = Optional.ofNullable(extendedDisplayTitle);
            return this;
        }

        public Builder extendedDisplayTitle(Optional<? extends String> extendedDisplayTitle) {
            Utils.checkNotNull(extendedDisplayTitle, "extendedDisplayTitle");
            this.extendedDisplayTitle = extendedDisplayTitle;
            return this;
        }

        public Builder gain(String gain) {
            Utils.checkNotNull(gain, "gain");
            this.gain = Optional.ofNullable(gain);
            return this;
        }

        public Builder gain(Optional<? extends String> gain) {
            Utils.checkNotNull(gain, "gain");
            this.gain = gain;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder loudness(String loudness) {
            Utils.checkNotNull(loudness, "loudness");
            this.loudness = Optional.ofNullable(loudness);
            return this;
        }

        public Builder loudness(Optional<? extends String> loudness) {
            Utils.checkNotNull(loudness, "loudness");
            this.loudness = loudness;
            return this;
        }

        public Builder lra(String lra) {
            Utils.checkNotNull(lra, "lra");
            this.lra = Optional.ofNullable(lra);
            return this;
        }

        public Builder lra(Optional<? extends String> lra) {
            Utils.checkNotNull(lra, "lra");
            this.lra = lra;
            return this;
        }

        public Builder peak(String peak) {
            Utils.checkNotNull(peak, "peak");
            this.peak = Optional.ofNullable(peak);
            return this;
        }

        public Builder peak(Optional<? extends String> peak) {
            Utils.checkNotNull(peak, "peak");
            this.peak = peak;
            return this;
        }

        public Builder samplingRate(int samplingRate) {
            Utils.checkNotNull(samplingRate, "samplingRate");
            this.samplingRate = Optional.ofNullable(samplingRate);
            return this;
        }

        public Builder samplingRate(Optional<? extends Integer> samplingRate) {
            Utils.checkNotNull(samplingRate, "samplingRate");
            this.samplingRate = samplingRate;
            return this;
        }

        public Builder selected(boolean selected) {
            Utils.checkNotNull(selected, "selected");
            this.selected = Optional.ofNullable(selected);
            return this;
        }

        public Builder selected(Optional<? extends Boolean> selected) {
            Utils.checkNotNull(selected, "selected");
            this.selected = selected;
            return this;
        }

        public Builder streamType(int streamType) {
            Utils.checkNotNull(streamType, "streamType");
            this.streamType = Optional.ofNullable(streamType);
            return this;
        }

        public Builder streamType(Optional<? extends Integer> streamType) {
            Utils.checkNotNull(streamType, "streamType");
            this.streamType = streamType;
            return this;
        }

        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<? extends String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }
        
        public GetSessionsStream build() {
            return new GetSessionsStream(
                albumGain,
                albumPeak,
                albumRange,
                audioChannelLayout,
                bitDepth,
                bitrate,
                channels,
                codec,
                displayTitle,
                extendedDisplayTitle,
                gain,
                id,
                index,
                loudness,
                lra,
                peak,
                samplingRate,
                selected,
                streamType,
                location);
        }
    }
}

