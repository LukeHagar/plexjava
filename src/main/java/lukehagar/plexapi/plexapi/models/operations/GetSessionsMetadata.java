/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetSessionsMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Integer> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Integer> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<? extends String> grandparentArt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentGuid")
    private Optional<? extends String> grandparentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<? extends String> grandparentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentRatingKey")
    private Optional<? extends String> grandparentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<? extends String> grandparentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<? extends String> grandparentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<? extends String> librarySectionID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionKey")
    private Optional<? extends String> librarySectionKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionTitle")
    private Optional<? extends String> librarySectionTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("musicAnalysisVersion")
    private Optional<? extends String> musicAnalysisVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<? extends String> parentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<? extends Integer> parentIndex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<? extends String> parentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<? extends String> parentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentStudio")
    private Optional<? extends String> parentStudio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<? extends String> parentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<? extends String> parentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentYear")
    private Optional<? extends Integer> parentYear;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingCount")
    private Optional<? extends Integer> ratingCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sessionKey")
    private Optional<? extends String> sessionKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("titleSort")
    private Optional<? extends String> titleSort;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Integer> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewOffset")
    private Optional<? extends Integer> viewOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    private Optional<? extends java.util.List<GetSessionsMedia>> media;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("User")
    private Optional<? extends User> user;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Player")
    private Optional<? extends Player> player;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Session")
    private Optional<? extends Session> session;

    public GetSessionsMetadata(
            @JsonProperty("addedAt") Optional<? extends Integer> addedAt,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("duration") Optional<? extends Integer> duration,
            @JsonProperty("grandparentArt") Optional<? extends String> grandparentArt,
            @JsonProperty("grandparentGuid") Optional<? extends String> grandparentGuid,
            @JsonProperty("grandparentKey") Optional<? extends String> grandparentKey,
            @JsonProperty("grandparentRatingKey") Optional<? extends String> grandparentRatingKey,
            @JsonProperty("grandparentThumb") Optional<? extends String> grandparentThumb,
            @JsonProperty("grandparentTitle") Optional<? extends String> grandparentTitle,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("librarySectionID") Optional<? extends String> librarySectionID,
            @JsonProperty("librarySectionKey") Optional<? extends String> librarySectionKey,
            @JsonProperty("librarySectionTitle") Optional<? extends String> librarySectionTitle,
            @JsonProperty("musicAnalysisVersion") Optional<? extends String> musicAnalysisVersion,
            @JsonProperty("parentGuid") Optional<? extends String> parentGuid,
            @JsonProperty("parentIndex") Optional<? extends Integer> parentIndex,
            @JsonProperty("parentKey") Optional<? extends String> parentKey,
            @JsonProperty("parentRatingKey") Optional<? extends String> parentRatingKey,
            @JsonProperty("parentStudio") Optional<? extends String> parentStudio,
            @JsonProperty("parentThumb") Optional<? extends String> parentThumb,
            @JsonProperty("parentTitle") Optional<? extends String> parentTitle,
            @JsonProperty("parentYear") Optional<? extends Integer> parentYear,
            @JsonProperty("ratingCount") Optional<? extends Integer> ratingCount,
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("sessionKey") Optional<? extends String> sessionKey,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("titleSort") Optional<? extends String> titleSort,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("updatedAt") Optional<? extends Integer> updatedAt,
            @JsonProperty("viewOffset") Optional<? extends Integer> viewOffset,
            @JsonProperty("Media") Optional<? extends java.util.List<GetSessionsMedia>> media,
            @JsonProperty("User") Optional<? extends User> user,
            @JsonProperty("Player") Optional<? extends Player> player,
            @JsonProperty("Session") Optional<? extends Session> session) {
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(musicAnalysisVersion, "musicAnalysisVersion");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(parentStudio, "parentStudio");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(parentYear, "parentYear");
        Utils.checkNotNull(ratingCount, "ratingCount");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(sessionKey, "sessionKey");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(titleSort, "titleSort");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(viewOffset, "viewOffset");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(player, "player");
        Utils.checkNotNull(session, "session");
        this.addedAt = addedAt;
        this.art = art;
        this.duration = duration;
        this.grandparentArt = grandparentArt;
        this.grandparentGuid = grandparentGuid;
        this.grandparentKey = grandparentKey;
        this.grandparentRatingKey = grandparentRatingKey;
        this.grandparentThumb = grandparentThumb;
        this.grandparentTitle = grandparentTitle;
        this.guid = guid;
        this.index = index;
        this.key = key;
        this.librarySectionID = librarySectionID;
        this.librarySectionKey = librarySectionKey;
        this.librarySectionTitle = librarySectionTitle;
        this.musicAnalysisVersion = musicAnalysisVersion;
        this.parentGuid = parentGuid;
        this.parentIndex = parentIndex;
        this.parentKey = parentKey;
        this.parentRatingKey = parentRatingKey;
        this.parentStudio = parentStudio;
        this.parentThumb = parentThumb;
        this.parentTitle = parentTitle;
        this.parentYear = parentYear;
        this.ratingCount = ratingCount;
        this.ratingKey = ratingKey;
        this.sessionKey = sessionKey;
        this.thumb = thumb;
        this.title = title;
        this.titleSort = titleSort;
        this.type = type;
        this.updatedAt = updatedAt;
        this.viewOffset = viewOffset;
        this.media = media;
        this.user = user;
        this.player = player;
        this.session = session;
    }

    public Optional<? extends Integer> addedAt() {
        return addedAt;
    }

    public Optional<? extends String> art() {
        return art;
    }

    public Optional<? extends Integer> duration() {
        return duration;
    }

    public Optional<? extends String> grandparentArt() {
        return grandparentArt;
    }

    public Optional<? extends String> grandparentGuid() {
        return grandparentGuid;
    }

    public Optional<? extends String> grandparentKey() {
        return grandparentKey;
    }

    public Optional<? extends String> grandparentRatingKey() {
        return grandparentRatingKey;
    }

    public Optional<? extends String> grandparentThumb() {
        return grandparentThumb;
    }

    public Optional<? extends String> grandparentTitle() {
        return grandparentTitle;
    }

    public Optional<? extends String> guid() {
        return guid;
    }

    public Optional<? extends Integer> index() {
        return index;
    }

    public Optional<? extends String> key() {
        return key;
    }

    public Optional<? extends String> librarySectionID() {
        return librarySectionID;
    }

    public Optional<? extends String> librarySectionKey() {
        return librarySectionKey;
    }

    public Optional<? extends String> librarySectionTitle() {
        return librarySectionTitle;
    }

    public Optional<? extends String> musicAnalysisVersion() {
        return musicAnalysisVersion;
    }

    public Optional<? extends String> parentGuid() {
        return parentGuid;
    }

    public Optional<? extends Integer> parentIndex() {
        return parentIndex;
    }

    public Optional<? extends String> parentKey() {
        return parentKey;
    }

    public Optional<? extends String> parentRatingKey() {
        return parentRatingKey;
    }

    public Optional<? extends String> parentStudio() {
        return parentStudio;
    }

    public Optional<? extends String> parentThumb() {
        return parentThumb;
    }

    public Optional<? extends String> parentTitle() {
        return parentTitle;
    }

    public Optional<? extends Integer> parentYear() {
        return parentYear;
    }

    public Optional<? extends Integer> ratingCount() {
        return ratingCount;
    }

    public Optional<? extends String> ratingKey() {
        return ratingKey;
    }

    public Optional<? extends String> sessionKey() {
        return sessionKey;
    }

    public Optional<? extends String> thumb() {
        return thumb;
    }

    public Optional<? extends String> title() {
        return title;
    }

    public Optional<? extends String> titleSort() {
        return titleSort;
    }

    public Optional<? extends String> type() {
        return type;
    }

    public Optional<? extends Integer> updatedAt() {
        return updatedAt;
    }

    public Optional<? extends Integer> viewOffset() {
        return viewOffset;
    }

    public Optional<? extends java.util.List<GetSessionsMedia>> media() {
        return media;
    }

    public Optional<? extends User> user() {
        return user;
    }

    public Optional<? extends Player> player() {
        return player;
    }

    public Optional<? extends Session> session() {
        return session;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetSessionsMetadata withAddedAt(int addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public GetSessionsMetadata withAddedAt(Optional<? extends Integer> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public GetSessionsMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetSessionsMetadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetSessionsMetadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetSessionsMetadata withDuration(Optional<? extends Integer> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetSessionsMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }

    public GetSessionsMetadata withGrandparentArt(Optional<? extends String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    public GetSessionsMetadata withGrandparentGuid(String grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = Optional.ofNullable(grandparentGuid);
        return this;
    }

    public GetSessionsMetadata withGrandparentGuid(Optional<? extends String> grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = grandparentGuid;
        return this;
    }

    public GetSessionsMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }

    public GetSessionsMetadata withGrandparentKey(Optional<? extends String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    public GetSessionsMetadata withGrandparentRatingKey(String grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
        return this;
    }

    public GetSessionsMetadata withGrandparentRatingKey(Optional<? extends String> grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = grandparentRatingKey;
        return this;
    }

    public GetSessionsMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }

    public GetSessionsMetadata withGrandparentThumb(Optional<? extends String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    public GetSessionsMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }

    public GetSessionsMetadata withGrandparentTitle(Optional<? extends String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    public GetSessionsMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public GetSessionsMetadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public GetSessionsMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetSessionsMetadata withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetSessionsMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetSessionsMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetSessionsMetadata withLibrarySectionID(String librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }

    public GetSessionsMetadata withLibrarySectionID(Optional<? extends String> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    public GetSessionsMetadata withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = Optional.ofNullable(librarySectionKey);
        return this;
    }

    public GetSessionsMetadata withLibrarySectionKey(Optional<? extends String> librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    public GetSessionsMetadata withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
        return this;
    }

    public GetSessionsMetadata withLibrarySectionTitle(Optional<? extends String> librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    public GetSessionsMetadata withMusicAnalysisVersion(String musicAnalysisVersion) {
        Utils.checkNotNull(musicAnalysisVersion, "musicAnalysisVersion");
        this.musicAnalysisVersion = Optional.ofNullable(musicAnalysisVersion);
        return this;
    }

    public GetSessionsMetadata withMusicAnalysisVersion(Optional<? extends String> musicAnalysisVersion) {
        Utils.checkNotNull(musicAnalysisVersion, "musicAnalysisVersion");
        this.musicAnalysisVersion = musicAnalysisVersion;
        return this;
    }

    public GetSessionsMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }

    public GetSessionsMetadata withParentGuid(Optional<? extends String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    public GetSessionsMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    public GetSessionsMetadata withParentIndex(Optional<? extends Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    public GetSessionsMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    public GetSessionsMetadata withParentKey(Optional<? extends String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    public GetSessionsMetadata withParentRatingKey(String parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }

    public GetSessionsMetadata withParentRatingKey(Optional<? extends String> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    public GetSessionsMetadata withParentStudio(String parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = Optional.ofNullable(parentStudio);
        return this;
    }

    public GetSessionsMetadata withParentStudio(Optional<? extends String> parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = parentStudio;
        return this;
    }

    public GetSessionsMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    public GetSessionsMetadata withParentThumb(Optional<? extends String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    public GetSessionsMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }

    public GetSessionsMetadata withParentTitle(Optional<? extends String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    public GetSessionsMetadata withParentYear(int parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = Optional.ofNullable(parentYear);
        return this;
    }

    public GetSessionsMetadata withParentYear(Optional<? extends Integer> parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = parentYear;
        return this;
    }

    public GetSessionsMetadata withRatingCount(int ratingCount) {
        Utils.checkNotNull(ratingCount, "ratingCount");
        this.ratingCount = Optional.ofNullable(ratingCount);
        return this;
    }

    public GetSessionsMetadata withRatingCount(Optional<? extends Integer> ratingCount) {
        Utils.checkNotNull(ratingCount, "ratingCount");
        this.ratingCount = ratingCount;
        return this;
    }

    public GetSessionsMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetSessionsMetadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetSessionsMetadata withSessionKey(String sessionKey) {
        Utils.checkNotNull(sessionKey, "sessionKey");
        this.sessionKey = Optional.ofNullable(sessionKey);
        return this;
    }

    public GetSessionsMetadata withSessionKey(Optional<? extends String> sessionKey) {
        Utils.checkNotNull(sessionKey, "sessionKey");
        this.sessionKey = sessionKey;
        return this;
    }

    public GetSessionsMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetSessionsMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetSessionsMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetSessionsMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetSessionsMetadata withTitleSort(String titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = Optional.ofNullable(titleSort);
        return this;
    }

    public GetSessionsMetadata withTitleSort(Optional<? extends String> titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = titleSort;
        return this;
    }

    public GetSessionsMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetSessionsMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetSessionsMetadata withUpdatedAt(int updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public GetSessionsMetadata withUpdatedAt(Optional<? extends Integer> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public GetSessionsMetadata withViewOffset(int viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = Optional.ofNullable(viewOffset);
        return this;
    }

    public GetSessionsMetadata withViewOffset(Optional<? extends Integer> viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = viewOffset;
        return this;
    }

    public GetSessionsMetadata withMedia(java.util.List<GetSessionsMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }

    public GetSessionsMetadata withMedia(Optional<? extends java.util.List<GetSessionsMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public GetSessionsMetadata withUser(User user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    public GetSessionsMetadata withUser(Optional<? extends User> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    public GetSessionsMetadata withPlayer(Player player) {
        Utils.checkNotNull(player, "player");
        this.player = Optional.ofNullable(player);
        return this;
    }

    public GetSessionsMetadata withPlayer(Optional<? extends Player> player) {
        Utils.checkNotNull(player, "player");
        this.player = player;
        return this;
    }

    public GetSessionsMetadata withSession(Session session) {
        Utils.checkNotNull(session, "session");
        this.session = Optional.ofNullable(session);
        return this;
    }

    public GetSessionsMetadata withSession(Optional<? extends Session> session) {
        Utils.checkNotNull(session, "session");
        this.session = session;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSessionsMetadata other = (GetSessionsMetadata) o;
        return 
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.grandparentArt, other.grandparentArt) &&
            java.util.Objects.deepEquals(this.grandparentGuid, other.grandparentGuid) &&
            java.util.Objects.deepEquals(this.grandparentKey, other.grandparentKey) &&
            java.util.Objects.deepEquals(this.grandparentRatingKey, other.grandparentRatingKey) &&
            java.util.Objects.deepEquals(this.grandparentThumb, other.grandparentThumb) &&
            java.util.Objects.deepEquals(this.grandparentTitle, other.grandparentTitle) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            java.util.Objects.deepEquals(this.librarySectionKey, other.librarySectionKey) &&
            java.util.Objects.deepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            java.util.Objects.deepEquals(this.musicAnalysisVersion, other.musicAnalysisVersion) &&
            java.util.Objects.deepEquals(this.parentGuid, other.parentGuid) &&
            java.util.Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            java.util.Objects.deepEquals(this.parentKey, other.parentKey) &&
            java.util.Objects.deepEquals(this.parentRatingKey, other.parentRatingKey) &&
            java.util.Objects.deepEquals(this.parentStudio, other.parentStudio) &&
            java.util.Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            java.util.Objects.deepEquals(this.parentTitle, other.parentTitle) &&
            java.util.Objects.deepEquals(this.parentYear, other.parentYear) &&
            java.util.Objects.deepEquals(this.ratingCount, other.ratingCount) &&
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.sessionKey, other.sessionKey) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.titleSort, other.titleSort) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.viewOffset, other.viewOffset) &&
            java.util.Objects.deepEquals(this.media, other.media) &&
            java.util.Objects.deepEquals(this.user, other.user) &&
            java.util.Objects.deepEquals(this.player, other.player) &&
            java.util.Objects.deepEquals(this.session, other.session);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            addedAt,
            art,
            duration,
            grandparentArt,
            grandparentGuid,
            grandparentKey,
            grandparentRatingKey,
            grandparentThumb,
            grandparentTitle,
            guid,
            index,
            key,
            librarySectionID,
            librarySectionKey,
            librarySectionTitle,
            musicAnalysisVersion,
            parentGuid,
            parentIndex,
            parentKey,
            parentRatingKey,
            parentStudio,
            parentThumb,
            parentTitle,
            parentYear,
            ratingCount,
            ratingKey,
            sessionKey,
            thumb,
            title,
            titleSort,
            type,
            updatedAt,
            viewOffset,
            media,
            user,
            player,
            session);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSessionsMetadata.class,
                "addedAt", addedAt,
                "art", art,
                "duration", duration,
                "grandparentArt", grandparentArt,
                "grandparentGuid", grandparentGuid,
                "grandparentKey", grandparentKey,
                "grandparentRatingKey", grandparentRatingKey,
                "grandparentThumb", grandparentThumb,
                "grandparentTitle", grandparentTitle,
                "guid", guid,
                "index", index,
                "key", key,
                "librarySectionID", librarySectionID,
                "librarySectionKey", librarySectionKey,
                "librarySectionTitle", librarySectionTitle,
                "musicAnalysisVersion", musicAnalysisVersion,
                "parentGuid", parentGuid,
                "parentIndex", parentIndex,
                "parentKey", parentKey,
                "parentRatingKey", parentRatingKey,
                "parentStudio", parentStudio,
                "parentThumb", parentThumb,
                "parentTitle", parentTitle,
                "parentYear", parentYear,
                "ratingCount", ratingCount,
                "ratingKey", ratingKey,
                "sessionKey", sessionKey,
                "thumb", thumb,
                "title", title,
                "titleSort", titleSort,
                "type", type,
                "updatedAt", updatedAt,
                "viewOffset", viewOffset,
                "media", media,
                "user", user,
                "player", player,
                "session", session);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> addedAt = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends Integer> duration = Optional.empty();
 
        private Optional<? extends String> grandparentArt = Optional.empty();
 
        private Optional<? extends String> grandparentGuid = Optional.empty();
 
        private Optional<? extends String> grandparentKey = Optional.empty();
 
        private Optional<? extends String> grandparentRatingKey = Optional.empty();
 
        private Optional<? extends String> grandparentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentTitle = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> librarySectionID = Optional.empty();
 
        private Optional<? extends String> librarySectionKey = Optional.empty();
 
        private Optional<? extends String> librarySectionTitle = Optional.empty();
 
        private Optional<? extends String> musicAnalysisVersion = Optional.empty();
 
        private Optional<? extends String> parentGuid = Optional.empty();
 
        private Optional<? extends Integer> parentIndex = Optional.empty();
 
        private Optional<? extends String> parentKey = Optional.empty();
 
        private Optional<? extends String> parentRatingKey = Optional.empty();
 
        private Optional<? extends String> parentStudio = Optional.empty();
 
        private Optional<? extends String> parentThumb = Optional.empty();
 
        private Optional<? extends String> parentTitle = Optional.empty();
 
        private Optional<? extends Integer> parentYear = Optional.empty();
 
        private Optional<? extends Integer> ratingCount = Optional.empty();
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> sessionKey = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> titleSort = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends Integer> updatedAt = Optional.empty();
 
        private Optional<? extends Integer> viewOffset = Optional.empty();
 
        private Optional<? extends java.util.List<GetSessionsMedia>> media = Optional.empty();
 
        private Optional<? extends User> user = Optional.empty();
 
        private Optional<? extends Player> player = Optional.empty();
 
        private Optional<? extends Session> session = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder addedAt(int addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Integer> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Integer> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        public Builder grandparentArt(Optional<? extends String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }

        public Builder grandparentGuid(String grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = Optional.ofNullable(grandparentGuid);
            return this;
        }

        public Builder grandparentGuid(Optional<? extends String> grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = grandparentGuid;
            return this;
        }

        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        public Builder grandparentKey(Optional<? extends String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }

        public Builder grandparentRatingKey(String grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
            return this;
        }

        public Builder grandparentRatingKey(Optional<? extends String> grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = grandparentRatingKey;
            return this;
        }

        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        public Builder grandparentThumb(Optional<? extends String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }

        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        public Builder grandparentTitle(Optional<? extends String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder librarySectionID(String librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        public Builder librarySectionID(Optional<? extends String> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = Optional.ofNullable(librarySectionKey);
            return this;
        }

        public Builder librarySectionKey(Optional<? extends String> librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }

        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
            return this;
        }

        public Builder librarySectionTitle(Optional<? extends String> librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }

        public Builder musicAnalysisVersion(String musicAnalysisVersion) {
            Utils.checkNotNull(musicAnalysisVersion, "musicAnalysisVersion");
            this.musicAnalysisVersion = Optional.ofNullable(musicAnalysisVersion);
            return this;
        }

        public Builder musicAnalysisVersion(Optional<? extends String> musicAnalysisVersion) {
            Utils.checkNotNull(musicAnalysisVersion, "musicAnalysisVersion");
            this.musicAnalysisVersion = musicAnalysisVersion;
            return this;
        }

        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        public Builder parentGuid(Optional<? extends String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }

        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        public Builder parentIndex(Optional<? extends Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        public Builder parentKey(Optional<? extends String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        public Builder parentRatingKey(String parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        public Builder parentRatingKey(Optional<? extends String> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }

        public Builder parentStudio(String parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = Optional.ofNullable(parentStudio);
            return this;
        }

        public Builder parentStudio(Optional<? extends String> parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = parentStudio;
            return this;
        }

        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        public Builder parentThumb(Optional<? extends String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        public Builder parentTitle(Optional<? extends String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }

        public Builder parentYear(int parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = Optional.ofNullable(parentYear);
            return this;
        }

        public Builder parentYear(Optional<? extends Integer> parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = parentYear;
            return this;
        }

        public Builder ratingCount(int ratingCount) {
            Utils.checkNotNull(ratingCount, "ratingCount");
            this.ratingCount = Optional.ofNullable(ratingCount);
            return this;
        }

        public Builder ratingCount(Optional<? extends Integer> ratingCount) {
            Utils.checkNotNull(ratingCount, "ratingCount");
            this.ratingCount = ratingCount;
            return this;
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder sessionKey(String sessionKey) {
            Utils.checkNotNull(sessionKey, "sessionKey");
            this.sessionKey = Optional.ofNullable(sessionKey);
            return this;
        }

        public Builder sessionKey(Optional<? extends String> sessionKey) {
            Utils.checkNotNull(sessionKey, "sessionKey");
            this.sessionKey = sessionKey;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder titleSort(String titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = Optional.ofNullable(titleSort);
            return this;
        }

        public Builder titleSort(Optional<? extends String> titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = titleSort;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(int updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Integer> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder viewOffset(int viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = Optional.ofNullable(viewOffset);
            return this;
        }

        public Builder viewOffset(Optional<? extends Integer> viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = viewOffset;
            return this;
        }

        public Builder media(java.util.List<GetSessionsMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends java.util.List<GetSessionsMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }

        public Builder user(User user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        public Builder user(Optional<? extends User> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        public Builder player(Player player) {
            Utils.checkNotNull(player, "player");
            this.player = Optional.ofNullable(player);
            return this;
        }

        public Builder player(Optional<? extends Player> player) {
            Utils.checkNotNull(player, "player");
            this.player = player;
            return this;
        }

        public Builder session(Session session) {
            Utils.checkNotNull(session, "session");
            this.session = Optional.ofNullable(session);
            return this;
        }

        public Builder session(Optional<? extends Session> session) {
            Utils.checkNotNull(session, "session");
            this.session = session;
            return this;
        }
        
        public GetSessionsMetadata build() {
            return new GetSessionsMetadata(
                addedAt,
                art,
                duration,
                grandparentArt,
                grandparentGuid,
                grandparentKey,
                grandparentRatingKey,
                grandparentThumb,
                grandparentTitle,
                guid,
                index,
                key,
                librarySectionID,
                librarySectionKey,
                librarySectionTitle,
                musicAnalysisVersion,
                parentGuid,
                parentIndex,
                parentKey,
                parentRatingKey,
                parentStudio,
                parentThumb,
                parentTitle,
                parentYear,
                ratingCount,
                ratingKey,
                sessionKey,
                thumb,
                title,
                titleSort,
                type,
                updatedAt,
                viewOffset,
                media,
                user,
                player,
                session);
        }
    }
}

