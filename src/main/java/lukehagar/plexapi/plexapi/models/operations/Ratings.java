/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class Ratings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image")
    private Optional<? extends String> image;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends Double> value;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    public Ratings(
            @JsonProperty("image") Optional<? extends String> image,
            @JsonProperty("value") Optional<? extends Double> value,
            @JsonProperty("type") Optional<? extends String> type) {
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(type, "type");
        this.image = image;
        this.value = value;
        this.type = type;
    }

    public Optional<? extends String> image() {
        return image;
    }

    public Optional<? extends Double> value() {
        return value;
    }

    public Optional<? extends String> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Ratings withImage(String image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    public Ratings withImage(Optional<? extends String> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    public Ratings withValue(double value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public Ratings withValue(Optional<? extends Double> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public Ratings withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Ratings withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Ratings other = (Ratings) o;
        return 
            java.util.Objects.deepEquals(this.image, other.image) &&
            java.util.Objects.deepEquals(this.value, other.value) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            image,
            value,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Ratings.class,
                "image", image,
                "value", value,
                "type", type);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> image = Optional.empty();
 
        private Optional<? extends Double> value = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder image(String image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends String> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        public Builder value(double value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends Double> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public Ratings build() {
            return new Ratings(
                image,
                value,
                type);
        }
    }
}

