/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetLibraryItemsRequest {

    /**
     * the Id of the library to query
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sectionId")
    private java.lang.Object sectionId;

    /**
     * A key representing a specific tag within the section.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=tag")
    private Tag tag;

    /**
     * Adds the Guids object to the response
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeGuids")
    private Optional<? extends Long> includeGuids;

    @JsonCreator
    public GetLibraryItemsRequest(
            java.lang.Object sectionId,
            Tag tag,
            Optional<? extends Long> includeGuids) {
        Utils.checkNotNull(sectionId, "sectionId");
        Utils.checkNotNull(tag, "tag");
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.sectionId = sectionId;
        this.tag = tag;
        this.includeGuids = includeGuids;
    }
    
    public GetLibraryItemsRequest(
            java.lang.Object sectionId,
            Tag tag) {
        this(sectionId, tag, Optional.empty());
    }

    /**
     * the Id of the library to query
     */
    @JsonIgnore
    public java.lang.Object sectionId() {
        return sectionId;
    }

    /**
     * A key representing a specific tag within the section.
     */
    @JsonIgnore
    public Tag tag() {
        return tag;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> includeGuids() {
        return (Optional<Long>) includeGuids;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the Id of the library to query
     */
    public GetLibraryItemsRequest withSectionId(java.lang.Object sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = sectionId;
        return this;
    }

    /**
     * A key representing a specific tag within the section.
     */
    public GetLibraryItemsRequest withTag(Tag tag) {
        Utils.checkNotNull(tag, "tag");
        this.tag = tag;
        return this;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    public GetLibraryItemsRequest withIncludeGuids(long includeGuids) {
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.includeGuids = Optional.ofNullable(includeGuids);
        return this;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    public GetLibraryItemsRequest withIncludeGuids(Optional<? extends Long> includeGuids) {
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.includeGuids = includeGuids;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsRequest other = (GetLibraryItemsRequest) o;
        return 
            java.util.Objects.deepEquals(this.sectionId, other.sectionId) &&
            java.util.Objects.deepEquals(this.tag, other.tag) &&
            java.util.Objects.deepEquals(this.includeGuids, other.includeGuids);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sectionId,
            tag,
            includeGuids);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsRequest.class,
                "sectionId", sectionId,
                "tag", tag,
                "includeGuids", includeGuids);
    }
    
    public final static class Builder {
 
        private java.lang.Object sectionId;
 
        private Tag tag;
 
        private Optional<? extends Long> includeGuids = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the Id of the library to query
         */
        public Builder sectionId(java.lang.Object sectionId) {
            Utils.checkNotNull(sectionId, "sectionId");
            this.sectionId = sectionId;
            return this;
        }

        /**
         * A key representing a specific tag within the section.
         */
        public Builder tag(Tag tag) {
            Utils.checkNotNull(tag, "tag");
            this.tag = tag;
            return this;
        }

        /**
         * Adds the Guids object to the response
         * 
         */
        public Builder includeGuids(long includeGuids) {
            Utils.checkNotNull(includeGuids, "includeGuids");
            this.includeGuids = Optional.ofNullable(includeGuids);
            return this;
        }

        /**
         * Adds the Guids object to the response
         * 
         */
        public Builder includeGuids(Optional<? extends Long> includeGuids) {
            Utils.checkNotNull(includeGuids, "includeGuids");
            this.includeGuids = includeGuids;
            return this;
        }
        
        public GetLibraryItemsRequest build() {
            return new GetLibraryItemsRequest(
                sectionId,
                tag,
                includeGuids);
        }
    }
}

