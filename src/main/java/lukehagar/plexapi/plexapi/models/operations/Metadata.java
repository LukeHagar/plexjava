/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class Metadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("studio")
    private Optional<? extends String> studio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    private Optional<? extends String> tagline;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Integer> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Integer> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("publicPagesURL")
    private Optional<? extends String> publicPagesURL;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<? extends String> slug;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userState")
    private Optional<? extends Boolean> userState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<? extends String> contentRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<? extends LocalDate> originallyAvailableAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<? extends Integer> year;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Image")
    private Optional<? extends java.util.List<Image>> image;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banner")
    private Optional<? extends String> banner;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    private Optional<? extends Double> rating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Optional<? extends Integer> expiresAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalTitle")
    private Optional<? extends String> originalTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRating")
    private Optional<? extends Double> audienceRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRatingImage")
    private Optional<? extends String> audienceRatingImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingImage")
    private Optional<? extends String> ratingImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imdbRatingCount")
    private Optional<? extends Integer> imdbRatingCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subtype")
    private Optional<? extends String> subtype;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("theme")
    private Optional<? extends String> theme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<? extends Integer> leafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childCount")
    private Optional<? extends Integer> childCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("isContinuingSeries")
    private Optional<? extends Boolean> isContinuingSeries;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipChildren")
    private Optional<? extends Boolean> skipChildren;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("availabilityId")
    private Optional<? extends String> availabilityId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingMediaId")
    private Optional<? extends String> streamingMediaId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playableKey")
    private Optional<? extends String> playableKey;

    @JsonCreator
    public Metadata(
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("studio") Optional<? extends String> studio,
            @JsonProperty("tagline") Optional<? extends String> tagline,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("addedAt") Optional<? extends Integer> addedAt,
            @JsonProperty("duration") Optional<? extends Integer> duration,
            @JsonProperty("publicPagesURL") Optional<? extends String> publicPagesURL,
            @JsonProperty("slug") Optional<? extends String> slug,
            @JsonProperty("userState") Optional<? extends Boolean> userState,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("contentRating") Optional<? extends String> contentRating,
            @JsonProperty("originallyAvailableAt") Optional<? extends LocalDate> originallyAvailableAt,
            @JsonProperty("year") Optional<? extends Integer> year,
            @JsonProperty("Image") Optional<? extends java.util.List<Image>> image,
            @JsonProperty("banner") Optional<? extends String> banner,
            @JsonProperty("rating") Optional<? extends Double> rating,
            @JsonProperty("expiresAt") Optional<? extends Integer> expiresAt,
            @JsonProperty("originalTitle") Optional<? extends String> originalTitle,
            @JsonProperty("audienceRating") Optional<? extends Double> audienceRating,
            @JsonProperty("audienceRatingImage") Optional<? extends String> audienceRatingImage,
            @JsonProperty("ratingImage") Optional<? extends String> ratingImage,
            @JsonProperty("imdbRatingCount") Optional<? extends Integer> imdbRatingCount,
            @JsonProperty("subtype") Optional<? extends String> subtype,
            @JsonProperty("theme") Optional<? extends String> theme,
            @JsonProperty("leafCount") Optional<? extends Integer> leafCount,
            @JsonProperty("childCount") Optional<? extends Integer> childCount,
            @JsonProperty("isContinuingSeries") Optional<? extends Boolean> isContinuingSeries,
            @JsonProperty("skipChildren") Optional<? extends Boolean> skipChildren,
            @JsonProperty("availabilityId") Optional<? extends String> availabilityId,
            @JsonProperty("streamingMediaId") Optional<? extends String> streamingMediaId,
            @JsonProperty("playableKey") Optional<? extends String> playableKey) {
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(studio, "studio");
        Utils.checkNotNull(tagline, "tagline");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(publicPagesURL, "publicPagesURL");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(userState, "userState");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(image, "image");
        Utils.checkNotNull(banner, "banner");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(expiresAt, "expiresAt");
        Utils.checkNotNull(originalTitle, "originalTitle");
        Utils.checkNotNull(audienceRating, "audienceRating");
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        Utils.checkNotNull(ratingImage, "ratingImage");
        Utils.checkNotNull(imdbRatingCount, "imdbRatingCount");
        Utils.checkNotNull(subtype, "subtype");
        Utils.checkNotNull(theme, "theme");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(isContinuingSeries, "isContinuingSeries");
        Utils.checkNotNull(skipChildren, "skipChildren");
        Utils.checkNotNull(availabilityId, "availabilityId");
        Utils.checkNotNull(streamingMediaId, "streamingMediaId");
        Utils.checkNotNull(playableKey, "playableKey");
        this.art = art;
        this.guid = guid;
        this.key = key;
        this.ratingKey = ratingKey;
        this.studio = studio;
        this.tagline = tagline;
        this.type = type;
        this.thumb = thumb;
        this.addedAt = addedAt;
        this.duration = duration;
        this.publicPagesURL = publicPagesURL;
        this.slug = slug;
        this.userState = userState;
        this.title = title;
        this.contentRating = contentRating;
        this.originallyAvailableAt = originallyAvailableAt;
        this.year = year;
        this.image = image;
        this.banner = banner;
        this.rating = rating;
        this.expiresAt = expiresAt;
        this.originalTitle = originalTitle;
        this.audienceRating = audienceRating;
        this.audienceRatingImage = audienceRatingImage;
        this.ratingImage = ratingImage;
        this.imdbRatingCount = imdbRatingCount;
        this.subtype = subtype;
        this.theme = theme;
        this.leafCount = leafCount;
        this.childCount = childCount;
        this.isContinuingSeries = isContinuingSeries;
        this.skipChildren = skipChildren;
        this.availabilityId = availabilityId;
        this.streamingMediaId = streamingMediaId;
        this.playableKey = playableKey;
    }
    
    public Metadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> art() {
        return (Optional<String>) art;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> guid() {
        return (Optional<String>) guid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingKey() {
        return (Optional<String>) ratingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> studio() {
        return (Optional<String>) studio;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> tagline() {
        return (Optional<String>) tagline;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> type() {
        return (Optional<String>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> thumb() {
        return (Optional<String>) thumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> addedAt() {
        return (Optional<Integer>) addedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> duration() {
        return (Optional<Integer>) duration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> publicPagesURL() {
        return (Optional<String>) publicPagesURL;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> slug() {
        return (Optional<String>) slug;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> userState() {
        return (Optional<Boolean>) userState;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> contentRating() {
        return (Optional<String>) contentRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> originallyAvailableAt() {
        return (Optional<LocalDate>) originallyAvailableAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> year() {
        return (Optional<Integer>) year;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Image>> image() {
        return (Optional<java.util.List<Image>>) image;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> banner() {
        return (Optional<String>) banner;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> rating() {
        return (Optional<Double>) rating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> expiresAt() {
        return (Optional<Integer>) expiresAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> originalTitle() {
        return (Optional<String>) originalTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> audienceRating() {
        return (Optional<Double>) audienceRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> audienceRatingImage() {
        return (Optional<String>) audienceRatingImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingImage() {
        return (Optional<String>) ratingImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> imdbRatingCount() {
        return (Optional<Integer>) imdbRatingCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> subtype() {
        return (Optional<String>) subtype;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> theme() {
        return (Optional<String>) theme;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> leafCount() {
        return (Optional<Integer>) leafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> childCount() {
        return (Optional<Integer>) childCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> isContinuingSeries() {
        return (Optional<Boolean>) isContinuingSeries;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> skipChildren() {
        return (Optional<Boolean>) skipChildren;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> availabilityId() {
        return (Optional<String>) availabilityId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> streamingMediaId() {
        return (Optional<String>) streamingMediaId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> playableKey() {
        return (Optional<String>) playableKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Metadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public Metadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public Metadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public Metadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public Metadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public Metadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public Metadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public Metadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public Metadata withStudio(String studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = Optional.ofNullable(studio);
        return this;
    }

    public Metadata withStudio(Optional<? extends String> studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = studio;
        return this;
    }

    public Metadata withTagline(String tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = Optional.ofNullable(tagline);
        return this;
    }

    public Metadata withTagline(Optional<? extends String> tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = tagline;
        return this;
    }

    public Metadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Metadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Metadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public Metadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public Metadata withAddedAt(int addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public Metadata withAddedAt(Optional<? extends Integer> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public Metadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public Metadata withDuration(Optional<? extends Integer> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public Metadata withPublicPagesURL(String publicPagesURL) {
        Utils.checkNotNull(publicPagesURL, "publicPagesURL");
        this.publicPagesURL = Optional.ofNullable(publicPagesURL);
        return this;
    }

    public Metadata withPublicPagesURL(Optional<? extends String> publicPagesURL) {
        Utils.checkNotNull(publicPagesURL, "publicPagesURL");
        this.publicPagesURL = publicPagesURL;
        return this;
    }

    public Metadata withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }

    public Metadata withSlug(Optional<? extends String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public Metadata withUserState(boolean userState) {
        Utils.checkNotNull(userState, "userState");
        this.userState = Optional.ofNullable(userState);
        return this;
    }

    public Metadata withUserState(Optional<? extends Boolean> userState) {
        Utils.checkNotNull(userState, "userState");
        this.userState = userState;
        return this;
    }

    public Metadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public Metadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Metadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }

    public Metadata withContentRating(Optional<? extends String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    public Metadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }

    public Metadata withOriginallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public Metadata withYear(int year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    public Metadata withYear(Optional<? extends Integer> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    public Metadata withImage(java.util.List<Image> image) {
        Utils.checkNotNull(image, "image");
        this.image = Optional.ofNullable(image);
        return this;
    }

    public Metadata withImage(Optional<? extends java.util.List<Image>> image) {
        Utils.checkNotNull(image, "image");
        this.image = image;
        return this;
    }

    public Metadata withBanner(String banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = Optional.ofNullable(banner);
        return this;
    }

    public Metadata withBanner(Optional<? extends String> banner) {
        Utils.checkNotNull(banner, "banner");
        this.banner = banner;
        return this;
    }

    public Metadata withRating(double rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = Optional.ofNullable(rating);
        return this;
    }

    public Metadata withRating(Optional<? extends Double> rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    public Metadata withExpiresAt(int expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = Optional.ofNullable(expiresAt);
        return this;
    }

    public Metadata withExpiresAt(Optional<? extends Integer> expiresAt) {
        Utils.checkNotNull(expiresAt, "expiresAt");
        this.expiresAt = expiresAt;
        return this;
    }

    public Metadata withOriginalTitle(String originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = Optional.ofNullable(originalTitle);
        return this;
    }

    public Metadata withOriginalTitle(Optional<? extends String> originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = originalTitle;
        return this;
    }

    public Metadata withAudienceRating(double audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = Optional.ofNullable(audienceRating);
        return this;
    }

    public Metadata withAudienceRating(Optional<? extends Double> audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = audienceRating;
        return this;
    }

    public Metadata withAudienceRatingImage(String audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
        return this;
    }

    public Metadata withAudienceRatingImage(Optional<? extends String> audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = audienceRatingImage;
        return this;
    }

    public Metadata withRatingImage(String ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = Optional.ofNullable(ratingImage);
        return this;
    }

    public Metadata withRatingImage(Optional<? extends String> ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = ratingImage;
        return this;
    }

    public Metadata withImdbRatingCount(int imdbRatingCount) {
        Utils.checkNotNull(imdbRatingCount, "imdbRatingCount");
        this.imdbRatingCount = Optional.ofNullable(imdbRatingCount);
        return this;
    }

    public Metadata withImdbRatingCount(Optional<? extends Integer> imdbRatingCount) {
        Utils.checkNotNull(imdbRatingCount, "imdbRatingCount");
        this.imdbRatingCount = imdbRatingCount;
        return this;
    }

    public Metadata withSubtype(String subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = Optional.ofNullable(subtype);
        return this;
    }

    public Metadata withSubtype(Optional<? extends String> subtype) {
        Utils.checkNotNull(subtype, "subtype");
        this.subtype = subtype;
        return this;
    }

    public Metadata withTheme(String theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = Optional.ofNullable(theme);
        return this;
    }

    public Metadata withTheme(Optional<? extends String> theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = theme;
        return this;
    }

    public Metadata withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    public Metadata withLeafCount(Optional<? extends Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    public Metadata withChildCount(int childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = Optional.ofNullable(childCount);
        return this;
    }

    public Metadata withChildCount(Optional<? extends Integer> childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    public Metadata withIsContinuingSeries(boolean isContinuingSeries) {
        Utils.checkNotNull(isContinuingSeries, "isContinuingSeries");
        this.isContinuingSeries = Optional.ofNullable(isContinuingSeries);
        return this;
    }

    public Metadata withIsContinuingSeries(Optional<? extends Boolean> isContinuingSeries) {
        Utils.checkNotNull(isContinuingSeries, "isContinuingSeries");
        this.isContinuingSeries = isContinuingSeries;
        return this;
    }

    public Metadata withSkipChildren(boolean skipChildren) {
        Utils.checkNotNull(skipChildren, "skipChildren");
        this.skipChildren = Optional.ofNullable(skipChildren);
        return this;
    }

    public Metadata withSkipChildren(Optional<? extends Boolean> skipChildren) {
        Utils.checkNotNull(skipChildren, "skipChildren");
        this.skipChildren = skipChildren;
        return this;
    }

    public Metadata withAvailabilityId(String availabilityId) {
        Utils.checkNotNull(availabilityId, "availabilityId");
        this.availabilityId = Optional.ofNullable(availabilityId);
        return this;
    }

    public Metadata withAvailabilityId(Optional<? extends String> availabilityId) {
        Utils.checkNotNull(availabilityId, "availabilityId");
        this.availabilityId = availabilityId;
        return this;
    }

    public Metadata withStreamingMediaId(String streamingMediaId) {
        Utils.checkNotNull(streamingMediaId, "streamingMediaId");
        this.streamingMediaId = Optional.ofNullable(streamingMediaId);
        return this;
    }

    public Metadata withStreamingMediaId(Optional<? extends String> streamingMediaId) {
        Utils.checkNotNull(streamingMediaId, "streamingMediaId");
        this.streamingMediaId = streamingMediaId;
        return this;
    }

    public Metadata withPlayableKey(String playableKey) {
        Utils.checkNotNull(playableKey, "playableKey");
        this.playableKey = Optional.ofNullable(playableKey);
        return this;
    }

    public Metadata withPlayableKey(Optional<? extends String> playableKey) {
        Utils.checkNotNull(playableKey, "playableKey");
        this.playableKey = playableKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Metadata other = (Metadata) o;
        return 
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.studio, other.studio) &&
            java.util.Objects.deepEquals(this.tagline, other.tagline) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.publicPagesURL, other.publicPagesURL) &&
            java.util.Objects.deepEquals(this.slug, other.slug) &&
            java.util.Objects.deepEquals(this.userState, other.userState) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.contentRating, other.contentRating) &&
            java.util.Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            java.util.Objects.deepEquals(this.year, other.year) &&
            java.util.Objects.deepEquals(this.image, other.image) &&
            java.util.Objects.deepEquals(this.banner, other.banner) &&
            java.util.Objects.deepEquals(this.rating, other.rating) &&
            java.util.Objects.deepEquals(this.expiresAt, other.expiresAt) &&
            java.util.Objects.deepEquals(this.originalTitle, other.originalTitle) &&
            java.util.Objects.deepEquals(this.audienceRating, other.audienceRating) &&
            java.util.Objects.deepEquals(this.audienceRatingImage, other.audienceRatingImage) &&
            java.util.Objects.deepEquals(this.ratingImage, other.ratingImage) &&
            java.util.Objects.deepEquals(this.imdbRatingCount, other.imdbRatingCount) &&
            java.util.Objects.deepEquals(this.subtype, other.subtype) &&
            java.util.Objects.deepEquals(this.theme, other.theme) &&
            java.util.Objects.deepEquals(this.leafCount, other.leafCount) &&
            java.util.Objects.deepEquals(this.childCount, other.childCount) &&
            java.util.Objects.deepEquals(this.isContinuingSeries, other.isContinuingSeries) &&
            java.util.Objects.deepEquals(this.skipChildren, other.skipChildren) &&
            java.util.Objects.deepEquals(this.availabilityId, other.availabilityId) &&
            java.util.Objects.deepEquals(this.streamingMediaId, other.streamingMediaId) &&
            java.util.Objects.deepEquals(this.playableKey, other.playableKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            art,
            guid,
            key,
            ratingKey,
            studio,
            tagline,
            type,
            thumb,
            addedAt,
            duration,
            publicPagesURL,
            slug,
            userState,
            title,
            contentRating,
            originallyAvailableAt,
            year,
            image,
            banner,
            rating,
            expiresAt,
            originalTitle,
            audienceRating,
            audienceRatingImage,
            ratingImage,
            imdbRatingCount,
            subtype,
            theme,
            leafCount,
            childCount,
            isContinuingSeries,
            skipChildren,
            availabilityId,
            streamingMediaId,
            playableKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Metadata.class,
                "art", art,
                "guid", guid,
                "key", key,
                "ratingKey", ratingKey,
                "studio", studio,
                "tagline", tagline,
                "type", type,
                "thumb", thumb,
                "addedAt", addedAt,
                "duration", duration,
                "publicPagesURL", publicPagesURL,
                "slug", slug,
                "userState", userState,
                "title", title,
                "contentRating", contentRating,
                "originallyAvailableAt", originallyAvailableAt,
                "year", year,
                "image", image,
                "banner", banner,
                "rating", rating,
                "expiresAt", expiresAt,
                "originalTitle", originalTitle,
                "audienceRating", audienceRating,
                "audienceRatingImage", audienceRatingImage,
                "ratingImage", ratingImage,
                "imdbRatingCount", imdbRatingCount,
                "subtype", subtype,
                "theme", theme,
                "leafCount", leafCount,
                "childCount", childCount,
                "isContinuingSeries", isContinuingSeries,
                "skipChildren", skipChildren,
                "availabilityId", availabilityId,
                "streamingMediaId", streamingMediaId,
                "playableKey", playableKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> studio = Optional.empty();
 
        private Optional<? extends String> tagline = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends Integer> addedAt = Optional.empty();
 
        private Optional<? extends Integer> duration = Optional.empty();
 
        private Optional<? extends String> publicPagesURL = Optional.empty();
 
        private Optional<? extends String> slug = Optional.empty();
 
        private Optional<? extends Boolean> userState = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> contentRating = Optional.empty();
 
        private Optional<? extends LocalDate> originallyAvailableAt = Optional.empty();
 
        private Optional<? extends Integer> year = Optional.empty();
 
        private Optional<? extends java.util.List<Image>> image = Optional.empty();
 
        private Optional<? extends String> banner = Optional.empty();
 
        private Optional<? extends Double> rating = Optional.empty();
 
        private Optional<? extends Integer> expiresAt = Optional.empty();
 
        private Optional<? extends String> originalTitle = Optional.empty();
 
        private Optional<? extends Double> audienceRating = Optional.empty();
 
        private Optional<? extends String> audienceRatingImage = Optional.empty();
 
        private Optional<? extends String> ratingImage = Optional.empty();
 
        private Optional<? extends Integer> imdbRatingCount = Optional.empty();
 
        private Optional<? extends String> subtype = Optional.empty();
 
        private Optional<? extends String> theme = Optional.empty();
 
        private Optional<? extends Integer> leafCount = Optional.empty();
 
        private Optional<? extends Integer> childCount = Optional.empty();
 
        private Optional<? extends Boolean> isContinuingSeries = Optional.empty();
 
        private Optional<? extends Boolean> skipChildren = Optional.empty();
 
        private Optional<? extends String> availabilityId = Optional.empty();
 
        private Optional<? extends String> streamingMediaId = Optional.empty();
 
        private Optional<? extends String> playableKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder studio(String studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = Optional.ofNullable(studio);
            return this;
        }

        public Builder studio(Optional<? extends String> studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = studio;
            return this;
        }

        public Builder tagline(String tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = Optional.ofNullable(tagline);
            return this;
        }

        public Builder tagline(Optional<? extends String> tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = tagline;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder addedAt(int addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Integer> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Integer> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder publicPagesURL(String publicPagesURL) {
            Utils.checkNotNull(publicPagesURL, "publicPagesURL");
            this.publicPagesURL = Optional.ofNullable(publicPagesURL);
            return this;
        }

        public Builder publicPagesURL(Optional<? extends String> publicPagesURL) {
            Utils.checkNotNull(publicPagesURL, "publicPagesURL");
            this.publicPagesURL = publicPagesURL;
            return this;
        }

        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        public Builder slug(Optional<? extends String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        public Builder userState(boolean userState) {
            Utils.checkNotNull(userState, "userState");
            this.userState = Optional.ofNullable(userState);
            return this;
        }

        public Builder userState(Optional<? extends Boolean> userState) {
            Utils.checkNotNull(userState, "userState");
            this.userState = userState;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        public Builder contentRating(Optional<? extends String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }

        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        public Builder originallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        public Builder year(int year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        public Builder year(Optional<? extends Integer> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        public Builder image(java.util.List<Image> image) {
            Utils.checkNotNull(image, "image");
            this.image = Optional.ofNullable(image);
            return this;
        }

        public Builder image(Optional<? extends java.util.List<Image>> image) {
            Utils.checkNotNull(image, "image");
            this.image = image;
            return this;
        }

        public Builder banner(String banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = Optional.ofNullable(banner);
            return this;
        }

        public Builder banner(Optional<? extends String> banner) {
            Utils.checkNotNull(banner, "banner");
            this.banner = banner;
            return this;
        }

        public Builder rating(double rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        public Builder rating(Optional<? extends Double> rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        public Builder expiresAt(int expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        public Builder expiresAt(Optional<? extends Integer> expiresAt) {
            Utils.checkNotNull(expiresAt, "expiresAt");
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder originalTitle(String originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = Optional.ofNullable(originalTitle);
            return this;
        }

        public Builder originalTitle(Optional<? extends String> originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = originalTitle;
            return this;
        }

        public Builder audienceRating(double audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = Optional.ofNullable(audienceRating);
            return this;
        }

        public Builder audienceRating(Optional<? extends Double> audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = audienceRating;
            return this;
        }

        public Builder audienceRatingImage(String audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
            return this;
        }

        public Builder audienceRatingImage(Optional<? extends String> audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = audienceRatingImage;
            return this;
        }

        public Builder ratingImage(String ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = Optional.ofNullable(ratingImage);
            return this;
        }

        public Builder ratingImage(Optional<? extends String> ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = ratingImage;
            return this;
        }

        public Builder imdbRatingCount(int imdbRatingCount) {
            Utils.checkNotNull(imdbRatingCount, "imdbRatingCount");
            this.imdbRatingCount = Optional.ofNullable(imdbRatingCount);
            return this;
        }

        public Builder imdbRatingCount(Optional<? extends Integer> imdbRatingCount) {
            Utils.checkNotNull(imdbRatingCount, "imdbRatingCount");
            this.imdbRatingCount = imdbRatingCount;
            return this;
        }

        public Builder subtype(String subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = Optional.ofNullable(subtype);
            return this;
        }

        public Builder subtype(Optional<? extends String> subtype) {
            Utils.checkNotNull(subtype, "subtype");
            this.subtype = subtype;
            return this;
        }

        public Builder theme(String theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        public Builder theme(Optional<? extends String> theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = theme;
            return this;
        }

        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        public Builder leafCount(Optional<? extends Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        public Builder childCount(int childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = Optional.ofNullable(childCount);
            return this;
        }

        public Builder childCount(Optional<? extends Integer> childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }

        public Builder isContinuingSeries(boolean isContinuingSeries) {
            Utils.checkNotNull(isContinuingSeries, "isContinuingSeries");
            this.isContinuingSeries = Optional.ofNullable(isContinuingSeries);
            return this;
        }

        public Builder isContinuingSeries(Optional<? extends Boolean> isContinuingSeries) {
            Utils.checkNotNull(isContinuingSeries, "isContinuingSeries");
            this.isContinuingSeries = isContinuingSeries;
            return this;
        }

        public Builder skipChildren(boolean skipChildren) {
            Utils.checkNotNull(skipChildren, "skipChildren");
            this.skipChildren = Optional.ofNullable(skipChildren);
            return this;
        }

        public Builder skipChildren(Optional<? extends Boolean> skipChildren) {
            Utils.checkNotNull(skipChildren, "skipChildren");
            this.skipChildren = skipChildren;
            return this;
        }

        public Builder availabilityId(String availabilityId) {
            Utils.checkNotNull(availabilityId, "availabilityId");
            this.availabilityId = Optional.ofNullable(availabilityId);
            return this;
        }

        public Builder availabilityId(Optional<? extends String> availabilityId) {
            Utils.checkNotNull(availabilityId, "availabilityId");
            this.availabilityId = availabilityId;
            return this;
        }

        public Builder streamingMediaId(String streamingMediaId) {
            Utils.checkNotNull(streamingMediaId, "streamingMediaId");
            this.streamingMediaId = Optional.ofNullable(streamingMediaId);
            return this;
        }

        public Builder streamingMediaId(Optional<? extends String> streamingMediaId) {
            Utils.checkNotNull(streamingMediaId, "streamingMediaId");
            this.streamingMediaId = streamingMediaId;
            return this;
        }

        public Builder playableKey(String playableKey) {
            Utils.checkNotNull(playableKey, "playableKey");
            this.playableKey = Optional.ofNullable(playableKey);
            return this;
        }

        public Builder playableKey(Optional<? extends String> playableKey) {
            Utils.checkNotNull(playableKey, "playableKey");
            this.playableKey = playableKey;
            return this;
        }
        
        public Metadata build() {
            return new Metadata(
                art,
                guid,
                key,
                ratingKey,
                studio,
                tagline,
                type,
                thumb,
                addedAt,
                duration,
                publicPagesURL,
                slug,
                userState,
                title,
                contentRating,
                originallyAvailableAt,
                year,
                image,
                banner,
                rating,
                expiresAt,
                originalTitle,
                audienceRating,
                audienceRatingImage,
                ratingImage,
                imdbRatingCount,
                subtype,
                theme,
                leafCount,
                childCount,
                isContinuingSeries,
                skipChildren,
                availabilityId,
                streamingMediaId,
                playableKey);
        }
    }
}

