/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetTopWatchedContentRequest {

    /**
     * the library type (1 - movies, 2 - shows, 3 - music)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private long type;

    /**
     * Adds the Guids object to the response
     * 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includeGuids")
    private Optional<? extends Long> includeGuids;

    @JsonCreator
    public GetTopWatchedContentRequest(
            long type,
            Optional<? extends Long> includeGuids) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.type = type;
        this.includeGuids = includeGuids;
    }
    
    public GetTopWatchedContentRequest(
            long type) {
        this(type, Optional.empty());
    }

    /**
     * the library type (1 - movies, 2 - shows, 3 - music)
     */
    @JsonIgnore
    public long type() {
        return type;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> includeGuids() {
        return (Optional<Long>) includeGuids;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the library type (1 - movies, 2 - shows, 3 - music)
     */
    public GetTopWatchedContentRequest withType(long type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    public GetTopWatchedContentRequest withIncludeGuids(long includeGuids) {
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.includeGuids = Optional.ofNullable(includeGuids);
        return this;
    }

    /**
     * Adds the Guids object to the response
     * 
     */
    public GetTopWatchedContentRequest withIncludeGuids(Optional<? extends Long> includeGuids) {
        Utils.checkNotNull(includeGuids, "includeGuids");
        this.includeGuids = includeGuids;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTopWatchedContentRequest other = (GetTopWatchedContentRequest) o;
        return 
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.includeGuids, other.includeGuids);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            type,
            includeGuids);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTopWatchedContentRequest.class,
                "type", type,
                "includeGuids", includeGuids);
    }
    
    public final static class Builder {
 
        private Long type;
 
        private Optional<? extends Long> includeGuids = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the library type (1 - movies, 2 - shows, 3 - music)
         */
        public Builder type(long type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Adds the Guids object to the response
         * 
         */
        public Builder includeGuids(long includeGuids) {
            Utils.checkNotNull(includeGuids, "includeGuids");
            this.includeGuids = Optional.ofNullable(includeGuids);
            return this;
        }

        /**
         * Adds the Guids object to the response
         * 
         */
        public Builder includeGuids(Optional<? extends Long> includeGuids) {
            Utils.checkNotNull(includeGuids, "includeGuids");
            this.includeGuids = includeGuids;
            return this;
        }
        
        public GetTopWatchedContentRequest build() {
            return new GetTopWatchedContentRequest(
                type,
                includeGuids);
        }
    }
}

