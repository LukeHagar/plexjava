/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class UpdatePlaylistRequest {

    /**
     * the ID of the playlist
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=playlistID")
    private double playlistID;

    /**
     * name of the playlist
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=title")
    private Optional<? extends String> title;

    /**
     * summary description of the playlist
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=summary")
    private Optional<? extends String> summary;

    public UpdatePlaylistRequest(
            double playlistID,
            Optional<? extends String> title,
            Optional<? extends String> summary) {
        Utils.checkNotNull(playlistID, "playlistID");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(summary, "summary");
        this.playlistID = playlistID;
        this.title = title;
        this.summary = summary;
    }

    /**
     * the ID of the playlist
     */
    public double playlistID() {
        return playlistID;
    }

    /**
     * name of the playlist
     */
    public Optional<? extends String> title() {
        return title;
    }

    /**
     * summary description of the playlist
     */
    public Optional<? extends String> summary() {
        return summary;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the ID of the playlist
     */
    public UpdatePlaylistRequest withPlaylistID(double playlistID) {
        Utils.checkNotNull(playlistID, "playlistID");
        this.playlistID = playlistID;
        return this;
    }

    /**
     * name of the playlist
     */
    public UpdatePlaylistRequest withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * name of the playlist
     */
    public UpdatePlaylistRequest withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * summary description of the playlist
     */
    public UpdatePlaylistRequest withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    /**
     * summary description of the playlist
     */
    public UpdatePlaylistRequest withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePlaylistRequest other = (UpdatePlaylistRequest) o;
        return 
            java.util.Objects.deepEquals(this.playlistID, other.playlistID) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.summary, other.summary);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            playlistID,
            title,
            summary);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePlaylistRequest.class,
                "playlistID", playlistID,
                "title", title,
                "summary", summary);
    }
    
    public final static class Builder {
 
        private Double playlistID;
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the ID of the playlist
         */
        public Builder playlistID(double playlistID) {
            Utils.checkNotNull(playlistID, "playlistID");
            this.playlistID = playlistID;
            return this;
        }

        /**
         * name of the playlist
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * name of the playlist
         */
        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * summary description of the playlist
         */
        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        /**
         * summary description of the playlist
         */
        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }
        
        public UpdatePlaylistRequest build() {
            return new UpdatePlaylistRequest(
                playlistID,
                title,
                summary);
        }
    }
}

