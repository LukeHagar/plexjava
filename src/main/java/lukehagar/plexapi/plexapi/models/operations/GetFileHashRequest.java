/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetFileHashRequest {

    /**
     * This is the path to the local file, must be prefixed by `file://`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=url")
    private String url;

    /**
     * Item type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Optional<? extends Double> type;

    public GetFileHashRequest(
            String url,
            Optional<? extends Double> type) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(type, "type");
        this.url = url;
        this.type = type;
    }

    /**
     * This is the path to the local file, must be prefixed by `file://`
     */
    public String url() {
        return url;
    }

    /**
     * Item type
     */
    public Optional<? extends Double> type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * This is the path to the local file, must be prefixed by `file://`
     */
    public GetFileHashRequest withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * Item type
     */
    public GetFileHashRequest withType(double type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Item type
     */
    public GetFileHashRequest withType(Optional<? extends Double> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFileHashRequest other = (GetFileHashRequest) o;
        return 
            java.util.Objects.deepEquals(this.url, other.url) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            url,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetFileHashRequest.class,
                "url", url,
                "type", type);
    }
    
    public final static class Builder {
 
        private String url;
 
        private Optional<? extends Double> type = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * This is the path to the local file, must be prefixed by `file://`
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * Item type
         */
        public Builder type(double type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Item type
         */
        public Builder type(Optional<? extends Double> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public GetFileHashRequest build() {
            return new GetFileHashRequest(
                url,
                type);
        }
    }
}

