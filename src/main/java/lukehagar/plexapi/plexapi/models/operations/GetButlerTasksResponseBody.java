/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

/**
 * GetButlerTasksResponseBody - All butler tasks
 */

public class GetButlerTasksResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ButlerTasks")
    private Optional<? extends ButlerTasks> butlerTasks;

    public GetButlerTasksResponseBody(
            @JsonProperty("ButlerTasks") Optional<? extends ButlerTasks> butlerTasks) {
        Utils.checkNotNull(butlerTasks, "butlerTasks");
        this.butlerTasks = butlerTasks;
    }

    public Optional<? extends ButlerTasks> butlerTasks() {
        return butlerTasks;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetButlerTasksResponseBody withButlerTasks(ButlerTasks butlerTasks) {
        Utils.checkNotNull(butlerTasks, "butlerTasks");
        this.butlerTasks = Optional.ofNullable(butlerTasks);
        return this;
    }

    public GetButlerTasksResponseBody withButlerTasks(Optional<? extends ButlerTasks> butlerTasks) {
        Utils.checkNotNull(butlerTasks, "butlerTasks");
        this.butlerTasks = butlerTasks;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetButlerTasksResponseBody other = (GetButlerTasksResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.butlerTasks, other.butlerTasks);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            butlerTasks);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetButlerTasksResponseBody.class,
                "butlerTasks", butlerTasks);
    }
    
    public final static class Builder {
 
        private Optional<? extends ButlerTasks> butlerTasks = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder butlerTasks(ButlerTasks butlerTasks) {
            Utils.checkNotNull(butlerTasks, "butlerTasks");
            this.butlerTasks = Optional.ofNullable(butlerTasks);
            return this;
        }

        public Builder butlerTasks(Optional<? extends ButlerTasks> butlerTasks) {
            Utils.checkNotNull(butlerTasks, "butlerTasks");
            this.butlerTasks = butlerTasks;
            return this;
        }
        
        public GetButlerTasksResponseBody build() {
            return new GetButlerTasksResponseBody(
                butlerTasks);
        }
    }
}

