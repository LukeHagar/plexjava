/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetPlaylistContentsMediaContainer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Integer> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("composite")
    private Optional<? extends String> composite;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Integer> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<? extends Integer> leafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("playlistType")
    private Optional<? extends String> playlistType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("smart")
    private Optional<? extends Boolean> smart;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Metadata")
    private Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata;

    public GetPlaylistContentsMediaContainer(
            @JsonProperty("size") Optional<? extends Integer> size,
            @JsonProperty("composite") Optional<? extends String> composite,
            @JsonProperty("duration") Optional<? extends Integer> duration,
            @JsonProperty("leafCount") Optional<? extends Integer> leafCount,
            @JsonProperty("playlistType") Optional<? extends String> playlistType,
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("smart") Optional<? extends Boolean> smart,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("Metadata") Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(composite, "composite");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(playlistType, "playlistType");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(smart, "smart");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(metadata, "metadata");
        this.size = size;
        this.composite = composite;
        this.duration = duration;
        this.leafCount = leafCount;
        this.playlistType = playlistType;
        this.ratingKey = ratingKey;
        this.smart = smart;
        this.title = title;
        this.metadata = metadata;
    }

    public Optional<? extends Integer> size() {
        return size;
    }

    public Optional<? extends String> composite() {
        return composite;
    }

    public Optional<? extends Integer> duration() {
        return duration;
    }

    public Optional<? extends Integer> leafCount() {
        return leafCount;
    }

    public Optional<? extends String> playlistType() {
        return playlistType;
    }

    public Optional<? extends String> ratingKey() {
        return ratingKey;
    }

    public Optional<? extends Boolean> smart() {
        return smart;
    }

    public Optional<? extends String> title() {
        return title;
    }

    public Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetPlaylistContentsMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public GetPlaylistContentsMediaContainer withSize(Optional<? extends Integer> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public GetPlaylistContentsMediaContainer withComposite(String composite) {
        Utils.checkNotNull(composite, "composite");
        this.composite = Optional.ofNullable(composite);
        return this;
    }

    public GetPlaylistContentsMediaContainer withComposite(Optional<? extends String> composite) {
        Utils.checkNotNull(composite, "composite");
        this.composite = composite;
        return this;
    }

    public GetPlaylistContentsMediaContainer withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetPlaylistContentsMediaContainer withDuration(Optional<? extends Integer> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetPlaylistContentsMediaContainer withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    public GetPlaylistContentsMediaContainer withLeafCount(Optional<? extends Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    public GetPlaylistContentsMediaContainer withPlaylistType(String playlistType) {
        Utils.checkNotNull(playlistType, "playlistType");
        this.playlistType = Optional.ofNullable(playlistType);
        return this;
    }

    public GetPlaylistContentsMediaContainer withPlaylistType(Optional<? extends String> playlistType) {
        Utils.checkNotNull(playlistType, "playlistType");
        this.playlistType = playlistType;
        return this;
    }

    public GetPlaylistContentsMediaContainer withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetPlaylistContentsMediaContainer withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetPlaylistContentsMediaContainer withSmart(boolean smart) {
        Utils.checkNotNull(smart, "smart");
        this.smart = Optional.ofNullable(smart);
        return this;
    }

    public GetPlaylistContentsMediaContainer withSmart(Optional<? extends Boolean> smart) {
        Utils.checkNotNull(smart, "smart");
        this.smart = smart;
        return this;
    }

    public GetPlaylistContentsMediaContainer withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetPlaylistContentsMediaContainer withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetPlaylistContentsMediaContainer withMetadata(java.util.List<GetPlaylistContentsMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public GetPlaylistContentsMediaContainer withMetadata(Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPlaylistContentsMediaContainer other = (GetPlaylistContentsMediaContainer) o;
        return 
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.composite, other.composite) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.leafCount, other.leafCount) &&
            java.util.Objects.deepEquals(this.playlistType, other.playlistType) &&
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.smart, other.smart) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            size,
            composite,
            duration,
            leafCount,
            playlistType,
            ratingKey,
            smart,
            title,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetPlaylistContentsMediaContainer.class,
                "size", size,
                "composite", composite,
                "duration", duration,
                "leafCount", leafCount,
                "playlistType", playlistType,
                "ratingKey", ratingKey,
                "smart", smart,
                "title", title,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> size = Optional.empty();
 
        private Optional<? extends String> composite = Optional.empty();
 
        private Optional<? extends Integer> duration = Optional.empty();
 
        private Optional<? extends Integer> leafCount = Optional.empty();
 
        private Optional<? extends String> playlistType = Optional.empty();
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends Boolean> smart = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<? extends Integer> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder composite(String composite) {
            Utils.checkNotNull(composite, "composite");
            this.composite = Optional.ofNullable(composite);
            return this;
        }

        public Builder composite(Optional<? extends String> composite) {
            Utils.checkNotNull(composite, "composite");
            this.composite = composite;
            return this;
        }

        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Integer> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        public Builder leafCount(Optional<? extends Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        public Builder playlistType(String playlistType) {
            Utils.checkNotNull(playlistType, "playlistType");
            this.playlistType = Optional.ofNullable(playlistType);
            return this;
        }

        public Builder playlistType(Optional<? extends String> playlistType) {
            Utils.checkNotNull(playlistType, "playlistType");
            this.playlistType = playlistType;
            return this;
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder smart(boolean smart) {
            Utils.checkNotNull(smart, "smart");
            this.smart = Optional.ofNullable(smart);
            return this;
        }

        public Builder smart(Optional<? extends Boolean> smart) {
            Utils.checkNotNull(smart, "smart");
            this.smart = smart;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder metadata(java.util.List<GetPlaylistContentsMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends java.util.List<GetPlaylistContentsMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public GetPlaylistContentsMediaContainer build() {
            return new GetPlaylistContentsMediaContainer(
                size,
                composite,
                duration,
                leafCount,
                playlistType,
                ratingKey,
                smart,
                title,
                metadata);
        }
    }
}

