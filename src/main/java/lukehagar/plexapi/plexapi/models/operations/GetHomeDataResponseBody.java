/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;
/**
 * GetHomeDataResponseBody - Home Data
 */

public class GetHomeDataResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Double> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestUserID")
    private Optional<? extends Double> guestUserID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestUserUUID")
    private Optional<? extends String> guestUserUUID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guestEnabled")
    private Optional<? extends Boolean> guestEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription")
    private Optional<? extends Boolean> subscription;

    @JsonCreator
    public GetHomeDataResponseBody(
            @JsonProperty("id") Optional<? extends Double> id,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("guestUserID") Optional<? extends Double> guestUserID,
            @JsonProperty("guestUserUUID") Optional<? extends String> guestUserUUID,
            @JsonProperty("guestEnabled") Optional<? extends Boolean> guestEnabled,
            @JsonProperty("subscription") Optional<? extends Boolean> subscription) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(guestUserID, "guestUserID");
        Utils.checkNotNull(guestUserUUID, "guestUserUUID");
        Utils.checkNotNull(guestEnabled, "guestEnabled");
        Utils.checkNotNull(subscription, "subscription");
        this.id = id;
        this.name = name;
        this.guestUserID = guestUserID;
        this.guestUserUUID = guestUserUUID;
        this.guestEnabled = guestEnabled;
        this.subscription = subscription;
    }
    
    public GetHomeDataResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> id() {
        return (Optional<Double>) id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> guestUserID() {
        return (Optional<Double>) guestUserID;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> guestUserUUID() {
        return (Optional<String>) guestUserUUID;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> guestEnabled() {
        return (Optional<Boolean>) guestEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> subscription() {
        return (Optional<Boolean>) subscription;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetHomeDataResponseBody withId(double id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public GetHomeDataResponseBody withId(Optional<? extends Double> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetHomeDataResponseBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public GetHomeDataResponseBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public GetHomeDataResponseBody withGuestUserID(double guestUserID) {
        Utils.checkNotNull(guestUserID, "guestUserID");
        this.guestUserID = Optional.ofNullable(guestUserID);
        return this;
    }

    public GetHomeDataResponseBody withGuestUserID(Optional<? extends Double> guestUserID) {
        Utils.checkNotNull(guestUserID, "guestUserID");
        this.guestUserID = guestUserID;
        return this;
    }

    public GetHomeDataResponseBody withGuestUserUUID(String guestUserUUID) {
        Utils.checkNotNull(guestUserUUID, "guestUserUUID");
        this.guestUserUUID = Optional.ofNullable(guestUserUUID);
        return this;
    }

    public GetHomeDataResponseBody withGuestUserUUID(Optional<? extends String> guestUserUUID) {
        Utils.checkNotNull(guestUserUUID, "guestUserUUID");
        this.guestUserUUID = guestUserUUID;
        return this;
    }

    public GetHomeDataResponseBody withGuestEnabled(boolean guestEnabled) {
        Utils.checkNotNull(guestEnabled, "guestEnabled");
        this.guestEnabled = Optional.ofNullable(guestEnabled);
        return this;
    }

    public GetHomeDataResponseBody withGuestEnabled(Optional<? extends Boolean> guestEnabled) {
        Utils.checkNotNull(guestEnabled, "guestEnabled");
        this.guestEnabled = guestEnabled;
        return this;
    }

    public GetHomeDataResponseBody withSubscription(boolean subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = Optional.ofNullable(subscription);
        return this;
    }

    public GetHomeDataResponseBody withSubscription(Optional<? extends Boolean> subscription) {
        Utils.checkNotNull(subscription, "subscription");
        this.subscription = subscription;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetHomeDataResponseBody other = (GetHomeDataResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.guestUserID, other.guestUserID) &&
            java.util.Objects.deepEquals(this.guestUserUUID, other.guestUserUUID) &&
            java.util.Objects.deepEquals(this.guestEnabled, other.guestEnabled) &&
            java.util.Objects.deepEquals(this.subscription, other.subscription);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            name,
            guestUserID,
            guestUserUUID,
            guestEnabled,
            subscription);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetHomeDataResponseBody.class,
                "id", id,
                "name", name,
                "guestUserID", guestUserID,
                "guestUserUUID", guestUserUUID,
                "guestEnabled", guestEnabled,
                "subscription", subscription);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> id = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Double> guestUserID = Optional.empty();
 
        private Optional<? extends String> guestUserUUID = Optional.empty();
 
        private Optional<? extends Boolean> guestEnabled = Optional.empty();
 
        private Optional<? extends Boolean> subscription = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(double id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Double> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder guestUserID(double guestUserID) {
            Utils.checkNotNull(guestUserID, "guestUserID");
            this.guestUserID = Optional.ofNullable(guestUserID);
            return this;
        }

        public Builder guestUserID(Optional<? extends Double> guestUserID) {
            Utils.checkNotNull(guestUserID, "guestUserID");
            this.guestUserID = guestUserID;
            return this;
        }

        public Builder guestUserUUID(String guestUserUUID) {
            Utils.checkNotNull(guestUserUUID, "guestUserUUID");
            this.guestUserUUID = Optional.ofNullable(guestUserUUID);
            return this;
        }

        public Builder guestUserUUID(Optional<? extends String> guestUserUUID) {
            Utils.checkNotNull(guestUserUUID, "guestUserUUID");
            this.guestUserUUID = guestUserUUID;
            return this;
        }

        public Builder guestEnabled(boolean guestEnabled) {
            Utils.checkNotNull(guestEnabled, "guestEnabled");
            this.guestEnabled = Optional.ofNullable(guestEnabled);
            return this;
        }

        public Builder guestEnabled(Optional<? extends Boolean> guestEnabled) {
            Utils.checkNotNull(guestEnabled, "guestEnabled");
            this.guestEnabled = guestEnabled;
            return this;
        }

        public Builder subscription(boolean subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = Optional.ofNullable(subscription);
            return this;
        }

        public Builder subscription(Optional<? extends Boolean> subscription) {
            Utils.checkNotNull(subscription, "subscription");
            this.subscription = subscription;
            return this;
        }
        
        public GetHomeDataResponseBody build() {
            return new GetHomeDataResponseBody(
                id,
                name,
                guestUserID,
                guestUserUUID,
                guestEnabled,
                subscription);
        }
    }
}

