/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class Setting {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<? extends String> label;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends String> summary;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default")
    private Optional<? extends Boolean> default_;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends Boolean> value;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden")
    private Optional<? extends Boolean> hidden;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("advanced")
    private Optional<? extends Boolean> advanced;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    private Optional<? extends String> group;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enumValues")
    private Optional<? extends String> enumValues;

    public Setting(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("label") Optional<? extends String> label,
            @JsonProperty("summary") Optional<? extends String> summary,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("default") Optional<? extends Boolean> default_,
            @JsonProperty("value") Optional<? extends Boolean> value,
            @JsonProperty("hidden") Optional<? extends Boolean> hidden,
            @JsonProperty("advanced") Optional<? extends Boolean> advanced,
            @JsonProperty("group") Optional<? extends String> group,
            @JsonProperty("enumValues") Optional<? extends String> enumValues) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(default_, "default_");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(hidden, "hidden");
        Utils.checkNotNull(advanced, "advanced");
        Utils.checkNotNull(group, "group");
        Utils.checkNotNull(enumValues, "enumValues");
        this.id = id;
        this.label = label;
        this.summary = summary;
        this.type = type;
        this.default_ = default_;
        this.value = value;
        this.hidden = hidden;
        this.advanced = advanced;
        this.group = group;
        this.enumValues = enumValues;
    }

    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends String> label() {
        return label;
    }

    public Optional<? extends String> summary() {
        return summary;
    }

    public Optional<? extends String> type() {
        return type;
    }

    public Optional<? extends Boolean> default_() {
        return default_;
    }

    public Optional<? extends Boolean> value() {
        return value;
    }

    public Optional<? extends Boolean> hidden() {
        return hidden;
    }

    public Optional<? extends Boolean> advanced() {
        return advanced;
    }

    public Optional<? extends String> group() {
        return group;
    }

    public Optional<? extends String> enumValues() {
        return enumValues;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Setting withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Setting withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Setting withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    public Setting withLabel(Optional<? extends String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public Setting withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public Setting withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public Setting withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Setting withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Setting withDefault(boolean default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = Optional.ofNullable(default_);
        return this;
    }

    public Setting withDefault(Optional<? extends Boolean> default_) {
        Utils.checkNotNull(default_, "default_");
        this.default_ = default_;
        return this;
    }

    public Setting withValue(boolean value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public Setting withValue(Optional<? extends Boolean> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public Setting withHidden(boolean hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = Optional.ofNullable(hidden);
        return this;
    }

    public Setting withHidden(Optional<? extends Boolean> hidden) {
        Utils.checkNotNull(hidden, "hidden");
        this.hidden = hidden;
        return this;
    }

    public Setting withAdvanced(boolean advanced) {
        Utils.checkNotNull(advanced, "advanced");
        this.advanced = Optional.ofNullable(advanced);
        return this;
    }

    public Setting withAdvanced(Optional<? extends Boolean> advanced) {
        Utils.checkNotNull(advanced, "advanced");
        this.advanced = advanced;
        return this;
    }

    public Setting withGroup(String group) {
        Utils.checkNotNull(group, "group");
        this.group = Optional.ofNullable(group);
        return this;
    }

    public Setting withGroup(Optional<? extends String> group) {
        Utils.checkNotNull(group, "group");
        this.group = group;
        return this;
    }

    public Setting withEnumValues(String enumValues) {
        Utils.checkNotNull(enumValues, "enumValues");
        this.enumValues = Optional.ofNullable(enumValues);
        return this;
    }

    public Setting withEnumValues(Optional<? extends String> enumValues) {
        Utils.checkNotNull(enumValues, "enumValues");
        this.enumValues = enumValues;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Setting other = (Setting) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.label, other.label) &&
            java.util.Objects.deepEquals(this.summary, other.summary) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.default_, other.default_) &&
            java.util.Objects.deepEquals(this.value, other.value) &&
            java.util.Objects.deepEquals(this.hidden, other.hidden) &&
            java.util.Objects.deepEquals(this.advanced, other.advanced) &&
            java.util.Objects.deepEquals(this.group, other.group) &&
            java.util.Objects.deepEquals(this.enumValues, other.enumValues);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            label,
            summary,
            type,
            default_,
            value,
            hidden,
            advanced,
            group,
            enumValues);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Setting.class,
                "id", id,
                "label", label,
                "summary", summary,
                "type", type,
                "default_", default_,
                "value", value,
                "hidden", hidden,
                "advanced", advanced,
                "group", group,
                "enumValues", enumValues);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> label = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends Boolean> default_ = Optional.empty();
 
        private Optional<? extends Boolean> value = Optional.empty();
 
        private Optional<? extends Boolean> hidden = Optional.empty();
 
        private Optional<? extends Boolean> advanced = Optional.empty();
 
        private Optional<? extends String> group = Optional.empty();
 
        private Optional<? extends String> enumValues = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        public Builder label(Optional<? extends String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder default_(boolean default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = Optional.ofNullable(default_);
            return this;
        }

        public Builder default_(Optional<? extends Boolean> default_) {
            Utils.checkNotNull(default_, "default_");
            this.default_ = default_;
            return this;
        }

        public Builder value(boolean value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends Boolean> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder hidden(boolean hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = Optional.ofNullable(hidden);
            return this;
        }

        public Builder hidden(Optional<? extends Boolean> hidden) {
            Utils.checkNotNull(hidden, "hidden");
            this.hidden = hidden;
            return this;
        }

        public Builder advanced(boolean advanced) {
            Utils.checkNotNull(advanced, "advanced");
            this.advanced = Optional.ofNullable(advanced);
            return this;
        }

        public Builder advanced(Optional<? extends Boolean> advanced) {
            Utils.checkNotNull(advanced, "advanced");
            this.advanced = advanced;
            return this;
        }

        public Builder group(String group) {
            Utils.checkNotNull(group, "group");
            this.group = Optional.ofNullable(group);
            return this;
        }

        public Builder group(Optional<? extends String> group) {
            Utils.checkNotNull(group, "group");
            this.group = group;
            return this;
        }

        public Builder enumValues(String enumValues) {
            Utils.checkNotNull(enumValues, "enumValues");
            this.enumValues = Optional.ofNullable(enumValues);
            return this;
        }

        public Builder enumValues(Optional<? extends String> enumValues) {
            Utils.checkNotNull(enumValues, "enumValues");
            this.enumValues = enumValues;
            return this;
        }
        
        public Setting build() {
            return new Setting(
                id,
                label,
                summary,
                type,
                default_,
                value,
                hidden,
                advanced,
                group,
                enumValues);
        }
    }
}

