/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetLibraryHubsRequest {

    /**
     * the Id of the library to query
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sectionId")
    private double sectionId;

    /**
     * The number of items to return with each hub.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=count")
    private Optional<? extends Double> count;

    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=onlyTransient")
    private Optional<? extends QueryParamOnlyTransient> onlyTransient;

    public GetLibraryHubsRequest(
            double sectionId,
            Optional<? extends Double> count,
            Optional<? extends QueryParamOnlyTransient> onlyTransient) {
        Utils.checkNotNull(sectionId, "sectionId");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(onlyTransient, "onlyTransient");
        this.sectionId = sectionId;
        this.count = count;
        this.onlyTransient = onlyTransient;
    }

    /**
     * the Id of the library to query
     */
    public double sectionId() {
        return sectionId;
    }

    /**
     * The number of items to return with each hub.
     */
    public Optional<? extends Double> count() {
        return count;
    }

    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    public Optional<? extends QueryParamOnlyTransient> onlyTransient() {
        return onlyTransient;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the Id of the library to query
     */
    public GetLibraryHubsRequest withSectionId(double sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = sectionId;
        return this;
    }

    /**
     * The number of items to return with each hub.
     */
    public GetLibraryHubsRequest withCount(double count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * The number of items to return with each hub.
     */
    public GetLibraryHubsRequest withCount(Optional<? extends Double> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    public GetLibraryHubsRequest withOnlyTransient(QueryParamOnlyTransient onlyTransient) {
        Utils.checkNotNull(onlyTransient, "onlyTransient");
        this.onlyTransient = Optional.ofNullable(onlyTransient);
        return this;
    }

    /**
     * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
     */
    public GetLibraryHubsRequest withOnlyTransient(Optional<? extends QueryParamOnlyTransient> onlyTransient) {
        Utils.checkNotNull(onlyTransient, "onlyTransient");
        this.onlyTransient = onlyTransient;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryHubsRequest other = (GetLibraryHubsRequest) o;
        return 
            java.util.Objects.deepEquals(this.sectionId, other.sectionId) &&
            java.util.Objects.deepEquals(this.count, other.count) &&
            java.util.Objects.deepEquals(this.onlyTransient, other.onlyTransient);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sectionId,
            count,
            onlyTransient);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryHubsRequest.class,
                "sectionId", sectionId,
                "count", count,
                "onlyTransient", onlyTransient);
    }
    
    public final static class Builder {
 
        private Double sectionId;
 
        private Optional<? extends Double> count = Optional.empty();
 
        private Optional<? extends QueryParamOnlyTransient> onlyTransient = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the Id of the library to query
         */
        public Builder sectionId(double sectionId) {
            Utils.checkNotNull(sectionId, "sectionId");
            this.sectionId = sectionId;
            return this;
        }

        /**
         * The number of items to return with each hub.
         */
        public Builder count(double count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * The number of items to return with each hub.
         */
        public Builder count(Optional<? extends Double> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
         */
        public Builder onlyTransient(QueryParamOnlyTransient onlyTransient) {
            Utils.checkNotNull(onlyTransient, "onlyTransient");
            this.onlyTransient = Optional.ofNullable(onlyTransient);
            return this;
        }

        /**
         * Only return hubs which are "transient", meaning those which are prone to changing after media playback or addition (e.g. On Deck, or Recently Added).
         */
        public Builder onlyTransient(Optional<? extends QueryParamOnlyTransient> onlyTransient) {
            Utils.checkNotNull(onlyTransient, "onlyTransient");
            this.onlyTransient = onlyTransient;
            return this;
        }
        
        public GetLibraryHubsRequest build() {
            return new GetLibraryHubsRequest(
                sectionId,
                count,
                onlyTransient);
        }
    }
}

