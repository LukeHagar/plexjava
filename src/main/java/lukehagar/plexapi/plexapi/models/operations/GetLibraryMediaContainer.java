/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetLibraryMediaContainer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Integer> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSync")
    private Optional<? extends Boolean> allowSync;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends String> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identifier")
    private Optional<? extends String> identifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<? extends Integer> librarySectionID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaTagPrefix")
    private Optional<? extends String> mediaTagPrefix;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaTagVersion")
    private Optional<? extends Integer> mediaTagVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title1")
    private Optional<? extends String> title1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewGroup")
    private Optional<? extends String> viewGroup;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewMode")
    private Optional<? extends Integer> viewMode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Directory")
    private Optional<? extends java.util.List<GetLibraryDirectory>> directory;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Type")
    private Optional<? extends java.util.List<GetLibraryType>> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("FieldType")
    private Optional<? extends java.util.List<FieldType>> fieldType;

    public GetLibraryMediaContainer(
            @JsonProperty("size") Optional<? extends Integer> size,
            @JsonProperty("allowSync") Optional<? extends Boolean> allowSync,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("content") Optional<? extends String> content,
            @JsonProperty("identifier") Optional<? extends String> identifier,
            @JsonProperty("librarySectionID") Optional<? extends Integer> librarySectionID,
            @JsonProperty("mediaTagPrefix") Optional<? extends String> mediaTagPrefix,
            @JsonProperty("mediaTagVersion") Optional<? extends Integer> mediaTagVersion,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("title1") Optional<? extends String> title1,
            @JsonProperty("viewGroup") Optional<? extends String> viewGroup,
            @JsonProperty("viewMode") Optional<? extends Integer> viewMode,
            @JsonProperty("Directory") Optional<? extends java.util.List<GetLibraryDirectory>> directory,
            @JsonProperty("Type") Optional<? extends java.util.List<GetLibraryType>> type,
            @JsonProperty("FieldType") Optional<? extends java.util.List<FieldType>> fieldType) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(allowSync, "allowSync");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(identifier, "identifier");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(title1, "title1");
        Utils.checkNotNull(viewGroup, "viewGroup");
        Utils.checkNotNull(viewMode, "viewMode");
        Utils.checkNotNull(directory, "directory");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(fieldType, "fieldType");
        this.size = size;
        this.allowSync = allowSync;
        this.art = art;
        this.content = content;
        this.identifier = identifier;
        this.librarySectionID = librarySectionID;
        this.mediaTagPrefix = mediaTagPrefix;
        this.mediaTagVersion = mediaTagVersion;
        this.thumb = thumb;
        this.title1 = title1;
        this.viewGroup = viewGroup;
        this.viewMode = viewMode;
        this.directory = directory;
        this.type = type;
        this.fieldType = fieldType;
    }

    public Optional<? extends Integer> size() {
        return size;
    }

    public Optional<? extends Boolean> allowSync() {
        return allowSync;
    }

    public Optional<? extends String> art() {
        return art;
    }

    public Optional<? extends String> content() {
        return content;
    }

    public Optional<? extends String> identifier() {
        return identifier;
    }

    public Optional<? extends Integer> librarySectionID() {
        return librarySectionID;
    }

    public Optional<? extends String> mediaTagPrefix() {
        return mediaTagPrefix;
    }

    public Optional<? extends Integer> mediaTagVersion() {
        return mediaTagVersion;
    }

    public Optional<? extends String> thumb() {
        return thumb;
    }

    public Optional<? extends String> title1() {
        return title1;
    }

    public Optional<? extends String> viewGroup() {
        return viewGroup;
    }

    public Optional<? extends Integer> viewMode() {
        return viewMode;
    }

    public Optional<? extends java.util.List<GetLibraryDirectory>> directory() {
        return directory;
    }

    public Optional<? extends java.util.List<GetLibraryType>> type() {
        return type;
    }

    public Optional<? extends java.util.List<FieldType>> fieldType() {
        return fieldType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetLibraryMediaContainer withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public GetLibraryMediaContainer withSize(Optional<? extends Integer> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public GetLibraryMediaContainer withAllowSync(boolean allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = Optional.ofNullable(allowSync);
        return this;
    }

    public GetLibraryMediaContainer withAllowSync(Optional<? extends Boolean> allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = allowSync;
        return this;
    }

    public GetLibraryMediaContainer withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetLibraryMediaContainer withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetLibraryMediaContainer withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    public GetLibraryMediaContainer withContent(Optional<? extends String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public GetLibraryMediaContainer withIdentifier(String identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = Optional.ofNullable(identifier);
        return this;
    }

    public GetLibraryMediaContainer withIdentifier(Optional<? extends String> identifier) {
        Utils.checkNotNull(identifier, "identifier");
        this.identifier = identifier;
        return this;
    }

    public GetLibraryMediaContainer withLibrarySectionID(int librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }

    public GetLibraryMediaContainer withLibrarySectionID(Optional<? extends Integer> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    public GetLibraryMediaContainer withMediaTagPrefix(String mediaTagPrefix) {
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        this.mediaTagPrefix = Optional.ofNullable(mediaTagPrefix);
        return this;
    }

    public GetLibraryMediaContainer withMediaTagPrefix(Optional<? extends String> mediaTagPrefix) {
        Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
        this.mediaTagPrefix = mediaTagPrefix;
        return this;
    }

    public GetLibraryMediaContainer withMediaTagVersion(int mediaTagVersion) {
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        this.mediaTagVersion = Optional.ofNullable(mediaTagVersion);
        return this;
    }

    public GetLibraryMediaContainer withMediaTagVersion(Optional<? extends Integer> mediaTagVersion) {
        Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
        this.mediaTagVersion = mediaTagVersion;
        return this;
    }

    public GetLibraryMediaContainer withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetLibraryMediaContainer withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetLibraryMediaContainer withTitle1(String title1) {
        Utils.checkNotNull(title1, "title1");
        this.title1 = Optional.ofNullable(title1);
        return this;
    }

    public GetLibraryMediaContainer withTitle1(Optional<? extends String> title1) {
        Utils.checkNotNull(title1, "title1");
        this.title1 = title1;
        return this;
    }

    public GetLibraryMediaContainer withViewGroup(String viewGroup) {
        Utils.checkNotNull(viewGroup, "viewGroup");
        this.viewGroup = Optional.ofNullable(viewGroup);
        return this;
    }

    public GetLibraryMediaContainer withViewGroup(Optional<? extends String> viewGroup) {
        Utils.checkNotNull(viewGroup, "viewGroup");
        this.viewGroup = viewGroup;
        return this;
    }

    public GetLibraryMediaContainer withViewMode(int viewMode) {
        Utils.checkNotNull(viewMode, "viewMode");
        this.viewMode = Optional.ofNullable(viewMode);
        return this;
    }

    public GetLibraryMediaContainer withViewMode(Optional<? extends Integer> viewMode) {
        Utils.checkNotNull(viewMode, "viewMode");
        this.viewMode = viewMode;
        return this;
    }

    public GetLibraryMediaContainer withDirectory(java.util.List<GetLibraryDirectory> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = Optional.ofNullable(directory);
        return this;
    }

    public GetLibraryMediaContainer withDirectory(Optional<? extends java.util.List<GetLibraryDirectory>> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = directory;
        return this;
    }

    public GetLibraryMediaContainer withType(java.util.List<GetLibraryType> type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetLibraryMediaContainer withType(Optional<? extends java.util.List<GetLibraryType>> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetLibraryMediaContainer withFieldType(java.util.List<FieldType> fieldType) {
        Utils.checkNotNull(fieldType, "fieldType");
        this.fieldType = Optional.ofNullable(fieldType);
        return this;
    }

    public GetLibraryMediaContainer withFieldType(Optional<? extends java.util.List<FieldType>> fieldType) {
        Utils.checkNotNull(fieldType, "fieldType");
        this.fieldType = fieldType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryMediaContainer other = (GetLibraryMediaContainer) o;
        return 
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.allowSync, other.allowSync) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.content, other.content) &&
            java.util.Objects.deepEquals(this.identifier, other.identifier) &&
            java.util.Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            java.util.Objects.deepEquals(this.mediaTagPrefix, other.mediaTagPrefix) &&
            java.util.Objects.deepEquals(this.mediaTagVersion, other.mediaTagVersion) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.title1, other.title1) &&
            java.util.Objects.deepEquals(this.viewGroup, other.viewGroup) &&
            java.util.Objects.deepEquals(this.viewMode, other.viewMode) &&
            java.util.Objects.deepEquals(this.directory, other.directory) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.fieldType, other.fieldType);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            size,
            allowSync,
            art,
            content,
            identifier,
            librarySectionID,
            mediaTagPrefix,
            mediaTagVersion,
            thumb,
            title1,
            viewGroup,
            viewMode,
            directory,
            type,
            fieldType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryMediaContainer.class,
                "size", size,
                "allowSync", allowSync,
                "art", art,
                "content", content,
                "identifier", identifier,
                "librarySectionID", librarySectionID,
                "mediaTagPrefix", mediaTagPrefix,
                "mediaTagVersion", mediaTagVersion,
                "thumb", thumb,
                "title1", title1,
                "viewGroup", viewGroup,
                "viewMode", viewMode,
                "directory", directory,
                "type", type,
                "fieldType", fieldType);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> size = Optional.empty();
 
        private Optional<? extends Boolean> allowSync = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends String> content = Optional.empty();
 
        private Optional<? extends String> identifier = Optional.empty();
 
        private Optional<? extends Integer> librarySectionID = Optional.empty();
 
        private Optional<? extends String> mediaTagPrefix = Optional.empty();
 
        private Optional<? extends Integer> mediaTagVersion = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> title1 = Optional.empty();
 
        private Optional<? extends String> viewGroup = Optional.empty();
 
        private Optional<? extends Integer> viewMode = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryDirectory>> directory = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryType>> type = Optional.empty();
 
        private Optional<? extends java.util.List<FieldType>> fieldType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<? extends Integer> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder allowSync(boolean allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = Optional.ofNullable(allowSync);
            return this;
        }

        public Builder allowSync(Optional<? extends Boolean> allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = allowSync;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<? extends String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder identifier(String identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = Optional.ofNullable(identifier);
            return this;
        }

        public Builder identifier(Optional<? extends String> identifier) {
            Utils.checkNotNull(identifier, "identifier");
            this.identifier = identifier;
            return this;
        }

        public Builder librarySectionID(int librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        public Builder librarySectionID(Optional<? extends Integer> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        public Builder mediaTagPrefix(String mediaTagPrefix) {
            Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
            this.mediaTagPrefix = Optional.ofNullable(mediaTagPrefix);
            return this;
        }

        public Builder mediaTagPrefix(Optional<? extends String> mediaTagPrefix) {
            Utils.checkNotNull(mediaTagPrefix, "mediaTagPrefix");
            this.mediaTagPrefix = mediaTagPrefix;
            return this;
        }

        public Builder mediaTagVersion(int mediaTagVersion) {
            Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
            this.mediaTagVersion = Optional.ofNullable(mediaTagVersion);
            return this;
        }

        public Builder mediaTagVersion(Optional<? extends Integer> mediaTagVersion) {
            Utils.checkNotNull(mediaTagVersion, "mediaTagVersion");
            this.mediaTagVersion = mediaTagVersion;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder title1(String title1) {
            Utils.checkNotNull(title1, "title1");
            this.title1 = Optional.ofNullable(title1);
            return this;
        }

        public Builder title1(Optional<? extends String> title1) {
            Utils.checkNotNull(title1, "title1");
            this.title1 = title1;
            return this;
        }

        public Builder viewGroup(String viewGroup) {
            Utils.checkNotNull(viewGroup, "viewGroup");
            this.viewGroup = Optional.ofNullable(viewGroup);
            return this;
        }

        public Builder viewGroup(Optional<? extends String> viewGroup) {
            Utils.checkNotNull(viewGroup, "viewGroup");
            this.viewGroup = viewGroup;
            return this;
        }

        public Builder viewMode(int viewMode) {
            Utils.checkNotNull(viewMode, "viewMode");
            this.viewMode = Optional.ofNullable(viewMode);
            return this;
        }

        public Builder viewMode(Optional<? extends Integer> viewMode) {
            Utils.checkNotNull(viewMode, "viewMode");
            this.viewMode = viewMode;
            return this;
        }

        public Builder directory(java.util.List<GetLibraryDirectory> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = Optional.ofNullable(directory);
            return this;
        }

        public Builder directory(Optional<? extends java.util.List<GetLibraryDirectory>> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = directory;
            return this;
        }

        public Builder type(java.util.List<GetLibraryType> type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends java.util.List<GetLibraryType>> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder fieldType(java.util.List<FieldType> fieldType) {
            Utils.checkNotNull(fieldType, "fieldType");
            this.fieldType = Optional.ofNullable(fieldType);
            return this;
        }

        public Builder fieldType(Optional<? extends java.util.List<FieldType>> fieldType) {
            Utils.checkNotNull(fieldType, "fieldType");
            this.fieldType = fieldType;
            return this;
        }
        
        public GetLibraryMediaContainer build() {
            return new GetLibraryMediaContainer(
                size,
                allowSync,
                art,
                content,
                identifier,
                librarySectionID,
                mediaTagPrefix,
                mediaTagVersion,
                thumb,
                title1,
                viewGroup,
                viewMode,
                directory,
                type,
                fieldType);
        }
    }
}

