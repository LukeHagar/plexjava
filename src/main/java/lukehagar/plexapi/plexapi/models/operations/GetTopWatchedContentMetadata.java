/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetTopWatchedContentMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<? extends String> slug;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("studio")
    private Optional<? extends String> studio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionTitle")
    private Optional<? extends String> librarySectionTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<? extends Integer> librarySectionID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionKey")
    private Optional<? extends String> librarySectionKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<? extends String> contentRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends String> summary;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Long> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRating")
    private Optional<? extends Double> audienceRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<? extends Integer> year;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    private Optional<? extends String> tagline;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Integer> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<? extends LocalDate> originallyAvailableAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<? extends Long> leafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedLeafCount")
    private Optional<? extends Long> viewedLeafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childCount")
    private Optional<? extends Long> childCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Integer> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Integer> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("globalViewCount")
    private Optional<? extends Long> globalViewCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRatingImage")
    private Optional<? extends String> audienceRatingImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Genre")
    private Optional<? extends java.util.List<GetTopWatchedContentGenre>> genre;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    private Optional<? extends java.util.List<GetTopWatchedContentCountry>> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Guid")
    private Optional<? extends java.util.List<GetTopWatchedContentGuids>> guids;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Role")
    private Optional<? extends java.util.List<GetTopWatchedContentRole>> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("User")
    private Optional<? extends java.util.List<User>> user;

    @JsonCreator
    public GetTopWatchedContentMetadata(
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("slug") Optional<? extends String> slug,
            @JsonProperty("studio") Optional<? extends String> studio,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("librarySectionTitle") Optional<? extends String> librarySectionTitle,
            @JsonProperty("librarySectionID") Optional<? extends Integer> librarySectionID,
            @JsonProperty("librarySectionKey") Optional<? extends String> librarySectionKey,
            @JsonProperty("contentRating") Optional<? extends String> contentRating,
            @JsonProperty("summary") Optional<? extends String> summary,
            @JsonProperty("index") Optional<? extends Long> index,
            @JsonProperty("audienceRating") Optional<? extends Double> audienceRating,
            @JsonProperty("year") Optional<? extends Integer> year,
            @JsonProperty("tagline") Optional<? extends String> tagline,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("duration") Optional<? extends Integer> duration,
            @JsonProperty("originallyAvailableAt") Optional<? extends LocalDate> originallyAvailableAt,
            @JsonProperty("leafCount") Optional<? extends Long> leafCount,
            @JsonProperty("viewedLeafCount") Optional<? extends Long> viewedLeafCount,
            @JsonProperty("childCount") Optional<? extends Long> childCount,
            @JsonProperty("addedAt") Optional<? extends Integer> addedAt,
            @JsonProperty("updatedAt") Optional<? extends Integer> updatedAt,
            @JsonProperty("globalViewCount") Optional<? extends Long> globalViewCount,
            @JsonProperty("audienceRatingImage") Optional<? extends String> audienceRatingImage,
            @JsonProperty("Genre") Optional<? extends java.util.List<GetTopWatchedContentGenre>> genre,
            @JsonProperty("Country") Optional<? extends java.util.List<GetTopWatchedContentCountry>> country,
            @JsonProperty("guids") Optional<? extends java.util.List<GetTopWatchedContentGuids>> guids,
            @JsonProperty("Role") Optional<? extends java.util.List<GetTopWatchedContentRole>> role,
            @JsonProperty("User") Optional<? extends java.util.List<User>> user) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(studio, "studio");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(audienceRating, "audienceRating");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(tagline, "tagline");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(globalViewCount, "globalViewCount");
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        Utils.checkNotNull(genre, "genre");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(guids, "guids");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(user, "user");
        this.ratingKey = ratingKey;
        this.key = key;
        this.guid = guid;
        this.slug = slug;
        this.studio = studio;
        this.type = type;
        this.title = title;
        this.librarySectionTitle = librarySectionTitle;
        this.librarySectionID = librarySectionID;
        this.librarySectionKey = librarySectionKey;
        this.contentRating = contentRating;
        this.summary = summary;
        this.index = index;
        this.audienceRating = audienceRating;
        this.year = year;
        this.tagline = tagline;
        this.thumb = thumb;
        this.art = art;
        this.duration = duration;
        this.originallyAvailableAt = originallyAvailableAt;
        this.leafCount = leafCount;
        this.viewedLeafCount = viewedLeafCount;
        this.childCount = childCount;
        this.addedAt = addedAt;
        this.updatedAt = updatedAt;
        this.globalViewCount = globalViewCount;
        this.audienceRatingImage = audienceRatingImage;
        this.genre = genre;
        this.country = country;
        this.guids = guids;
        this.role = role;
        this.user = user;
    }
    
    public GetTopWatchedContentMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingKey() {
        return (Optional<String>) ratingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> guid() {
        return (Optional<String>) guid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> slug() {
        return (Optional<String>) slug;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> studio() {
        return (Optional<String>) studio;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> type() {
        return (Optional<String>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> librarySectionTitle() {
        return (Optional<String>) librarySectionTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> librarySectionID() {
        return (Optional<Integer>) librarySectionID;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> librarySectionKey() {
        return (Optional<String>) librarySectionKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> contentRating() {
        return (Optional<String>) contentRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> summary() {
        return (Optional<String>) summary;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> index() {
        return (Optional<Long>) index;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> audienceRating() {
        return (Optional<Double>) audienceRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> year() {
        return (Optional<Integer>) year;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> tagline() {
        return (Optional<String>) tagline;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> thumb() {
        return (Optional<String>) thumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> art() {
        return (Optional<String>) art;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> duration() {
        return (Optional<Integer>) duration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> originallyAvailableAt() {
        return (Optional<LocalDate>) originallyAvailableAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> leafCount() {
        return (Optional<Long>) leafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> viewedLeafCount() {
        return (Optional<Long>) viewedLeafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> childCount() {
        return (Optional<Long>) childCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> addedAt() {
        return (Optional<Integer>) addedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> updatedAt() {
        return (Optional<Integer>) updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> globalViewCount() {
        return (Optional<Long>) globalViewCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> audienceRatingImage() {
        return (Optional<String>) audienceRatingImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetTopWatchedContentGenre>> genre() {
        return (Optional<java.util.List<GetTopWatchedContentGenre>>) genre;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetTopWatchedContentCountry>> country() {
        return (Optional<java.util.List<GetTopWatchedContentCountry>>) country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetTopWatchedContentGuids>> guids() {
        return (Optional<java.util.List<GetTopWatchedContentGuids>>) guids;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetTopWatchedContentRole>> role() {
        return (Optional<java.util.List<GetTopWatchedContentRole>>) role;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<User>> user() {
        return (Optional<java.util.List<User>>) user;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetTopWatchedContentMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetTopWatchedContentMetadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetTopWatchedContentMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetTopWatchedContentMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetTopWatchedContentMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public GetTopWatchedContentMetadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public GetTopWatchedContentMetadata withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }

    public GetTopWatchedContentMetadata withSlug(Optional<? extends String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public GetTopWatchedContentMetadata withStudio(String studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = Optional.ofNullable(studio);
        return this;
    }

    public GetTopWatchedContentMetadata withStudio(Optional<? extends String> studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = studio;
        return this;
    }

    public GetTopWatchedContentMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetTopWatchedContentMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetTopWatchedContentMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetTopWatchedContentMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionTitle(Optional<? extends String> librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionID(int librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionID(Optional<? extends Integer> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = Optional.ofNullable(librarySectionKey);
        return this;
    }

    public GetTopWatchedContentMetadata withLibrarySectionKey(Optional<? extends String> librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    public GetTopWatchedContentMetadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }

    public GetTopWatchedContentMetadata withContentRating(Optional<? extends String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    public GetTopWatchedContentMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public GetTopWatchedContentMetadata withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public GetTopWatchedContentMetadata withIndex(long index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetTopWatchedContentMetadata withIndex(Optional<? extends Long> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetTopWatchedContentMetadata withAudienceRating(double audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = Optional.ofNullable(audienceRating);
        return this;
    }

    public GetTopWatchedContentMetadata withAudienceRating(Optional<? extends Double> audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = audienceRating;
        return this;
    }

    public GetTopWatchedContentMetadata withYear(int year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    public GetTopWatchedContentMetadata withYear(Optional<? extends Integer> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    public GetTopWatchedContentMetadata withTagline(String tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = Optional.ofNullable(tagline);
        return this;
    }

    public GetTopWatchedContentMetadata withTagline(Optional<? extends String> tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = tagline;
        return this;
    }

    public GetTopWatchedContentMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetTopWatchedContentMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetTopWatchedContentMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetTopWatchedContentMetadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetTopWatchedContentMetadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetTopWatchedContentMetadata withDuration(Optional<? extends Integer> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetTopWatchedContentMetadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }

    public GetTopWatchedContentMetadata withOriginallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public GetTopWatchedContentMetadata withLeafCount(long leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    public GetTopWatchedContentMetadata withLeafCount(Optional<? extends Long> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    public GetTopWatchedContentMetadata withViewedLeafCount(long viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
        return this;
    }

    public GetTopWatchedContentMetadata withViewedLeafCount(Optional<? extends Long> viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = viewedLeafCount;
        return this;
    }

    public GetTopWatchedContentMetadata withChildCount(long childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = Optional.ofNullable(childCount);
        return this;
    }

    public GetTopWatchedContentMetadata withChildCount(Optional<? extends Long> childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    public GetTopWatchedContentMetadata withAddedAt(int addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public GetTopWatchedContentMetadata withAddedAt(Optional<? extends Integer> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public GetTopWatchedContentMetadata withUpdatedAt(int updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public GetTopWatchedContentMetadata withUpdatedAt(Optional<? extends Integer> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public GetTopWatchedContentMetadata withGlobalViewCount(long globalViewCount) {
        Utils.checkNotNull(globalViewCount, "globalViewCount");
        this.globalViewCount = Optional.ofNullable(globalViewCount);
        return this;
    }

    public GetTopWatchedContentMetadata withGlobalViewCount(Optional<? extends Long> globalViewCount) {
        Utils.checkNotNull(globalViewCount, "globalViewCount");
        this.globalViewCount = globalViewCount;
        return this;
    }

    public GetTopWatchedContentMetadata withAudienceRatingImage(String audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
        return this;
    }

    public GetTopWatchedContentMetadata withAudienceRatingImage(Optional<? extends String> audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = audienceRatingImage;
        return this;
    }

    public GetTopWatchedContentMetadata withGenre(java.util.List<GetTopWatchedContentGenre> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = Optional.ofNullable(genre);
        return this;
    }

    public GetTopWatchedContentMetadata withGenre(Optional<? extends java.util.List<GetTopWatchedContentGenre>> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = genre;
        return this;
    }

    public GetTopWatchedContentMetadata withCountry(java.util.List<GetTopWatchedContentCountry> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public GetTopWatchedContentMetadata withCountry(Optional<? extends java.util.List<GetTopWatchedContentCountry>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public GetTopWatchedContentMetadata withGuids(java.util.List<GetTopWatchedContentGuids> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = Optional.ofNullable(guids);
        return this;
    }

    public GetTopWatchedContentMetadata withGuids(Optional<? extends java.util.List<GetTopWatchedContentGuids>> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = guids;
        return this;
    }

    public GetTopWatchedContentMetadata withRole(java.util.List<GetTopWatchedContentRole> role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public GetTopWatchedContentMetadata withRole(Optional<? extends java.util.List<GetTopWatchedContentRole>> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public GetTopWatchedContentMetadata withUser(java.util.List<User> user) {
        Utils.checkNotNull(user, "user");
        this.user = Optional.ofNullable(user);
        return this;
    }

    public GetTopWatchedContentMetadata withUser(Optional<? extends java.util.List<User>> user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetTopWatchedContentMetadata other = (GetTopWatchedContentMetadata) o;
        return 
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.slug, other.slug) &&
            java.util.Objects.deepEquals(this.studio, other.studio) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            java.util.Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            java.util.Objects.deepEquals(this.librarySectionKey, other.librarySectionKey) &&
            java.util.Objects.deepEquals(this.contentRating, other.contentRating) &&
            java.util.Objects.deepEquals(this.summary, other.summary) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.audienceRating, other.audienceRating) &&
            java.util.Objects.deepEquals(this.year, other.year) &&
            java.util.Objects.deepEquals(this.tagline, other.tagline) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            java.util.Objects.deepEquals(this.leafCount, other.leafCount) &&
            java.util.Objects.deepEquals(this.viewedLeafCount, other.viewedLeafCount) &&
            java.util.Objects.deepEquals(this.childCount, other.childCount) &&
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.globalViewCount, other.globalViewCount) &&
            java.util.Objects.deepEquals(this.audienceRatingImage, other.audienceRatingImage) &&
            java.util.Objects.deepEquals(this.genre, other.genre) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.guids, other.guids) &&
            java.util.Objects.deepEquals(this.role, other.role) &&
            java.util.Objects.deepEquals(this.user, other.user);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ratingKey,
            key,
            guid,
            slug,
            studio,
            type,
            title,
            librarySectionTitle,
            librarySectionID,
            librarySectionKey,
            contentRating,
            summary,
            index,
            audienceRating,
            year,
            tagline,
            thumb,
            art,
            duration,
            originallyAvailableAt,
            leafCount,
            viewedLeafCount,
            childCount,
            addedAt,
            updatedAt,
            globalViewCount,
            audienceRatingImage,
            genre,
            country,
            guids,
            role,
            user);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetTopWatchedContentMetadata.class,
                "ratingKey", ratingKey,
                "key", key,
                "guid", guid,
                "slug", slug,
                "studio", studio,
                "type", type,
                "title", title,
                "librarySectionTitle", librarySectionTitle,
                "librarySectionID", librarySectionID,
                "librarySectionKey", librarySectionKey,
                "contentRating", contentRating,
                "summary", summary,
                "index", index,
                "audienceRating", audienceRating,
                "year", year,
                "tagline", tagline,
                "thumb", thumb,
                "art", art,
                "duration", duration,
                "originallyAvailableAt", originallyAvailableAt,
                "leafCount", leafCount,
                "viewedLeafCount", viewedLeafCount,
                "childCount", childCount,
                "addedAt", addedAt,
                "updatedAt", updatedAt,
                "globalViewCount", globalViewCount,
                "audienceRatingImage", audienceRatingImage,
                "genre", genre,
                "country", country,
                "guids", guids,
                "role", role,
                "user", user);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends String> slug = Optional.empty();
 
        private Optional<? extends String> studio = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> librarySectionTitle = Optional.empty();
 
        private Optional<? extends Integer> librarySectionID = Optional.empty();
 
        private Optional<? extends String> librarySectionKey = Optional.empty();
 
        private Optional<? extends String> contentRating = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();
 
        private Optional<? extends Long> index = Optional.empty();
 
        private Optional<? extends Double> audienceRating = Optional.empty();
 
        private Optional<? extends Integer> year = Optional.empty();
 
        private Optional<? extends String> tagline = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends Integer> duration = Optional.empty();
 
        private Optional<? extends LocalDate> originallyAvailableAt = Optional.empty();
 
        private Optional<? extends Long> leafCount = Optional.empty();
 
        private Optional<? extends Long> viewedLeafCount = Optional.empty();
 
        private Optional<? extends Long> childCount = Optional.empty();
 
        private Optional<? extends Integer> addedAt = Optional.empty();
 
        private Optional<? extends Integer> updatedAt = Optional.empty();
 
        private Optional<? extends Long> globalViewCount = Optional.empty();
 
        private Optional<? extends String> audienceRatingImage = Optional.empty();
 
        private Optional<? extends java.util.List<GetTopWatchedContentGenre>> genre = Optional.empty();
 
        private Optional<? extends java.util.List<GetTopWatchedContentCountry>> country = Optional.empty();
 
        private Optional<? extends java.util.List<GetTopWatchedContentGuids>> guids = Optional.empty();
 
        private Optional<? extends java.util.List<GetTopWatchedContentRole>> role = Optional.empty();
 
        private Optional<? extends java.util.List<User>> user = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        public Builder slug(Optional<? extends String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        public Builder studio(String studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = Optional.ofNullable(studio);
            return this;
        }

        public Builder studio(Optional<? extends String> studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = studio;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
            return this;
        }

        public Builder librarySectionTitle(Optional<? extends String> librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }

        public Builder librarySectionID(int librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        public Builder librarySectionID(Optional<? extends Integer> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = Optional.ofNullable(librarySectionKey);
            return this;
        }

        public Builder librarySectionKey(Optional<? extends String> librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }

        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        public Builder contentRating(Optional<? extends String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }

        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        public Builder index(long index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Long> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder audienceRating(double audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = Optional.ofNullable(audienceRating);
            return this;
        }

        public Builder audienceRating(Optional<? extends Double> audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = audienceRating;
            return this;
        }

        public Builder year(int year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        public Builder year(Optional<? extends Integer> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        public Builder tagline(String tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = Optional.ofNullable(tagline);
            return this;
        }

        public Builder tagline(Optional<? extends String> tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = tagline;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Integer> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        public Builder originallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        public Builder leafCount(long leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        public Builder leafCount(Optional<? extends Long> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        public Builder viewedLeafCount(long viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
            return this;
        }

        public Builder viewedLeafCount(Optional<? extends Long> viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = viewedLeafCount;
            return this;
        }

        public Builder childCount(long childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = Optional.ofNullable(childCount);
            return this;
        }

        public Builder childCount(Optional<? extends Long> childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }

        public Builder addedAt(int addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Integer> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder updatedAt(int updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Integer> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder globalViewCount(long globalViewCount) {
            Utils.checkNotNull(globalViewCount, "globalViewCount");
            this.globalViewCount = Optional.ofNullable(globalViewCount);
            return this;
        }

        public Builder globalViewCount(Optional<? extends Long> globalViewCount) {
            Utils.checkNotNull(globalViewCount, "globalViewCount");
            this.globalViewCount = globalViewCount;
            return this;
        }

        public Builder audienceRatingImage(String audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
            return this;
        }

        public Builder audienceRatingImage(Optional<? extends String> audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = audienceRatingImage;
            return this;
        }

        public Builder genre(java.util.List<GetTopWatchedContentGenre> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = Optional.ofNullable(genre);
            return this;
        }

        public Builder genre(Optional<? extends java.util.List<GetTopWatchedContentGenre>> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = genre;
            return this;
        }

        public Builder country(java.util.List<GetTopWatchedContentCountry> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends java.util.List<GetTopWatchedContentCountry>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder guids(java.util.List<GetTopWatchedContentGuids> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = Optional.ofNullable(guids);
            return this;
        }

        public Builder guids(Optional<? extends java.util.List<GetTopWatchedContentGuids>> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = guids;
            return this;
        }

        public Builder role(java.util.List<GetTopWatchedContentRole> role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<? extends java.util.List<GetTopWatchedContentRole>> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder user(java.util.List<User> user) {
            Utils.checkNotNull(user, "user");
            this.user = Optional.ofNullable(user);
            return this;
        }

        public Builder user(Optional<? extends java.util.List<User>> user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }
        
        public GetTopWatchedContentMetadata build() {
            return new GetTopWatchedContentMetadata(
                ratingKey,
                key,
                guid,
                slug,
                studio,
                type,
                title,
                librarySectionTitle,
                librarySectionID,
                librarySectionKey,
                contentRating,
                summary,
                index,
                audienceRating,
                year,
                tagline,
                thumb,
                art,
                duration,
                originallyAvailableAt,
                leafCount,
                viewedLeafCount,
                childCount,
                addedAt,
                updatedAt,
                globalViewCount,
                audienceRatingImage,
                genre,
                country,
                guids,
                role,
                user);
        }
    }
}

