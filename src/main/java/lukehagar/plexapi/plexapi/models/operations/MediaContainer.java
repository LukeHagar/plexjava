/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class MediaContainer {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Double> size;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowCameraUpload")
    private Optional<? extends Boolean> allowCameraUpload;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowChannelAccess")
    private Optional<? extends Boolean> allowChannelAccess;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowMediaDeletion")
    private Optional<? extends Boolean> allowMediaDeletion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSharing")
    private Optional<? extends Boolean> allowSharing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSync")
    private Optional<? extends Boolean> allowSync;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowTuners")
    private Optional<? extends Boolean> allowTuners;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backgroundProcessing")
    private Optional<? extends Boolean> backgroundProcessing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificate")
    private Optional<? extends Boolean> certificate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("companionProxy")
    private Optional<? extends Boolean> companionProxy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("countryCode")
    private Optional<? extends String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("diagnostics")
    private Optional<? extends String> diagnostics;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eventStream")
    private Optional<? extends Boolean> eventStream;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("friendlyName")
    private Optional<? extends String> friendlyName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hubSearch")
    private Optional<? extends Boolean> hubSearch;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("itemClusters")
    private Optional<? extends Boolean> itemClusters;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("livetv")
    private Optional<? extends Double> livetv;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("machineIdentifier")
    private Optional<? extends String> machineIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mediaProviders")
    private Optional<? extends Boolean> mediaProviders;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiuser")
    private Optional<? extends Boolean> multiuser;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("musicAnalysis")
    private Optional<? extends Double> musicAnalysis;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myPlex")
    private Optional<? extends Boolean> myPlex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myPlexMappingState")
    private Optional<? extends String> myPlexMappingState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myPlexSigninState")
    private Optional<? extends String> myPlexSigninState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myPlexSubscription")
    private Optional<? extends Boolean> myPlexSubscription;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("myPlexUsername")
    private Optional<? extends String> myPlexUsername;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offlineTranscode")
    private Optional<? extends Double> offlineTranscode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ownerFeatures")
    private Optional<? extends String> ownerFeatures;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photoAutoTag")
    private Optional<? extends Boolean> photoAutoTag;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platform")
    private Optional<? extends String> platform;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("platformVersion")
    private Optional<? extends String> platformVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pluginHost")
    private Optional<? extends Boolean> pluginHost;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pushNotifications")
    private Optional<? extends Boolean> pushNotifications;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("readOnlyLibraries")
    private Optional<? extends Boolean> readOnlyLibraries;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingBrainABRVersion")
    private Optional<? extends Double> streamingBrainABRVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("streamingBrainVersion")
    private Optional<? extends Double> streamingBrainVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sync")
    private Optional<? extends Boolean> sync;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderActiveVideoSessions")
    private Optional<? extends Double> transcoderActiveVideoSessions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderAudio")
    private Optional<? extends Boolean> transcoderAudio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderLyrics")
    private Optional<? extends Boolean> transcoderLyrics;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderPhoto")
    private Optional<? extends Boolean> transcoderPhoto;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderSubtitles")
    private Optional<? extends Boolean> transcoderSubtitles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderVideo")
    private Optional<? extends Boolean> transcoderVideo;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderVideoBitrates")
    private Optional<? extends String> transcoderVideoBitrates;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderVideoQualities")
    private Optional<? extends String> transcoderVideoQualities;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcoderVideoResolutions")
    private Optional<? extends String> transcoderVideoResolutions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Double> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updater")
    private Optional<? extends Boolean> updater;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("voiceSearch")
    private Optional<? extends Boolean> voiceSearch;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Directory")
    private Optional<? extends java.util.List<Directory>> directory;

    public MediaContainer(
            @JsonProperty("size") Optional<? extends Double> size,
            @JsonProperty("allowCameraUpload") Optional<? extends Boolean> allowCameraUpload,
            @JsonProperty("allowChannelAccess") Optional<? extends Boolean> allowChannelAccess,
            @JsonProperty("allowMediaDeletion") Optional<? extends Boolean> allowMediaDeletion,
            @JsonProperty("allowSharing") Optional<? extends Boolean> allowSharing,
            @JsonProperty("allowSync") Optional<? extends Boolean> allowSync,
            @JsonProperty("allowTuners") Optional<? extends Boolean> allowTuners,
            @JsonProperty("backgroundProcessing") Optional<? extends Boolean> backgroundProcessing,
            @JsonProperty("certificate") Optional<? extends Boolean> certificate,
            @JsonProperty("companionProxy") Optional<? extends Boolean> companionProxy,
            @JsonProperty("countryCode") Optional<? extends String> countryCode,
            @JsonProperty("diagnostics") Optional<? extends String> diagnostics,
            @JsonProperty("eventStream") Optional<? extends Boolean> eventStream,
            @JsonProperty("friendlyName") Optional<? extends String> friendlyName,
            @JsonProperty("hubSearch") Optional<? extends Boolean> hubSearch,
            @JsonProperty("itemClusters") Optional<? extends Boolean> itemClusters,
            @JsonProperty("livetv") Optional<? extends Double> livetv,
            @JsonProperty("machineIdentifier") Optional<? extends String> machineIdentifier,
            @JsonProperty("mediaProviders") Optional<? extends Boolean> mediaProviders,
            @JsonProperty("multiuser") Optional<? extends Boolean> multiuser,
            @JsonProperty("musicAnalysis") Optional<? extends Double> musicAnalysis,
            @JsonProperty("myPlex") Optional<? extends Boolean> myPlex,
            @JsonProperty("myPlexMappingState") Optional<? extends String> myPlexMappingState,
            @JsonProperty("myPlexSigninState") Optional<? extends String> myPlexSigninState,
            @JsonProperty("myPlexSubscription") Optional<? extends Boolean> myPlexSubscription,
            @JsonProperty("myPlexUsername") Optional<? extends String> myPlexUsername,
            @JsonProperty("offlineTranscode") Optional<? extends Double> offlineTranscode,
            @JsonProperty("ownerFeatures") Optional<? extends String> ownerFeatures,
            @JsonProperty("photoAutoTag") Optional<? extends Boolean> photoAutoTag,
            @JsonProperty("platform") Optional<? extends String> platform,
            @JsonProperty("platformVersion") Optional<? extends String> platformVersion,
            @JsonProperty("pluginHost") Optional<? extends Boolean> pluginHost,
            @JsonProperty("pushNotifications") Optional<? extends Boolean> pushNotifications,
            @JsonProperty("readOnlyLibraries") Optional<? extends Boolean> readOnlyLibraries,
            @JsonProperty("streamingBrainABRVersion") Optional<? extends Double> streamingBrainABRVersion,
            @JsonProperty("streamingBrainVersion") Optional<? extends Double> streamingBrainVersion,
            @JsonProperty("sync") Optional<? extends Boolean> sync,
            @JsonProperty("transcoderActiveVideoSessions") Optional<? extends Double> transcoderActiveVideoSessions,
            @JsonProperty("transcoderAudio") Optional<? extends Boolean> transcoderAudio,
            @JsonProperty("transcoderLyrics") Optional<? extends Boolean> transcoderLyrics,
            @JsonProperty("transcoderPhoto") Optional<? extends Boolean> transcoderPhoto,
            @JsonProperty("transcoderSubtitles") Optional<? extends Boolean> transcoderSubtitles,
            @JsonProperty("transcoderVideo") Optional<? extends Boolean> transcoderVideo,
            @JsonProperty("transcoderVideoBitrates") Optional<? extends String> transcoderVideoBitrates,
            @JsonProperty("transcoderVideoQualities") Optional<? extends String> transcoderVideoQualities,
            @JsonProperty("transcoderVideoResolutions") Optional<? extends String> transcoderVideoResolutions,
            @JsonProperty("updatedAt") Optional<? extends Double> updatedAt,
            @JsonProperty("updater") Optional<? extends Boolean> updater,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("voiceSearch") Optional<? extends Boolean> voiceSearch,
            @JsonProperty("Directory") Optional<? extends java.util.List<Directory>> directory) {
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(allowCameraUpload, "allowCameraUpload");
        Utils.checkNotNull(allowChannelAccess, "allowChannelAccess");
        Utils.checkNotNull(allowMediaDeletion, "allowMediaDeletion");
        Utils.checkNotNull(allowSharing, "allowSharing");
        Utils.checkNotNull(allowSync, "allowSync");
        Utils.checkNotNull(allowTuners, "allowTuners");
        Utils.checkNotNull(backgroundProcessing, "backgroundProcessing");
        Utils.checkNotNull(certificate, "certificate");
        Utils.checkNotNull(companionProxy, "companionProxy");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(diagnostics, "diagnostics");
        Utils.checkNotNull(eventStream, "eventStream");
        Utils.checkNotNull(friendlyName, "friendlyName");
        Utils.checkNotNull(hubSearch, "hubSearch");
        Utils.checkNotNull(itemClusters, "itemClusters");
        Utils.checkNotNull(livetv, "livetv");
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        Utils.checkNotNull(mediaProviders, "mediaProviders");
        Utils.checkNotNull(multiuser, "multiuser");
        Utils.checkNotNull(musicAnalysis, "musicAnalysis");
        Utils.checkNotNull(myPlex, "myPlex");
        Utils.checkNotNull(myPlexMappingState, "myPlexMappingState");
        Utils.checkNotNull(myPlexSigninState, "myPlexSigninState");
        Utils.checkNotNull(myPlexSubscription, "myPlexSubscription");
        Utils.checkNotNull(myPlexUsername, "myPlexUsername");
        Utils.checkNotNull(offlineTranscode, "offlineTranscode");
        Utils.checkNotNull(ownerFeatures, "ownerFeatures");
        Utils.checkNotNull(photoAutoTag, "photoAutoTag");
        Utils.checkNotNull(platform, "platform");
        Utils.checkNotNull(platformVersion, "platformVersion");
        Utils.checkNotNull(pluginHost, "pluginHost");
        Utils.checkNotNull(pushNotifications, "pushNotifications");
        Utils.checkNotNull(readOnlyLibraries, "readOnlyLibraries");
        Utils.checkNotNull(streamingBrainABRVersion, "streamingBrainABRVersion");
        Utils.checkNotNull(streamingBrainVersion, "streamingBrainVersion");
        Utils.checkNotNull(sync, "sync");
        Utils.checkNotNull(transcoderActiveVideoSessions, "transcoderActiveVideoSessions");
        Utils.checkNotNull(transcoderAudio, "transcoderAudio");
        Utils.checkNotNull(transcoderLyrics, "transcoderLyrics");
        Utils.checkNotNull(transcoderPhoto, "transcoderPhoto");
        Utils.checkNotNull(transcoderSubtitles, "transcoderSubtitles");
        Utils.checkNotNull(transcoderVideo, "transcoderVideo");
        Utils.checkNotNull(transcoderVideoBitrates, "transcoderVideoBitrates");
        Utils.checkNotNull(transcoderVideoQualities, "transcoderVideoQualities");
        Utils.checkNotNull(transcoderVideoResolutions, "transcoderVideoResolutions");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updater, "updater");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(voiceSearch, "voiceSearch");
        Utils.checkNotNull(directory, "directory");
        this.size = size;
        this.allowCameraUpload = allowCameraUpload;
        this.allowChannelAccess = allowChannelAccess;
        this.allowMediaDeletion = allowMediaDeletion;
        this.allowSharing = allowSharing;
        this.allowSync = allowSync;
        this.allowTuners = allowTuners;
        this.backgroundProcessing = backgroundProcessing;
        this.certificate = certificate;
        this.companionProxy = companionProxy;
        this.countryCode = countryCode;
        this.diagnostics = diagnostics;
        this.eventStream = eventStream;
        this.friendlyName = friendlyName;
        this.hubSearch = hubSearch;
        this.itemClusters = itemClusters;
        this.livetv = livetv;
        this.machineIdentifier = machineIdentifier;
        this.mediaProviders = mediaProviders;
        this.multiuser = multiuser;
        this.musicAnalysis = musicAnalysis;
        this.myPlex = myPlex;
        this.myPlexMappingState = myPlexMappingState;
        this.myPlexSigninState = myPlexSigninState;
        this.myPlexSubscription = myPlexSubscription;
        this.myPlexUsername = myPlexUsername;
        this.offlineTranscode = offlineTranscode;
        this.ownerFeatures = ownerFeatures;
        this.photoAutoTag = photoAutoTag;
        this.platform = platform;
        this.platformVersion = platformVersion;
        this.pluginHost = pluginHost;
        this.pushNotifications = pushNotifications;
        this.readOnlyLibraries = readOnlyLibraries;
        this.streamingBrainABRVersion = streamingBrainABRVersion;
        this.streamingBrainVersion = streamingBrainVersion;
        this.sync = sync;
        this.transcoderActiveVideoSessions = transcoderActiveVideoSessions;
        this.transcoderAudio = transcoderAudio;
        this.transcoderLyrics = transcoderLyrics;
        this.transcoderPhoto = transcoderPhoto;
        this.transcoderSubtitles = transcoderSubtitles;
        this.transcoderVideo = transcoderVideo;
        this.transcoderVideoBitrates = transcoderVideoBitrates;
        this.transcoderVideoQualities = transcoderVideoQualities;
        this.transcoderVideoResolutions = transcoderVideoResolutions;
        this.updatedAt = updatedAt;
        this.updater = updater;
        this.version = version;
        this.voiceSearch = voiceSearch;
        this.directory = directory;
    }

    public Optional<? extends Double> size() {
        return size;
    }

    public Optional<? extends Boolean> allowCameraUpload() {
        return allowCameraUpload;
    }

    public Optional<? extends Boolean> allowChannelAccess() {
        return allowChannelAccess;
    }

    public Optional<? extends Boolean> allowMediaDeletion() {
        return allowMediaDeletion;
    }

    public Optional<? extends Boolean> allowSharing() {
        return allowSharing;
    }

    public Optional<? extends Boolean> allowSync() {
        return allowSync;
    }

    public Optional<? extends Boolean> allowTuners() {
        return allowTuners;
    }

    public Optional<? extends Boolean> backgroundProcessing() {
        return backgroundProcessing;
    }

    public Optional<? extends Boolean> certificate() {
        return certificate;
    }

    public Optional<? extends Boolean> companionProxy() {
        return companionProxy;
    }

    public Optional<? extends String> countryCode() {
        return countryCode;
    }

    public Optional<? extends String> diagnostics() {
        return diagnostics;
    }

    public Optional<? extends Boolean> eventStream() {
        return eventStream;
    }

    public Optional<? extends String> friendlyName() {
        return friendlyName;
    }

    public Optional<? extends Boolean> hubSearch() {
        return hubSearch;
    }

    public Optional<? extends Boolean> itemClusters() {
        return itemClusters;
    }

    public Optional<? extends Double> livetv() {
        return livetv;
    }

    public Optional<? extends String> machineIdentifier() {
        return machineIdentifier;
    }

    public Optional<? extends Boolean> mediaProviders() {
        return mediaProviders;
    }

    public Optional<? extends Boolean> multiuser() {
        return multiuser;
    }

    public Optional<? extends Double> musicAnalysis() {
        return musicAnalysis;
    }

    public Optional<? extends Boolean> myPlex() {
        return myPlex;
    }

    public Optional<? extends String> myPlexMappingState() {
        return myPlexMappingState;
    }

    public Optional<? extends String> myPlexSigninState() {
        return myPlexSigninState;
    }

    public Optional<? extends Boolean> myPlexSubscription() {
        return myPlexSubscription;
    }

    public Optional<? extends String> myPlexUsername() {
        return myPlexUsername;
    }

    public Optional<? extends Double> offlineTranscode() {
        return offlineTranscode;
    }

    public Optional<? extends String> ownerFeatures() {
        return ownerFeatures;
    }

    public Optional<? extends Boolean> photoAutoTag() {
        return photoAutoTag;
    }

    public Optional<? extends String> platform() {
        return platform;
    }

    public Optional<? extends String> platformVersion() {
        return platformVersion;
    }

    public Optional<? extends Boolean> pluginHost() {
        return pluginHost;
    }

    public Optional<? extends Boolean> pushNotifications() {
        return pushNotifications;
    }

    public Optional<? extends Boolean> readOnlyLibraries() {
        return readOnlyLibraries;
    }

    public Optional<? extends Double> streamingBrainABRVersion() {
        return streamingBrainABRVersion;
    }

    public Optional<? extends Double> streamingBrainVersion() {
        return streamingBrainVersion;
    }

    public Optional<? extends Boolean> sync() {
        return sync;
    }

    public Optional<? extends Double> transcoderActiveVideoSessions() {
        return transcoderActiveVideoSessions;
    }

    public Optional<? extends Boolean> transcoderAudio() {
        return transcoderAudio;
    }

    public Optional<? extends Boolean> transcoderLyrics() {
        return transcoderLyrics;
    }

    public Optional<? extends Boolean> transcoderPhoto() {
        return transcoderPhoto;
    }

    public Optional<? extends Boolean> transcoderSubtitles() {
        return transcoderSubtitles;
    }

    public Optional<? extends Boolean> transcoderVideo() {
        return transcoderVideo;
    }

    public Optional<? extends String> transcoderVideoBitrates() {
        return transcoderVideoBitrates;
    }

    public Optional<? extends String> transcoderVideoQualities() {
        return transcoderVideoQualities;
    }

    public Optional<? extends String> transcoderVideoResolutions() {
        return transcoderVideoResolutions;
    }

    public Optional<? extends Double> updatedAt() {
        return updatedAt;
    }

    public Optional<? extends Boolean> updater() {
        return updater;
    }

    public Optional<? extends String> version() {
        return version;
    }

    public Optional<? extends Boolean> voiceSearch() {
        return voiceSearch;
    }

    public Optional<? extends java.util.List<Directory>> directory() {
        return directory;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MediaContainer withSize(double size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public MediaContainer withSize(Optional<? extends Double> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public MediaContainer withAllowCameraUpload(boolean allowCameraUpload) {
        Utils.checkNotNull(allowCameraUpload, "allowCameraUpload");
        this.allowCameraUpload = Optional.ofNullable(allowCameraUpload);
        return this;
    }

    public MediaContainer withAllowCameraUpload(Optional<? extends Boolean> allowCameraUpload) {
        Utils.checkNotNull(allowCameraUpload, "allowCameraUpload");
        this.allowCameraUpload = allowCameraUpload;
        return this;
    }

    public MediaContainer withAllowChannelAccess(boolean allowChannelAccess) {
        Utils.checkNotNull(allowChannelAccess, "allowChannelAccess");
        this.allowChannelAccess = Optional.ofNullable(allowChannelAccess);
        return this;
    }

    public MediaContainer withAllowChannelAccess(Optional<? extends Boolean> allowChannelAccess) {
        Utils.checkNotNull(allowChannelAccess, "allowChannelAccess");
        this.allowChannelAccess = allowChannelAccess;
        return this;
    }

    public MediaContainer withAllowMediaDeletion(boolean allowMediaDeletion) {
        Utils.checkNotNull(allowMediaDeletion, "allowMediaDeletion");
        this.allowMediaDeletion = Optional.ofNullable(allowMediaDeletion);
        return this;
    }

    public MediaContainer withAllowMediaDeletion(Optional<? extends Boolean> allowMediaDeletion) {
        Utils.checkNotNull(allowMediaDeletion, "allowMediaDeletion");
        this.allowMediaDeletion = allowMediaDeletion;
        return this;
    }

    public MediaContainer withAllowSharing(boolean allowSharing) {
        Utils.checkNotNull(allowSharing, "allowSharing");
        this.allowSharing = Optional.ofNullable(allowSharing);
        return this;
    }

    public MediaContainer withAllowSharing(Optional<? extends Boolean> allowSharing) {
        Utils.checkNotNull(allowSharing, "allowSharing");
        this.allowSharing = allowSharing;
        return this;
    }

    public MediaContainer withAllowSync(boolean allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = Optional.ofNullable(allowSync);
        return this;
    }

    public MediaContainer withAllowSync(Optional<? extends Boolean> allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = allowSync;
        return this;
    }

    public MediaContainer withAllowTuners(boolean allowTuners) {
        Utils.checkNotNull(allowTuners, "allowTuners");
        this.allowTuners = Optional.ofNullable(allowTuners);
        return this;
    }

    public MediaContainer withAllowTuners(Optional<? extends Boolean> allowTuners) {
        Utils.checkNotNull(allowTuners, "allowTuners");
        this.allowTuners = allowTuners;
        return this;
    }

    public MediaContainer withBackgroundProcessing(boolean backgroundProcessing) {
        Utils.checkNotNull(backgroundProcessing, "backgroundProcessing");
        this.backgroundProcessing = Optional.ofNullable(backgroundProcessing);
        return this;
    }

    public MediaContainer withBackgroundProcessing(Optional<? extends Boolean> backgroundProcessing) {
        Utils.checkNotNull(backgroundProcessing, "backgroundProcessing");
        this.backgroundProcessing = backgroundProcessing;
        return this;
    }

    public MediaContainer withCertificate(boolean certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = Optional.ofNullable(certificate);
        return this;
    }

    public MediaContainer withCertificate(Optional<? extends Boolean> certificate) {
        Utils.checkNotNull(certificate, "certificate");
        this.certificate = certificate;
        return this;
    }

    public MediaContainer withCompanionProxy(boolean companionProxy) {
        Utils.checkNotNull(companionProxy, "companionProxy");
        this.companionProxy = Optional.ofNullable(companionProxy);
        return this;
    }

    public MediaContainer withCompanionProxy(Optional<? extends Boolean> companionProxy) {
        Utils.checkNotNull(companionProxy, "companionProxy");
        this.companionProxy = companionProxy;
        return this;
    }

    public MediaContainer withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    public MediaContainer withCountryCode(Optional<? extends String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public MediaContainer withDiagnostics(String diagnostics) {
        Utils.checkNotNull(diagnostics, "diagnostics");
        this.diagnostics = Optional.ofNullable(diagnostics);
        return this;
    }

    public MediaContainer withDiagnostics(Optional<? extends String> diagnostics) {
        Utils.checkNotNull(diagnostics, "diagnostics");
        this.diagnostics = diagnostics;
        return this;
    }

    public MediaContainer withEventStream(boolean eventStream) {
        Utils.checkNotNull(eventStream, "eventStream");
        this.eventStream = Optional.ofNullable(eventStream);
        return this;
    }

    public MediaContainer withEventStream(Optional<? extends Boolean> eventStream) {
        Utils.checkNotNull(eventStream, "eventStream");
        this.eventStream = eventStream;
        return this;
    }

    public MediaContainer withFriendlyName(String friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = Optional.ofNullable(friendlyName);
        return this;
    }

    public MediaContainer withFriendlyName(Optional<? extends String> friendlyName) {
        Utils.checkNotNull(friendlyName, "friendlyName");
        this.friendlyName = friendlyName;
        return this;
    }

    public MediaContainer withHubSearch(boolean hubSearch) {
        Utils.checkNotNull(hubSearch, "hubSearch");
        this.hubSearch = Optional.ofNullable(hubSearch);
        return this;
    }

    public MediaContainer withHubSearch(Optional<? extends Boolean> hubSearch) {
        Utils.checkNotNull(hubSearch, "hubSearch");
        this.hubSearch = hubSearch;
        return this;
    }

    public MediaContainer withItemClusters(boolean itemClusters) {
        Utils.checkNotNull(itemClusters, "itemClusters");
        this.itemClusters = Optional.ofNullable(itemClusters);
        return this;
    }

    public MediaContainer withItemClusters(Optional<? extends Boolean> itemClusters) {
        Utils.checkNotNull(itemClusters, "itemClusters");
        this.itemClusters = itemClusters;
        return this;
    }

    public MediaContainer withLivetv(double livetv) {
        Utils.checkNotNull(livetv, "livetv");
        this.livetv = Optional.ofNullable(livetv);
        return this;
    }

    public MediaContainer withLivetv(Optional<? extends Double> livetv) {
        Utils.checkNotNull(livetv, "livetv");
        this.livetv = livetv;
        return this;
    }

    public MediaContainer withMachineIdentifier(String machineIdentifier) {
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        this.machineIdentifier = Optional.ofNullable(machineIdentifier);
        return this;
    }

    public MediaContainer withMachineIdentifier(Optional<? extends String> machineIdentifier) {
        Utils.checkNotNull(machineIdentifier, "machineIdentifier");
        this.machineIdentifier = machineIdentifier;
        return this;
    }

    public MediaContainer withMediaProviders(boolean mediaProviders) {
        Utils.checkNotNull(mediaProviders, "mediaProviders");
        this.mediaProviders = Optional.ofNullable(mediaProviders);
        return this;
    }

    public MediaContainer withMediaProviders(Optional<? extends Boolean> mediaProviders) {
        Utils.checkNotNull(mediaProviders, "mediaProviders");
        this.mediaProviders = mediaProviders;
        return this;
    }

    public MediaContainer withMultiuser(boolean multiuser) {
        Utils.checkNotNull(multiuser, "multiuser");
        this.multiuser = Optional.ofNullable(multiuser);
        return this;
    }

    public MediaContainer withMultiuser(Optional<? extends Boolean> multiuser) {
        Utils.checkNotNull(multiuser, "multiuser");
        this.multiuser = multiuser;
        return this;
    }

    public MediaContainer withMusicAnalysis(double musicAnalysis) {
        Utils.checkNotNull(musicAnalysis, "musicAnalysis");
        this.musicAnalysis = Optional.ofNullable(musicAnalysis);
        return this;
    }

    public MediaContainer withMusicAnalysis(Optional<? extends Double> musicAnalysis) {
        Utils.checkNotNull(musicAnalysis, "musicAnalysis");
        this.musicAnalysis = musicAnalysis;
        return this;
    }

    public MediaContainer withMyPlex(boolean myPlex) {
        Utils.checkNotNull(myPlex, "myPlex");
        this.myPlex = Optional.ofNullable(myPlex);
        return this;
    }

    public MediaContainer withMyPlex(Optional<? extends Boolean> myPlex) {
        Utils.checkNotNull(myPlex, "myPlex");
        this.myPlex = myPlex;
        return this;
    }

    public MediaContainer withMyPlexMappingState(String myPlexMappingState) {
        Utils.checkNotNull(myPlexMappingState, "myPlexMappingState");
        this.myPlexMappingState = Optional.ofNullable(myPlexMappingState);
        return this;
    }

    public MediaContainer withMyPlexMappingState(Optional<? extends String> myPlexMappingState) {
        Utils.checkNotNull(myPlexMappingState, "myPlexMappingState");
        this.myPlexMappingState = myPlexMappingState;
        return this;
    }

    public MediaContainer withMyPlexSigninState(String myPlexSigninState) {
        Utils.checkNotNull(myPlexSigninState, "myPlexSigninState");
        this.myPlexSigninState = Optional.ofNullable(myPlexSigninState);
        return this;
    }

    public MediaContainer withMyPlexSigninState(Optional<? extends String> myPlexSigninState) {
        Utils.checkNotNull(myPlexSigninState, "myPlexSigninState");
        this.myPlexSigninState = myPlexSigninState;
        return this;
    }

    public MediaContainer withMyPlexSubscription(boolean myPlexSubscription) {
        Utils.checkNotNull(myPlexSubscription, "myPlexSubscription");
        this.myPlexSubscription = Optional.ofNullable(myPlexSubscription);
        return this;
    }

    public MediaContainer withMyPlexSubscription(Optional<? extends Boolean> myPlexSubscription) {
        Utils.checkNotNull(myPlexSubscription, "myPlexSubscription");
        this.myPlexSubscription = myPlexSubscription;
        return this;
    }

    public MediaContainer withMyPlexUsername(String myPlexUsername) {
        Utils.checkNotNull(myPlexUsername, "myPlexUsername");
        this.myPlexUsername = Optional.ofNullable(myPlexUsername);
        return this;
    }

    public MediaContainer withMyPlexUsername(Optional<? extends String> myPlexUsername) {
        Utils.checkNotNull(myPlexUsername, "myPlexUsername");
        this.myPlexUsername = myPlexUsername;
        return this;
    }

    public MediaContainer withOfflineTranscode(double offlineTranscode) {
        Utils.checkNotNull(offlineTranscode, "offlineTranscode");
        this.offlineTranscode = Optional.ofNullable(offlineTranscode);
        return this;
    }

    public MediaContainer withOfflineTranscode(Optional<? extends Double> offlineTranscode) {
        Utils.checkNotNull(offlineTranscode, "offlineTranscode");
        this.offlineTranscode = offlineTranscode;
        return this;
    }

    public MediaContainer withOwnerFeatures(String ownerFeatures) {
        Utils.checkNotNull(ownerFeatures, "ownerFeatures");
        this.ownerFeatures = Optional.ofNullable(ownerFeatures);
        return this;
    }

    public MediaContainer withOwnerFeatures(Optional<? extends String> ownerFeatures) {
        Utils.checkNotNull(ownerFeatures, "ownerFeatures");
        this.ownerFeatures = ownerFeatures;
        return this;
    }

    public MediaContainer withPhotoAutoTag(boolean photoAutoTag) {
        Utils.checkNotNull(photoAutoTag, "photoAutoTag");
        this.photoAutoTag = Optional.ofNullable(photoAutoTag);
        return this;
    }

    public MediaContainer withPhotoAutoTag(Optional<? extends Boolean> photoAutoTag) {
        Utils.checkNotNull(photoAutoTag, "photoAutoTag");
        this.photoAutoTag = photoAutoTag;
        return this;
    }

    public MediaContainer withPlatform(String platform) {
        Utils.checkNotNull(platform, "platform");
        this.platform = Optional.ofNullable(platform);
        return this;
    }

    public MediaContainer withPlatform(Optional<? extends String> platform) {
        Utils.checkNotNull(platform, "platform");
        this.platform = platform;
        return this;
    }

    public MediaContainer withPlatformVersion(String platformVersion) {
        Utils.checkNotNull(platformVersion, "platformVersion");
        this.platformVersion = Optional.ofNullable(platformVersion);
        return this;
    }

    public MediaContainer withPlatformVersion(Optional<? extends String> platformVersion) {
        Utils.checkNotNull(platformVersion, "platformVersion");
        this.platformVersion = platformVersion;
        return this;
    }

    public MediaContainer withPluginHost(boolean pluginHost) {
        Utils.checkNotNull(pluginHost, "pluginHost");
        this.pluginHost = Optional.ofNullable(pluginHost);
        return this;
    }

    public MediaContainer withPluginHost(Optional<? extends Boolean> pluginHost) {
        Utils.checkNotNull(pluginHost, "pluginHost");
        this.pluginHost = pluginHost;
        return this;
    }

    public MediaContainer withPushNotifications(boolean pushNotifications) {
        Utils.checkNotNull(pushNotifications, "pushNotifications");
        this.pushNotifications = Optional.ofNullable(pushNotifications);
        return this;
    }

    public MediaContainer withPushNotifications(Optional<? extends Boolean> pushNotifications) {
        Utils.checkNotNull(pushNotifications, "pushNotifications");
        this.pushNotifications = pushNotifications;
        return this;
    }

    public MediaContainer withReadOnlyLibraries(boolean readOnlyLibraries) {
        Utils.checkNotNull(readOnlyLibraries, "readOnlyLibraries");
        this.readOnlyLibraries = Optional.ofNullable(readOnlyLibraries);
        return this;
    }

    public MediaContainer withReadOnlyLibraries(Optional<? extends Boolean> readOnlyLibraries) {
        Utils.checkNotNull(readOnlyLibraries, "readOnlyLibraries");
        this.readOnlyLibraries = readOnlyLibraries;
        return this;
    }

    public MediaContainer withStreamingBrainABRVersion(double streamingBrainABRVersion) {
        Utils.checkNotNull(streamingBrainABRVersion, "streamingBrainABRVersion");
        this.streamingBrainABRVersion = Optional.ofNullable(streamingBrainABRVersion);
        return this;
    }

    public MediaContainer withStreamingBrainABRVersion(Optional<? extends Double> streamingBrainABRVersion) {
        Utils.checkNotNull(streamingBrainABRVersion, "streamingBrainABRVersion");
        this.streamingBrainABRVersion = streamingBrainABRVersion;
        return this;
    }

    public MediaContainer withStreamingBrainVersion(double streamingBrainVersion) {
        Utils.checkNotNull(streamingBrainVersion, "streamingBrainVersion");
        this.streamingBrainVersion = Optional.ofNullable(streamingBrainVersion);
        return this;
    }

    public MediaContainer withStreamingBrainVersion(Optional<? extends Double> streamingBrainVersion) {
        Utils.checkNotNull(streamingBrainVersion, "streamingBrainVersion");
        this.streamingBrainVersion = streamingBrainVersion;
        return this;
    }

    public MediaContainer withSync(boolean sync) {
        Utils.checkNotNull(sync, "sync");
        this.sync = Optional.ofNullable(sync);
        return this;
    }

    public MediaContainer withSync(Optional<? extends Boolean> sync) {
        Utils.checkNotNull(sync, "sync");
        this.sync = sync;
        return this;
    }

    public MediaContainer withTranscoderActiveVideoSessions(double transcoderActiveVideoSessions) {
        Utils.checkNotNull(transcoderActiveVideoSessions, "transcoderActiveVideoSessions");
        this.transcoderActiveVideoSessions = Optional.ofNullable(transcoderActiveVideoSessions);
        return this;
    }

    public MediaContainer withTranscoderActiveVideoSessions(Optional<? extends Double> transcoderActiveVideoSessions) {
        Utils.checkNotNull(transcoderActiveVideoSessions, "transcoderActiveVideoSessions");
        this.transcoderActiveVideoSessions = transcoderActiveVideoSessions;
        return this;
    }

    public MediaContainer withTranscoderAudio(boolean transcoderAudio) {
        Utils.checkNotNull(transcoderAudio, "transcoderAudio");
        this.transcoderAudio = Optional.ofNullable(transcoderAudio);
        return this;
    }

    public MediaContainer withTranscoderAudio(Optional<? extends Boolean> transcoderAudio) {
        Utils.checkNotNull(transcoderAudio, "transcoderAudio");
        this.transcoderAudio = transcoderAudio;
        return this;
    }

    public MediaContainer withTranscoderLyrics(boolean transcoderLyrics) {
        Utils.checkNotNull(transcoderLyrics, "transcoderLyrics");
        this.transcoderLyrics = Optional.ofNullable(transcoderLyrics);
        return this;
    }

    public MediaContainer withTranscoderLyrics(Optional<? extends Boolean> transcoderLyrics) {
        Utils.checkNotNull(transcoderLyrics, "transcoderLyrics");
        this.transcoderLyrics = transcoderLyrics;
        return this;
    }

    public MediaContainer withTranscoderPhoto(boolean transcoderPhoto) {
        Utils.checkNotNull(transcoderPhoto, "transcoderPhoto");
        this.transcoderPhoto = Optional.ofNullable(transcoderPhoto);
        return this;
    }

    public MediaContainer withTranscoderPhoto(Optional<? extends Boolean> transcoderPhoto) {
        Utils.checkNotNull(transcoderPhoto, "transcoderPhoto");
        this.transcoderPhoto = transcoderPhoto;
        return this;
    }

    public MediaContainer withTranscoderSubtitles(boolean transcoderSubtitles) {
        Utils.checkNotNull(transcoderSubtitles, "transcoderSubtitles");
        this.transcoderSubtitles = Optional.ofNullable(transcoderSubtitles);
        return this;
    }

    public MediaContainer withTranscoderSubtitles(Optional<? extends Boolean> transcoderSubtitles) {
        Utils.checkNotNull(transcoderSubtitles, "transcoderSubtitles");
        this.transcoderSubtitles = transcoderSubtitles;
        return this;
    }

    public MediaContainer withTranscoderVideo(boolean transcoderVideo) {
        Utils.checkNotNull(transcoderVideo, "transcoderVideo");
        this.transcoderVideo = Optional.ofNullable(transcoderVideo);
        return this;
    }

    public MediaContainer withTranscoderVideo(Optional<? extends Boolean> transcoderVideo) {
        Utils.checkNotNull(transcoderVideo, "transcoderVideo");
        this.transcoderVideo = transcoderVideo;
        return this;
    }

    public MediaContainer withTranscoderVideoBitrates(String transcoderVideoBitrates) {
        Utils.checkNotNull(transcoderVideoBitrates, "transcoderVideoBitrates");
        this.transcoderVideoBitrates = Optional.ofNullable(transcoderVideoBitrates);
        return this;
    }

    public MediaContainer withTranscoderVideoBitrates(Optional<? extends String> transcoderVideoBitrates) {
        Utils.checkNotNull(transcoderVideoBitrates, "transcoderVideoBitrates");
        this.transcoderVideoBitrates = transcoderVideoBitrates;
        return this;
    }

    public MediaContainer withTranscoderVideoQualities(String transcoderVideoQualities) {
        Utils.checkNotNull(transcoderVideoQualities, "transcoderVideoQualities");
        this.transcoderVideoQualities = Optional.ofNullable(transcoderVideoQualities);
        return this;
    }

    public MediaContainer withTranscoderVideoQualities(Optional<? extends String> transcoderVideoQualities) {
        Utils.checkNotNull(transcoderVideoQualities, "transcoderVideoQualities");
        this.transcoderVideoQualities = transcoderVideoQualities;
        return this;
    }

    public MediaContainer withTranscoderVideoResolutions(String transcoderVideoResolutions) {
        Utils.checkNotNull(transcoderVideoResolutions, "transcoderVideoResolutions");
        this.transcoderVideoResolutions = Optional.ofNullable(transcoderVideoResolutions);
        return this;
    }

    public MediaContainer withTranscoderVideoResolutions(Optional<? extends String> transcoderVideoResolutions) {
        Utils.checkNotNull(transcoderVideoResolutions, "transcoderVideoResolutions");
        this.transcoderVideoResolutions = transcoderVideoResolutions;
        return this;
    }

    public MediaContainer withUpdatedAt(double updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public MediaContainer withUpdatedAt(Optional<? extends Double> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public MediaContainer withUpdater(boolean updater) {
        Utils.checkNotNull(updater, "updater");
        this.updater = Optional.ofNullable(updater);
        return this;
    }

    public MediaContainer withUpdater(Optional<? extends Boolean> updater) {
        Utils.checkNotNull(updater, "updater");
        this.updater = updater;
        return this;
    }

    public MediaContainer withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public MediaContainer withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    public MediaContainer withVoiceSearch(boolean voiceSearch) {
        Utils.checkNotNull(voiceSearch, "voiceSearch");
        this.voiceSearch = Optional.ofNullable(voiceSearch);
        return this;
    }

    public MediaContainer withVoiceSearch(Optional<? extends Boolean> voiceSearch) {
        Utils.checkNotNull(voiceSearch, "voiceSearch");
        this.voiceSearch = voiceSearch;
        return this;
    }

    public MediaContainer withDirectory(java.util.List<Directory> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = Optional.ofNullable(directory);
        return this;
    }

    public MediaContainer withDirectory(Optional<? extends java.util.List<Directory>> directory) {
        Utils.checkNotNull(directory, "directory");
        this.directory = directory;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MediaContainer other = (MediaContainer) o;
        return 
            java.util.Objects.deepEquals(this.size, other.size) &&
            java.util.Objects.deepEquals(this.allowCameraUpload, other.allowCameraUpload) &&
            java.util.Objects.deepEquals(this.allowChannelAccess, other.allowChannelAccess) &&
            java.util.Objects.deepEquals(this.allowMediaDeletion, other.allowMediaDeletion) &&
            java.util.Objects.deepEquals(this.allowSharing, other.allowSharing) &&
            java.util.Objects.deepEquals(this.allowSync, other.allowSync) &&
            java.util.Objects.deepEquals(this.allowTuners, other.allowTuners) &&
            java.util.Objects.deepEquals(this.backgroundProcessing, other.backgroundProcessing) &&
            java.util.Objects.deepEquals(this.certificate, other.certificate) &&
            java.util.Objects.deepEquals(this.companionProxy, other.companionProxy) &&
            java.util.Objects.deepEquals(this.countryCode, other.countryCode) &&
            java.util.Objects.deepEquals(this.diagnostics, other.diagnostics) &&
            java.util.Objects.deepEquals(this.eventStream, other.eventStream) &&
            java.util.Objects.deepEquals(this.friendlyName, other.friendlyName) &&
            java.util.Objects.deepEquals(this.hubSearch, other.hubSearch) &&
            java.util.Objects.deepEquals(this.itemClusters, other.itemClusters) &&
            java.util.Objects.deepEquals(this.livetv, other.livetv) &&
            java.util.Objects.deepEquals(this.machineIdentifier, other.machineIdentifier) &&
            java.util.Objects.deepEquals(this.mediaProviders, other.mediaProviders) &&
            java.util.Objects.deepEquals(this.multiuser, other.multiuser) &&
            java.util.Objects.deepEquals(this.musicAnalysis, other.musicAnalysis) &&
            java.util.Objects.deepEquals(this.myPlex, other.myPlex) &&
            java.util.Objects.deepEquals(this.myPlexMappingState, other.myPlexMappingState) &&
            java.util.Objects.deepEquals(this.myPlexSigninState, other.myPlexSigninState) &&
            java.util.Objects.deepEquals(this.myPlexSubscription, other.myPlexSubscription) &&
            java.util.Objects.deepEquals(this.myPlexUsername, other.myPlexUsername) &&
            java.util.Objects.deepEquals(this.offlineTranscode, other.offlineTranscode) &&
            java.util.Objects.deepEquals(this.ownerFeatures, other.ownerFeatures) &&
            java.util.Objects.deepEquals(this.photoAutoTag, other.photoAutoTag) &&
            java.util.Objects.deepEquals(this.platform, other.platform) &&
            java.util.Objects.deepEquals(this.platformVersion, other.platformVersion) &&
            java.util.Objects.deepEquals(this.pluginHost, other.pluginHost) &&
            java.util.Objects.deepEquals(this.pushNotifications, other.pushNotifications) &&
            java.util.Objects.deepEquals(this.readOnlyLibraries, other.readOnlyLibraries) &&
            java.util.Objects.deepEquals(this.streamingBrainABRVersion, other.streamingBrainABRVersion) &&
            java.util.Objects.deepEquals(this.streamingBrainVersion, other.streamingBrainVersion) &&
            java.util.Objects.deepEquals(this.sync, other.sync) &&
            java.util.Objects.deepEquals(this.transcoderActiveVideoSessions, other.transcoderActiveVideoSessions) &&
            java.util.Objects.deepEquals(this.transcoderAudio, other.transcoderAudio) &&
            java.util.Objects.deepEquals(this.transcoderLyrics, other.transcoderLyrics) &&
            java.util.Objects.deepEquals(this.transcoderPhoto, other.transcoderPhoto) &&
            java.util.Objects.deepEquals(this.transcoderSubtitles, other.transcoderSubtitles) &&
            java.util.Objects.deepEquals(this.transcoderVideo, other.transcoderVideo) &&
            java.util.Objects.deepEquals(this.transcoderVideoBitrates, other.transcoderVideoBitrates) &&
            java.util.Objects.deepEquals(this.transcoderVideoQualities, other.transcoderVideoQualities) &&
            java.util.Objects.deepEquals(this.transcoderVideoResolutions, other.transcoderVideoResolutions) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updater, other.updater) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.voiceSearch, other.voiceSearch) &&
            java.util.Objects.deepEquals(this.directory, other.directory);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            size,
            allowCameraUpload,
            allowChannelAccess,
            allowMediaDeletion,
            allowSharing,
            allowSync,
            allowTuners,
            backgroundProcessing,
            certificate,
            companionProxy,
            countryCode,
            diagnostics,
            eventStream,
            friendlyName,
            hubSearch,
            itemClusters,
            livetv,
            machineIdentifier,
            mediaProviders,
            multiuser,
            musicAnalysis,
            myPlex,
            myPlexMappingState,
            myPlexSigninState,
            myPlexSubscription,
            myPlexUsername,
            offlineTranscode,
            ownerFeatures,
            photoAutoTag,
            platform,
            platformVersion,
            pluginHost,
            pushNotifications,
            readOnlyLibraries,
            streamingBrainABRVersion,
            streamingBrainVersion,
            sync,
            transcoderActiveVideoSessions,
            transcoderAudio,
            transcoderLyrics,
            transcoderPhoto,
            transcoderSubtitles,
            transcoderVideo,
            transcoderVideoBitrates,
            transcoderVideoQualities,
            transcoderVideoResolutions,
            updatedAt,
            updater,
            version,
            voiceSearch,
            directory);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MediaContainer.class,
                "size", size,
                "allowCameraUpload", allowCameraUpload,
                "allowChannelAccess", allowChannelAccess,
                "allowMediaDeletion", allowMediaDeletion,
                "allowSharing", allowSharing,
                "allowSync", allowSync,
                "allowTuners", allowTuners,
                "backgroundProcessing", backgroundProcessing,
                "certificate", certificate,
                "companionProxy", companionProxy,
                "countryCode", countryCode,
                "diagnostics", diagnostics,
                "eventStream", eventStream,
                "friendlyName", friendlyName,
                "hubSearch", hubSearch,
                "itemClusters", itemClusters,
                "livetv", livetv,
                "machineIdentifier", machineIdentifier,
                "mediaProviders", mediaProviders,
                "multiuser", multiuser,
                "musicAnalysis", musicAnalysis,
                "myPlex", myPlex,
                "myPlexMappingState", myPlexMappingState,
                "myPlexSigninState", myPlexSigninState,
                "myPlexSubscription", myPlexSubscription,
                "myPlexUsername", myPlexUsername,
                "offlineTranscode", offlineTranscode,
                "ownerFeatures", ownerFeatures,
                "photoAutoTag", photoAutoTag,
                "platform", platform,
                "platformVersion", platformVersion,
                "pluginHost", pluginHost,
                "pushNotifications", pushNotifications,
                "readOnlyLibraries", readOnlyLibraries,
                "streamingBrainABRVersion", streamingBrainABRVersion,
                "streamingBrainVersion", streamingBrainVersion,
                "sync", sync,
                "transcoderActiveVideoSessions", transcoderActiveVideoSessions,
                "transcoderAudio", transcoderAudio,
                "transcoderLyrics", transcoderLyrics,
                "transcoderPhoto", transcoderPhoto,
                "transcoderSubtitles", transcoderSubtitles,
                "transcoderVideo", transcoderVideo,
                "transcoderVideoBitrates", transcoderVideoBitrates,
                "transcoderVideoQualities", transcoderVideoQualities,
                "transcoderVideoResolutions", transcoderVideoResolutions,
                "updatedAt", updatedAt,
                "updater", updater,
                "version", version,
                "voiceSearch", voiceSearch,
                "directory", directory);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> size = Optional.empty();
 
        private Optional<? extends Boolean> allowCameraUpload = Optional.empty();
 
        private Optional<? extends Boolean> allowChannelAccess = Optional.empty();
 
        private Optional<? extends Boolean> allowMediaDeletion = Optional.empty();
 
        private Optional<? extends Boolean> allowSharing = Optional.empty();
 
        private Optional<? extends Boolean> allowSync = Optional.empty();
 
        private Optional<? extends Boolean> allowTuners = Optional.empty();
 
        private Optional<? extends Boolean> backgroundProcessing = Optional.empty();
 
        private Optional<? extends Boolean> certificate = Optional.empty();
 
        private Optional<? extends Boolean> companionProxy = Optional.empty();
 
        private Optional<? extends String> countryCode = Optional.empty();
 
        private Optional<? extends String> diagnostics = Optional.empty();
 
        private Optional<? extends Boolean> eventStream = Optional.empty();
 
        private Optional<? extends String> friendlyName = Optional.empty();
 
        private Optional<? extends Boolean> hubSearch = Optional.empty();
 
        private Optional<? extends Boolean> itemClusters = Optional.empty();
 
        private Optional<? extends Double> livetv = Optional.empty();
 
        private Optional<? extends String> machineIdentifier = Optional.empty();
 
        private Optional<? extends Boolean> mediaProviders = Optional.empty();
 
        private Optional<? extends Boolean> multiuser = Optional.empty();
 
        private Optional<? extends Double> musicAnalysis = Optional.empty();
 
        private Optional<? extends Boolean> myPlex = Optional.empty();
 
        private Optional<? extends String> myPlexMappingState = Optional.empty();
 
        private Optional<? extends String> myPlexSigninState = Optional.empty();
 
        private Optional<? extends Boolean> myPlexSubscription = Optional.empty();
 
        private Optional<? extends String> myPlexUsername = Optional.empty();
 
        private Optional<? extends Double> offlineTranscode = Optional.empty();
 
        private Optional<? extends String> ownerFeatures = Optional.empty();
 
        private Optional<? extends Boolean> photoAutoTag = Optional.empty();
 
        private Optional<? extends String> platform = Optional.empty();
 
        private Optional<? extends String> platformVersion = Optional.empty();
 
        private Optional<? extends Boolean> pluginHost = Optional.empty();
 
        private Optional<? extends Boolean> pushNotifications = Optional.empty();
 
        private Optional<? extends Boolean> readOnlyLibraries = Optional.empty();
 
        private Optional<? extends Double> streamingBrainABRVersion = Optional.empty();
 
        private Optional<? extends Double> streamingBrainVersion = Optional.empty();
 
        private Optional<? extends Boolean> sync = Optional.empty();
 
        private Optional<? extends Double> transcoderActiveVideoSessions = Optional.empty();
 
        private Optional<? extends Boolean> transcoderAudio = Optional.empty();
 
        private Optional<? extends Boolean> transcoderLyrics = Optional.empty();
 
        private Optional<? extends Boolean> transcoderPhoto = Optional.empty();
 
        private Optional<? extends Boolean> transcoderSubtitles = Optional.empty();
 
        private Optional<? extends Boolean> transcoderVideo = Optional.empty();
 
        private Optional<? extends String> transcoderVideoBitrates = Optional.empty();
 
        private Optional<? extends String> transcoderVideoQualities = Optional.empty();
 
        private Optional<? extends String> transcoderVideoResolutions = Optional.empty();
 
        private Optional<? extends Double> updatedAt = Optional.empty();
 
        private Optional<? extends Boolean> updater = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends Boolean> voiceSearch = Optional.empty();
 
        private Optional<? extends java.util.List<Directory>> directory = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder size(double size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<? extends Double> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder allowCameraUpload(boolean allowCameraUpload) {
            Utils.checkNotNull(allowCameraUpload, "allowCameraUpload");
            this.allowCameraUpload = Optional.ofNullable(allowCameraUpload);
            return this;
        }

        public Builder allowCameraUpload(Optional<? extends Boolean> allowCameraUpload) {
            Utils.checkNotNull(allowCameraUpload, "allowCameraUpload");
            this.allowCameraUpload = allowCameraUpload;
            return this;
        }

        public Builder allowChannelAccess(boolean allowChannelAccess) {
            Utils.checkNotNull(allowChannelAccess, "allowChannelAccess");
            this.allowChannelAccess = Optional.ofNullable(allowChannelAccess);
            return this;
        }

        public Builder allowChannelAccess(Optional<? extends Boolean> allowChannelAccess) {
            Utils.checkNotNull(allowChannelAccess, "allowChannelAccess");
            this.allowChannelAccess = allowChannelAccess;
            return this;
        }

        public Builder allowMediaDeletion(boolean allowMediaDeletion) {
            Utils.checkNotNull(allowMediaDeletion, "allowMediaDeletion");
            this.allowMediaDeletion = Optional.ofNullable(allowMediaDeletion);
            return this;
        }

        public Builder allowMediaDeletion(Optional<? extends Boolean> allowMediaDeletion) {
            Utils.checkNotNull(allowMediaDeletion, "allowMediaDeletion");
            this.allowMediaDeletion = allowMediaDeletion;
            return this;
        }

        public Builder allowSharing(boolean allowSharing) {
            Utils.checkNotNull(allowSharing, "allowSharing");
            this.allowSharing = Optional.ofNullable(allowSharing);
            return this;
        }

        public Builder allowSharing(Optional<? extends Boolean> allowSharing) {
            Utils.checkNotNull(allowSharing, "allowSharing");
            this.allowSharing = allowSharing;
            return this;
        }

        public Builder allowSync(boolean allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = Optional.ofNullable(allowSync);
            return this;
        }

        public Builder allowSync(Optional<? extends Boolean> allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = allowSync;
            return this;
        }

        public Builder allowTuners(boolean allowTuners) {
            Utils.checkNotNull(allowTuners, "allowTuners");
            this.allowTuners = Optional.ofNullable(allowTuners);
            return this;
        }

        public Builder allowTuners(Optional<? extends Boolean> allowTuners) {
            Utils.checkNotNull(allowTuners, "allowTuners");
            this.allowTuners = allowTuners;
            return this;
        }

        public Builder backgroundProcessing(boolean backgroundProcessing) {
            Utils.checkNotNull(backgroundProcessing, "backgroundProcessing");
            this.backgroundProcessing = Optional.ofNullable(backgroundProcessing);
            return this;
        }

        public Builder backgroundProcessing(Optional<? extends Boolean> backgroundProcessing) {
            Utils.checkNotNull(backgroundProcessing, "backgroundProcessing");
            this.backgroundProcessing = backgroundProcessing;
            return this;
        }

        public Builder certificate(boolean certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = Optional.ofNullable(certificate);
            return this;
        }

        public Builder certificate(Optional<? extends Boolean> certificate) {
            Utils.checkNotNull(certificate, "certificate");
            this.certificate = certificate;
            return this;
        }

        public Builder companionProxy(boolean companionProxy) {
            Utils.checkNotNull(companionProxy, "companionProxy");
            this.companionProxy = Optional.ofNullable(companionProxy);
            return this;
        }

        public Builder companionProxy(Optional<? extends Boolean> companionProxy) {
            Utils.checkNotNull(companionProxy, "companionProxy");
            this.companionProxy = companionProxy;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        public Builder countryCode(Optional<? extends String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder diagnostics(String diagnostics) {
            Utils.checkNotNull(diagnostics, "diagnostics");
            this.diagnostics = Optional.ofNullable(diagnostics);
            return this;
        }

        public Builder diagnostics(Optional<? extends String> diagnostics) {
            Utils.checkNotNull(diagnostics, "diagnostics");
            this.diagnostics = diagnostics;
            return this;
        }

        public Builder eventStream(boolean eventStream) {
            Utils.checkNotNull(eventStream, "eventStream");
            this.eventStream = Optional.ofNullable(eventStream);
            return this;
        }

        public Builder eventStream(Optional<? extends Boolean> eventStream) {
            Utils.checkNotNull(eventStream, "eventStream");
            this.eventStream = eventStream;
            return this;
        }

        public Builder friendlyName(String friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = Optional.ofNullable(friendlyName);
            return this;
        }

        public Builder friendlyName(Optional<? extends String> friendlyName) {
            Utils.checkNotNull(friendlyName, "friendlyName");
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder hubSearch(boolean hubSearch) {
            Utils.checkNotNull(hubSearch, "hubSearch");
            this.hubSearch = Optional.ofNullable(hubSearch);
            return this;
        }

        public Builder hubSearch(Optional<? extends Boolean> hubSearch) {
            Utils.checkNotNull(hubSearch, "hubSearch");
            this.hubSearch = hubSearch;
            return this;
        }

        public Builder itemClusters(boolean itemClusters) {
            Utils.checkNotNull(itemClusters, "itemClusters");
            this.itemClusters = Optional.ofNullable(itemClusters);
            return this;
        }

        public Builder itemClusters(Optional<? extends Boolean> itemClusters) {
            Utils.checkNotNull(itemClusters, "itemClusters");
            this.itemClusters = itemClusters;
            return this;
        }

        public Builder livetv(double livetv) {
            Utils.checkNotNull(livetv, "livetv");
            this.livetv = Optional.ofNullable(livetv);
            return this;
        }

        public Builder livetv(Optional<? extends Double> livetv) {
            Utils.checkNotNull(livetv, "livetv");
            this.livetv = livetv;
            return this;
        }

        public Builder machineIdentifier(String machineIdentifier) {
            Utils.checkNotNull(machineIdentifier, "machineIdentifier");
            this.machineIdentifier = Optional.ofNullable(machineIdentifier);
            return this;
        }

        public Builder machineIdentifier(Optional<? extends String> machineIdentifier) {
            Utils.checkNotNull(machineIdentifier, "machineIdentifier");
            this.machineIdentifier = machineIdentifier;
            return this;
        }

        public Builder mediaProviders(boolean mediaProviders) {
            Utils.checkNotNull(mediaProviders, "mediaProviders");
            this.mediaProviders = Optional.ofNullable(mediaProviders);
            return this;
        }

        public Builder mediaProviders(Optional<? extends Boolean> mediaProviders) {
            Utils.checkNotNull(mediaProviders, "mediaProviders");
            this.mediaProviders = mediaProviders;
            return this;
        }

        public Builder multiuser(boolean multiuser) {
            Utils.checkNotNull(multiuser, "multiuser");
            this.multiuser = Optional.ofNullable(multiuser);
            return this;
        }

        public Builder multiuser(Optional<? extends Boolean> multiuser) {
            Utils.checkNotNull(multiuser, "multiuser");
            this.multiuser = multiuser;
            return this;
        }

        public Builder musicAnalysis(double musicAnalysis) {
            Utils.checkNotNull(musicAnalysis, "musicAnalysis");
            this.musicAnalysis = Optional.ofNullable(musicAnalysis);
            return this;
        }

        public Builder musicAnalysis(Optional<? extends Double> musicAnalysis) {
            Utils.checkNotNull(musicAnalysis, "musicAnalysis");
            this.musicAnalysis = musicAnalysis;
            return this;
        }

        public Builder myPlex(boolean myPlex) {
            Utils.checkNotNull(myPlex, "myPlex");
            this.myPlex = Optional.ofNullable(myPlex);
            return this;
        }

        public Builder myPlex(Optional<? extends Boolean> myPlex) {
            Utils.checkNotNull(myPlex, "myPlex");
            this.myPlex = myPlex;
            return this;
        }

        public Builder myPlexMappingState(String myPlexMappingState) {
            Utils.checkNotNull(myPlexMappingState, "myPlexMappingState");
            this.myPlexMappingState = Optional.ofNullable(myPlexMappingState);
            return this;
        }

        public Builder myPlexMappingState(Optional<? extends String> myPlexMappingState) {
            Utils.checkNotNull(myPlexMappingState, "myPlexMappingState");
            this.myPlexMappingState = myPlexMappingState;
            return this;
        }

        public Builder myPlexSigninState(String myPlexSigninState) {
            Utils.checkNotNull(myPlexSigninState, "myPlexSigninState");
            this.myPlexSigninState = Optional.ofNullable(myPlexSigninState);
            return this;
        }

        public Builder myPlexSigninState(Optional<? extends String> myPlexSigninState) {
            Utils.checkNotNull(myPlexSigninState, "myPlexSigninState");
            this.myPlexSigninState = myPlexSigninState;
            return this;
        }

        public Builder myPlexSubscription(boolean myPlexSubscription) {
            Utils.checkNotNull(myPlexSubscription, "myPlexSubscription");
            this.myPlexSubscription = Optional.ofNullable(myPlexSubscription);
            return this;
        }

        public Builder myPlexSubscription(Optional<? extends Boolean> myPlexSubscription) {
            Utils.checkNotNull(myPlexSubscription, "myPlexSubscription");
            this.myPlexSubscription = myPlexSubscription;
            return this;
        }

        public Builder myPlexUsername(String myPlexUsername) {
            Utils.checkNotNull(myPlexUsername, "myPlexUsername");
            this.myPlexUsername = Optional.ofNullable(myPlexUsername);
            return this;
        }

        public Builder myPlexUsername(Optional<? extends String> myPlexUsername) {
            Utils.checkNotNull(myPlexUsername, "myPlexUsername");
            this.myPlexUsername = myPlexUsername;
            return this;
        }

        public Builder offlineTranscode(double offlineTranscode) {
            Utils.checkNotNull(offlineTranscode, "offlineTranscode");
            this.offlineTranscode = Optional.ofNullable(offlineTranscode);
            return this;
        }

        public Builder offlineTranscode(Optional<? extends Double> offlineTranscode) {
            Utils.checkNotNull(offlineTranscode, "offlineTranscode");
            this.offlineTranscode = offlineTranscode;
            return this;
        }

        public Builder ownerFeatures(String ownerFeatures) {
            Utils.checkNotNull(ownerFeatures, "ownerFeatures");
            this.ownerFeatures = Optional.ofNullable(ownerFeatures);
            return this;
        }

        public Builder ownerFeatures(Optional<? extends String> ownerFeatures) {
            Utils.checkNotNull(ownerFeatures, "ownerFeatures");
            this.ownerFeatures = ownerFeatures;
            return this;
        }

        public Builder photoAutoTag(boolean photoAutoTag) {
            Utils.checkNotNull(photoAutoTag, "photoAutoTag");
            this.photoAutoTag = Optional.ofNullable(photoAutoTag);
            return this;
        }

        public Builder photoAutoTag(Optional<? extends Boolean> photoAutoTag) {
            Utils.checkNotNull(photoAutoTag, "photoAutoTag");
            this.photoAutoTag = photoAutoTag;
            return this;
        }

        public Builder platform(String platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = Optional.ofNullable(platform);
            return this;
        }

        public Builder platform(Optional<? extends String> platform) {
            Utils.checkNotNull(platform, "platform");
            this.platform = platform;
            return this;
        }

        public Builder platformVersion(String platformVersion) {
            Utils.checkNotNull(platformVersion, "platformVersion");
            this.platformVersion = Optional.ofNullable(platformVersion);
            return this;
        }

        public Builder platformVersion(Optional<? extends String> platformVersion) {
            Utils.checkNotNull(platformVersion, "platformVersion");
            this.platformVersion = platformVersion;
            return this;
        }

        public Builder pluginHost(boolean pluginHost) {
            Utils.checkNotNull(pluginHost, "pluginHost");
            this.pluginHost = Optional.ofNullable(pluginHost);
            return this;
        }

        public Builder pluginHost(Optional<? extends Boolean> pluginHost) {
            Utils.checkNotNull(pluginHost, "pluginHost");
            this.pluginHost = pluginHost;
            return this;
        }

        public Builder pushNotifications(boolean pushNotifications) {
            Utils.checkNotNull(pushNotifications, "pushNotifications");
            this.pushNotifications = Optional.ofNullable(pushNotifications);
            return this;
        }

        public Builder pushNotifications(Optional<? extends Boolean> pushNotifications) {
            Utils.checkNotNull(pushNotifications, "pushNotifications");
            this.pushNotifications = pushNotifications;
            return this;
        }

        public Builder readOnlyLibraries(boolean readOnlyLibraries) {
            Utils.checkNotNull(readOnlyLibraries, "readOnlyLibraries");
            this.readOnlyLibraries = Optional.ofNullable(readOnlyLibraries);
            return this;
        }

        public Builder readOnlyLibraries(Optional<? extends Boolean> readOnlyLibraries) {
            Utils.checkNotNull(readOnlyLibraries, "readOnlyLibraries");
            this.readOnlyLibraries = readOnlyLibraries;
            return this;
        }

        public Builder streamingBrainABRVersion(double streamingBrainABRVersion) {
            Utils.checkNotNull(streamingBrainABRVersion, "streamingBrainABRVersion");
            this.streamingBrainABRVersion = Optional.ofNullable(streamingBrainABRVersion);
            return this;
        }

        public Builder streamingBrainABRVersion(Optional<? extends Double> streamingBrainABRVersion) {
            Utils.checkNotNull(streamingBrainABRVersion, "streamingBrainABRVersion");
            this.streamingBrainABRVersion = streamingBrainABRVersion;
            return this;
        }

        public Builder streamingBrainVersion(double streamingBrainVersion) {
            Utils.checkNotNull(streamingBrainVersion, "streamingBrainVersion");
            this.streamingBrainVersion = Optional.ofNullable(streamingBrainVersion);
            return this;
        }

        public Builder streamingBrainVersion(Optional<? extends Double> streamingBrainVersion) {
            Utils.checkNotNull(streamingBrainVersion, "streamingBrainVersion");
            this.streamingBrainVersion = streamingBrainVersion;
            return this;
        }

        public Builder sync(boolean sync) {
            Utils.checkNotNull(sync, "sync");
            this.sync = Optional.ofNullable(sync);
            return this;
        }

        public Builder sync(Optional<? extends Boolean> sync) {
            Utils.checkNotNull(sync, "sync");
            this.sync = sync;
            return this;
        }

        public Builder transcoderActiveVideoSessions(double transcoderActiveVideoSessions) {
            Utils.checkNotNull(transcoderActiveVideoSessions, "transcoderActiveVideoSessions");
            this.transcoderActiveVideoSessions = Optional.ofNullable(transcoderActiveVideoSessions);
            return this;
        }

        public Builder transcoderActiveVideoSessions(Optional<? extends Double> transcoderActiveVideoSessions) {
            Utils.checkNotNull(transcoderActiveVideoSessions, "transcoderActiveVideoSessions");
            this.transcoderActiveVideoSessions = transcoderActiveVideoSessions;
            return this;
        }

        public Builder transcoderAudio(boolean transcoderAudio) {
            Utils.checkNotNull(transcoderAudio, "transcoderAudio");
            this.transcoderAudio = Optional.ofNullable(transcoderAudio);
            return this;
        }

        public Builder transcoderAudio(Optional<? extends Boolean> transcoderAudio) {
            Utils.checkNotNull(transcoderAudio, "transcoderAudio");
            this.transcoderAudio = transcoderAudio;
            return this;
        }

        public Builder transcoderLyrics(boolean transcoderLyrics) {
            Utils.checkNotNull(transcoderLyrics, "transcoderLyrics");
            this.transcoderLyrics = Optional.ofNullable(transcoderLyrics);
            return this;
        }

        public Builder transcoderLyrics(Optional<? extends Boolean> transcoderLyrics) {
            Utils.checkNotNull(transcoderLyrics, "transcoderLyrics");
            this.transcoderLyrics = transcoderLyrics;
            return this;
        }

        public Builder transcoderPhoto(boolean transcoderPhoto) {
            Utils.checkNotNull(transcoderPhoto, "transcoderPhoto");
            this.transcoderPhoto = Optional.ofNullable(transcoderPhoto);
            return this;
        }

        public Builder transcoderPhoto(Optional<? extends Boolean> transcoderPhoto) {
            Utils.checkNotNull(transcoderPhoto, "transcoderPhoto");
            this.transcoderPhoto = transcoderPhoto;
            return this;
        }

        public Builder transcoderSubtitles(boolean transcoderSubtitles) {
            Utils.checkNotNull(transcoderSubtitles, "transcoderSubtitles");
            this.transcoderSubtitles = Optional.ofNullable(transcoderSubtitles);
            return this;
        }

        public Builder transcoderSubtitles(Optional<? extends Boolean> transcoderSubtitles) {
            Utils.checkNotNull(transcoderSubtitles, "transcoderSubtitles");
            this.transcoderSubtitles = transcoderSubtitles;
            return this;
        }

        public Builder transcoderVideo(boolean transcoderVideo) {
            Utils.checkNotNull(transcoderVideo, "transcoderVideo");
            this.transcoderVideo = Optional.ofNullable(transcoderVideo);
            return this;
        }

        public Builder transcoderVideo(Optional<? extends Boolean> transcoderVideo) {
            Utils.checkNotNull(transcoderVideo, "transcoderVideo");
            this.transcoderVideo = transcoderVideo;
            return this;
        }

        public Builder transcoderVideoBitrates(String transcoderVideoBitrates) {
            Utils.checkNotNull(transcoderVideoBitrates, "transcoderVideoBitrates");
            this.transcoderVideoBitrates = Optional.ofNullable(transcoderVideoBitrates);
            return this;
        }

        public Builder transcoderVideoBitrates(Optional<? extends String> transcoderVideoBitrates) {
            Utils.checkNotNull(transcoderVideoBitrates, "transcoderVideoBitrates");
            this.transcoderVideoBitrates = transcoderVideoBitrates;
            return this;
        }

        public Builder transcoderVideoQualities(String transcoderVideoQualities) {
            Utils.checkNotNull(transcoderVideoQualities, "transcoderVideoQualities");
            this.transcoderVideoQualities = Optional.ofNullable(transcoderVideoQualities);
            return this;
        }

        public Builder transcoderVideoQualities(Optional<? extends String> transcoderVideoQualities) {
            Utils.checkNotNull(transcoderVideoQualities, "transcoderVideoQualities");
            this.transcoderVideoQualities = transcoderVideoQualities;
            return this;
        }

        public Builder transcoderVideoResolutions(String transcoderVideoResolutions) {
            Utils.checkNotNull(transcoderVideoResolutions, "transcoderVideoResolutions");
            this.transcoderVideoResolutions = Optional.ofNullable(transcoderVideoResolutions);
            return this;
        }

        public Builder transcoderVideoResolutions(Optional<? extends String> transcoderVideoResolutions) {
            Utils.checkNotNull(transcoderVideoResolutions, "transcoderVideoResolutions");
            this.transcoderVideoResolutions = transcoderVideoResolutions;
            return this;
        }

        public Builder updatedAt(double updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Double> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updater(boolean updater) {
            Utils.checkNotNull(updater, "updater");
            this.updater = Optional.ofNullable(updater);
            return this;
        }

        public Builder updater(Optional<? extends Boolean> updater) {
            Utils.checkNotNull(updater, "updater");
            this.updater = updater;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        public Builder voiceSearch(boolean voiceSearch) {
            Utils.checkNotNull(voiceSearch, "voiceSearch");
            this.voiceSearch = Optional.ofNullable(voiceSearch);
            return this;
        }

        public Builder voiceSearch(Optional<? extends Boolean> voiceSearch) {
            Utils.checkNotNull(voiceSearch, "voiceSearch");
            this.voiceSearch = voiceSearch;
            return this;
        }

        public Builder directory(java.util.List<Directory> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = Optional.ofNullable(directory);
            return this;
        }

        public Builder directory(Optional<? extends java.util.List<Directory>> directory) {
            Utils.checkNotNull(directory, "directory");
            this.directory = directory;
            return this;
        }
        
        public MediaContainer build() {
            return new MediaContainer(
                size,
                allowCameraUpload,
                allowChannelAccess,
                allowMediaDeletion,
                allowSharing,
                allowSync,
                allowTuners,
                backgroundProcessing,
                certificate,
                companionProxy,
                countryCode,
                diagnostics,
                eventStream,
                friendlyName,
                hubSearch,
                itemClusters,
                livetv,
                machineIdentifier,
                mediaProviders,
                multiuser,
                musicAnalysis,
                myPlex,
                myPlexMappingState,
                myPlexSigninState,
                myPlexSubscription,
                myPlexUsername,
                offlineTranscode,
                ownerFeatures,
                photoAutoTag,
                platform,
                platformVersion,
                pluginHost,
                pushNotifications,
                readOnlyLibraries,
                streamingBrainABRVersion,
                streamingBrainVersion,
                sync,
                transcoderActiveVideoSessions,
                transcoderAudio,
                transcoderLyrics,
                transcoderPhoto,
                transcoderSubtitles,
                transcoderVideo,
                transcoderVideoBitrates,
                transcoderVideoQualities,
                transcoderVideoResolutions,
                updatedAt,
                updater,
                version,
                voiceSearch,
                directory);
        }
    }
}

