/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetSessionHistoryMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("historyKey")
    private Optional<? extends String> historyKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<? extends String> librarySectionID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<? extends String> parentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<? extends String> grandparentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<? extends String> grandparentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<? extends String> parentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<? extends String> grandparentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<? extends String> grandparentArt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<? extends Integer> parentIndex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<? extends LocalDate> originallyAvailableAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedAt")
    private Optional<? extends Integer> viewedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accountID")
    private Optional<? extends Integer> accountID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deviceID")
    private Optional<? extends Integer> deviceID;

    public GetSessionHistoryMetadata(
            @JsonProperty("historyKey") Optional<? extends String> historyKey,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("librarySectionID") Optional<? extends String> librarySectionID,
            @JsonProperty("parentKey") Optional<? extends String> parentKey,
            @JsonProperty("grandparentKey") Optional<? extends String> grandparentKey,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("grandparentTitle") Optional<? extends String> grandparentTitle,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("parentThumb") Optional<? extends String> parentThumb,
            @JsonProperty("grandparentThumb") Optional<? extends String> grandparentThumb,
            @JsonProperty("grandparentArt") Optional<? extends String> grandparentArt,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("parentIndex") Optional<? extends Integer> parentIndex,
            @JsonProperty("originallyAvailableAt") Optional<? extends LocalDate> originallyAvailableAt,
            @JsonProperty("viewedAt") Optional<? extends Integer> viewedAt,
            @JsonProperty("accountID") Optional<? extends Integer> accountID,
            @JsonProperty("deviceID") Optional<? extends Integer> deviceID) {
        Utils.checkNotNull(historyKey, "historyKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(viewedAt, "viewedAt");
        Utils.checkNotNull(accountID, "accountID");
        Utils.checkNotNull(deviceID, "deviceID");
        this.historyKey = historyKey;
        this.key = key;
        this.ratingKey = ratingKey;
        this.librarySectionID = librarySectionID;
        this.parentKey = parentKey;
        this.grandparentKey = grandparentKey;
        this.title = title;
        this.grandparentTitle = grandparentTitle;
        this.type = type;
        this.thumb = thumb;
        this.parentThumb = parentThumb;
        this.grandparentThumb = grandparentThumb;
        this.grandparentArt = grandparentArt;
        this.index = index;
        this.parentIndex = parentIndex;
        this.originallyAvailableAt = originallyAvailableAt;
        this.viewedAt = viewedAt;
        this.accountID = accountID;
        this.deviceID = deviceID;
    }

    public Optional<? extends String> historyKey() {
        return historyKey;
    }

    public Optional<? extends String> key() {
        return key;
    }

    public Optional<? extends String> ratingKey() {
        return ratingKey;
    }

    public Optional<? extends String> librarySectionID() {
        return librarySectionID;
    }

    public Optional<? extends String> parentKey() {
        return parentKey;
    }

    public Optional<? extends String> grandparentKey() {
        return grandparentKey;
    }

    public Optional<? extends String> title() {
        return title;
    }

    public Optional<? extends String> grandparentTitle() {
        return grandparentTitle;
    }

    public Optional<? extends String> type() {
        return type;
    }

    public Optional<? extends String> thumb() {
        return thumb;
    }

    public Optional<? extends String> parentThumb() {
        return parentThumb;
    }

    public Optional<? extends String> grandparentThumb() {
        return grandparentThumb;
    }

    public Optional<? extends String> grandparentArt() {
        return grandparentArt;
    }

    public Optional<? extends Integer> index() {
        return index;
    }

    public Optional<? extends Integer> parentIndex() {
        return parentIndex;
    }

    public Optional<? extends LocalDate> originallyAvailableAt() {
        return originallyAvailableAt;
    }

    public Optional<? extends Integer> viewedAt() {
        return viewedAt;
    }

    public Optional<? extends Integer> accountID() {
        return accountID;
    }

    public Optional<? extends Integer> deviceID() {
        return deviceID;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetSessionHistoryMetadata withHistoryKey(String historyKey) {
        Utils.checkNotNull(historyKey, "historyKey");
        this.historyKey = Optional.ofNullable(historyKey);
        return this;
    }

    public GetSessionHistoryMetadata withHistoryKey(Optional<? extends String> historyKey) {
        Utils.checkNotNull(historyKey, "historyKey");
        this.historyKey = historyKey;
        return this;
    }

    public GetSessionHistoryMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetSessionHistoryMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetSessionHistoryMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetSessionHistoryMetadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetSessionHistoryMetadata withLibrarySectionID(String librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }

    public GetSessionHistoryMetadata withLibrarySectionID(Optional<? extends String> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    public GetSessionHistoryMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    public GetSessionHistoryMetadata withParentKey(Optional<? extends String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentKey(Optional<? extends String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    public GetSessionHistoryMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetSessionHistoryMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentTitle(Optional<? extends String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    public GetSessionHistoryMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetSessionHistoryMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetSessionHistoryMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetSessionHistoryMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetSessionHistoryMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    public GetSessionHistoryMetadata withParentThumb(Optional<? extends String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentThumb(Optional<? extends String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }

    public GetSessionHistoryMetadata withGrandparentArt(Optional<? extends String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    public GetSessionHistoryMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetSessionHistoryMetadata withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetSessionHistoryMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    public GetSessionHistoryMetadata withParentIndex(Optional<? extends Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    public GetSessionHistoryMetadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }

    public GetSessionHistoryMetadata withOriginallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public GetSessionHistoryMetadata withViewedAt(int viewedAt) {
        Utils.checkNotNull(viewedAt, "viewedAt");
        this.viewedAt = Optional.ofNullable(viewedAt);
        return this;
    }

    public GetSessionHistoryMetadata withViewedAt(Optional<? extends Integer> viewedAt) {
        Utils.checkNotNull(viewedAt, "viewedAt");
        this.viewedAt = viewedAt;
        return this;
    }

    public GetSessionHistoryMetadata withAccountID(int accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = Optional.ofNullable(accountID);
        return this;
    }

    public GetSessionHistoryMetadata withAccountID(Optional<? extends Integer> accountID) {
        Utils.checkNotNull(accountID, "accountID");
        this.accountID = accountID;
        return this;
    }

    public GetSessionHistoryMetadata withDeviceID(int deviceID) {
        Utils.checkNotNull(deviceID, "deviceID");
        this.deviceID = Optional.ofNullable(deviceID);
        return this;
    }

    public GetSessionHistoryMetadata withDeviceID(Optional<? extends Integer> deviceID) {
        Utils.checkNotNull(deviceID, "deviceID");
        this.deviceID = deviceID;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSessionHistoryMetadata other = (GetSessionHistoryMetadata) o;
        return 
            java.util.Objects.deepEquals(this.historyKey, other.historyKey) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            java.util.Objects.deepEquals(this.parentKey, other.parentKey) &&
            java.util.Objects.deepEquals(this.grandparentKey, other.grandparentKey) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.grandparentTitle, other.grandparentTitle) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            java.util.Objects.deepEquals(this.grandparentThumb, other.grandparentThumb) &&
            java.util.Objects.deepEquals(this.grandparentArt, other.grandparentArt) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            java.util.Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            java.util.Objects.deepEquals(this.viewedAt, other.viewedAt) &&
            java.util.Objects.deepEquals(this.accountID, other.accountID) &&
            java.util.Objects.deepEquals(this.deviceID, other.deviceID);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            historyKey,
            key,
            ratingKey,
            librarySectionID,
            parentKey,
            grandparentKey,
            title,
            grandparentTitle,
            type,
            thumb,
            parentThumb,
            grandparentThumb,
            grandparentArt,
            index,
            parentIndex,
            originallyAvailableAt,
            viewedAt,
            accountID,
            deviceID);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSessionHistoryMetadata.class,
                "historyKey", historyKey,
                "key", key,
                "ratingKey", ratingKey,
                "librarySectionID", librarySectionID,
                "parentKey", parentKey,
                "grandparentKey", grandparentKey,
                "title", title,
                "grandparentTitle", grandparentTitle,
                "type", type,
                "thumb", thumb,
                "parentThumb", parentThumb,
                "grandparentThumb", grandparentThumb,
                "grandparentArt", grandparentArt,
                "index", index,
                "parentIndex", parentIndex,
                "originallyAvailableAt", originallyAvailableAt,
                "viewedAt", viewedAt,
                "accountID", accountID,
                "deviceID", deviceID);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> historyKey = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> librarySectionID = Optional.empty();
 
        private Optional<? extends String> parentKey = Optional.empty();
 
        private Optional<? extends String> grandparentKey = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> grandparentTitle = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> parentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentArt = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends Integer> parentIndex = Optional.empty();
 
        private Optional<? extends LocalDate> originallyAvailableAt = Optional.empty();
 
        private Optional<? extends Integer> viewedAt = Optional.empty();
 
        private Optional<? extends Integer> accountID = Optional.empty();
 
        private Optional<? extends Integer> deviceID = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder historyKey(String historyKey) {
            Utils.checkNotNull(historyKey, "historyKey");
            this.historyKey = Optional.ofNullable(historyKey);
            return this;
        }

        public Builder historyKey(Optional<? extends String> historyKey) {
            Utils.checkNotNull(historyKey, "historyKey");
            this.historyKey = historyKey;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder librarySectionID(String librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        public Builder librarySectionID(Optional<? extends String> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        public Builder parentKey(Optional<? extends String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        public Builder grandparentKey(Optional<? extends String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        public Builder grandparentTitle(Optional<? extends String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        public Builder parentThumb(Optional<? extends String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        public Builder grandparentThumb(Optional<? extends String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }

        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        public Builder grandparentArt(Optional<? extends String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        public Builder parentIndex(Optional<? extends Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        public Builder originallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        public Builder viewedAt(int viewedAt) {
            Utils.checkNotNull(viewedAt, "viewedAt");
            this.viewedAt = Optional.ofNullable(viewedAt);
            return this;
        }

        public Builder viewedAt(Optional<? extends Integer> viewedAt) {
            Utils.checkNotNull(viewedAt, "viewedAt");
            this.viewedAt = viewedAt;
            return this;
        }

        public Builder accountID(int accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = Optional.ofNullable(accountID);
            return this;
        }

        public Builder accountID(Optional<? extends Integer> accountID) {
            Utils.checkNotNull(accountID, "accountID");
            this.accountID = accountID;
            return this;
        }

        public Builder deviceID(int deviceID) {
            Utils.checkNotNull(deviceID, "deviceID");
            this.deviceID = Optional.ofNullable(deviceID);
            return this;
        }

        public Builder deviceID(Optional<? extends Integer> deviceID) {
            Utils.checkNotNull(deviceID, "deviceID");
            this.deviceID = deviceID;
            return this;
        }
        
        public GetSessionHistoryMetadata build() {
            return new GetSessionHistoryMetadata(
                historyKey,
                key,
                ratingKey,
                librarySectionID,
                parentKey,
                grandparentKey,
                title,
                grandparentTitle,
                type,
                thumb,
                parentThumb,
                grandparentThumb,
                grandparentArt,
                index,
                parentIndex,
                originallyAvailableAt,
                viewedAt,
                accountID,
                deviceID);
        }
    }
}

