/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetLibraryItemsMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("studio")
    private Optional<? extends String> studio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<? extends String> contentRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends String> summary;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    private Optional<? extends Double> rating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRating")
    private Optional<? extends Double> audienceRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<? extends Integer> year;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tagline")
    private Optional<? extends String> tagline;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Integer> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<? extends LocalDate> originallyAvailableAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Integer> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Integer> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audienceRatingImage")
    private Optional<? extends String> audienceRatingImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("chapterSource")
    private Optional<? extends String> chapterSource;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primaryExtraKey")
    private Optional<? extends String> primaryExtraKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingImage")
    private Optional<? extends String> ratingImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentRatingKey")
    private Optional<? extends String> grandparentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentGuid")
    private Optional<? extends String> grandparentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<? extends String> grandparentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<? extends String> grandparentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<? extends String> grandparentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<? extends String> grandparentArt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTheme")
    private Optional<? extends String> grandparentTheme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    private Optional<? extends java.util.List<GetLibraryItemsMedia>> media;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Genre")
    private Optional<? extends java.util.List<GetLibraryItemsGenre>> genre;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Country")
    private Optional<? extends java.util.List<GetLibraryItemsCountry>> country;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Director")
    private Optional<? extends java.util.List<GetLibraryItemsDirector>> director;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Writer")
    private Optional<? extends java.util.List<GetLibraryItemsWriter>> writer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Role")
    private Optional<? extends java.util.List<GetLibraryItemsRole>> role;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("titleSort")
    private Optional<? extends String> titleSort;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<? extends Integer> viewCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedAt")
    private Optional<? extends Integer> lastViewedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originalTitle")
    private Optional<? extends String> originalTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewOffset")
    private Optional<? extends Integer> viewOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipCount")
    private Optional<? extends Integer> skipCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("theme")
    private Optional<? extends String> theme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<? extends Integer> leafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedLeafCount")
    private Optional<? extends Integer> viewedLeafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("childCount")
    private Optional<? extends Integer> childCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasPremiumExtras")
    private Optional<? extends String> hasPremiumExtras;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hasPremiumPrimaryExtra")
    private Optional<? extends String> hasPremiumPrimaryExtra;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<? extends String> parentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<? extends String> parentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentStudio")
    private Optional<? extends String> parentStudio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<? extends String> parentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<? extends String> parentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<? extends Integer> parentIndex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentYear")
    private Optional<? extends Integer> parentYear;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<? extends String> parentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTheme")
    private Optional<? extends String> parentTheme;

    @JsonCreator
    public GetLibraryItemsMetadata(
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("studio") Optional<? extends String> studio,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("contentRating") Optional<? extends String> contentRating,
            @JsonProperty("summary") Optional<? extends String> summary,
            @JsonProperty("rating") Optional<? extends Double> rating,
            @JsonProperty("audienceRating") Optional<? extends Double> audienceRating,
            @JsonProperty("year") Optional<? extends Integer> year,
            @JsonProperty("tagline") Optional<? extends String> tagline,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("duration") Optional<? extends Integer> duration,
            @JsonProperty("originallyAvailableAt") Optional<? extends LocalDate> originallyAvailableAt,
            @JsonProperty("addedAt") Optional<? extends Integer> addedAt,
            @JsonProperty("updatedAt") Optional<? extends Integer> updatedAt,
            @JsonProperty("audienceRatingImage") Optional<? extends String> audienceRatingImage,
            @JsonProperty("chapterSource") Optional<? extends String> chapterSource,
            @JsonProperty("primaryExtraKey") Optional<? extends String> primaryExtraKey,
            @JsonProperty("ratingImage") Optional<? extends String> ratingImage,
            @JsonProperty("grandparentRatingKey") Optional<? extends String> grandparentRatingKey,
            @JsonProperty("grandparentGuid") Optional<? extends String> grandparentGuid,
            @JsonProperty("grandparentKey") Optional<? extends String> grandparentKey,
            @JsonProperty("grandparentTitle") Optional<? extends String> grandparentTitle,
            @JsonProperty("grandparentThumb") Optional<? extends String> grandparentThumb,
            @JsonProperty("grandparentArt") Optional<? extends String> grandparentArt,
            @JsonProperty("grandparentTheme") Optional<? extends String> grandparentTheme,
            @JsonProperty("Media") Optional<? extends java.util.List<GetLibraryItemsMedia>> media,
            @JsonProperty("Genre") Optional<? extends java.util.List<GetLibraryItemsGenre>> genre,
            @JsonProperty("Country") Optional<? extends java.util.List<GetLibraryItemsCountry>> country,
            @JsonProperty("Director") Optional<? extends java.util.List<GetLibraryItemsDirector>> director,
            @JsonProperty("Writer") Optional<? extends java.util.List<GetLibraryItemsWriter>> writer,
            @JsonProperty("Role") Optional<? extends java.util.List<GetLibraryItemsRole>> role,
            @JsonProperty("titleSort") Optional<? extends String> titleSort,
            @JsonProperty("viewCount") Optional<? extends Integer> viewCount,
            @JsonProperty("lastViewedAt") Optional<? extends Integer> lastViewedAt,
            @JsonProperty("originalTitle") Optional<? extends String> originalTitle,
            @JsonProperty("viewOffset") Optional<? extends Integer> viewOffset,
            @JsonProperty("skipCount") Optional<? extends Integer> skipCount,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("theme") Optional<? extends String> theme,
            @JsonProperty("leafCount") Optional<? extends Integer> leafCount,
            @JsonProperty("viewedLeafCount") Optional<? extends Integer> viewedLeafCount,
            @JsonProperty("childCount") Optional<? extends Integer> childCount,
            @JsonProperty("hasPremiumExtras") Optional<? extends String> hasPremiumExtras,
            @JsonProperty("hasPremiumPrimaryExtra") Optional<? extends String> hasPremiumPrimaryExtra,
            @JsonProperty("parentRatingKey") Optional<? extends String> parentRatingKey,
            @JsonProperty("parentGuid") Optional<? extends String> parentGuid,
            @JsonProperty("parentStudio") Optional<? extends String> parentStudio,
            @JsonProperty("parentKey") Optional<? extends String> parentKey,
            @JsonProperty("parentTitle") Optional<? extends String> parentTitle,
            @JsonProperty("parentIndex") Optional<? extends Integer> parentIndex,
            @JsonProperty("parentYear") Optional<? extends Integer> parentYear,
            @JsonProperty("parentThumb") Optional<? extends String> parentThumb,
            @JsonProperty("parentTheme") Optional<? extends String> parentTheme) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(studio, "studio");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(audienceRating, "audienceRating");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(tagline, "tagline");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        Utils.checkNotNull(chapterSource, "chapterSource");
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        Utils.checkNotNull(ratingImage, "ratingImage");
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(genre, "genre");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(director, "director");
        Utils.checkNotNull(writer, "writer");
        Utils.checkNotNull(role, "role");
        Utils.checkNotNull(titleSort, "titleSort");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        Utils.checkNotNull(originalTitle, "originalTitle");
        Utils.checkNotNull(viewOffset, "viewOffset");
        Utils.checkNotNull(skipCount, "skipCount");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(theme, "theme");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        Utils.checkNotNull(childCount, "childCount");
        Utils.checkNotNull(hasPremiumExtras, "hasPremiumExtras");
        Utils.checkNotNull(hasPremiumPrimaryExtra, "hasPremiumPrimaryExtra");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(parentStudio, "parentStudio");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(parentYear, "parentYear");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.ratingKey = ratingKey;
        this.key = key;
        this.guid = guid;
        this.studio = studio;
        this.type = type;
        this.title = title;
        this.contentRating = contentRating;
        this.summary = summary;
        this.rating = rating;
        this.audienceRating = audienceRating;
        this.year = year;
        this.tagline = tagline;
        this.thumb = thumb;
        this.art = art;
        this.duration = duration;
        this.originallyAvailableAt = originallyAvailableAt;
        this.addedAt = addedAt;
        this.updatedAt = updatedAt;
        this.audienceRatingImage = audienceRatingImage;
        this.chapterSource = chapterSource;
        this.primaryExtraKey = primaryExtraKey;
        this.ratingImage = ratingImage;
        this.grandparentRatingKey = grandparentRatingKey;
        this.grandparentGuid = grandparentGuid;
        this.grandparentKey = grandparentKey;
        this.grandparentTitle = grandparentTitle;
        this.grandparentThumb = grandparentThumb;
        this.grandparentArt = grandparentArt;
        this.grandparentTheme = grandparentTheme;
        this.media = media;
        this.genre = genre;
        this.country = country;
        this.director = director;
        this.writer = writer;
        this.role = role;
        this.titleSort = titleSort;
        this.viewCount = viewCount;
        this.lastViewedAt = lastViewedAt;
        this.originalTitle = originalTitle;
        this.viewOffset = viewOffset;
        this.skipCount = skipCount;
        this.index = index;
        this.theme = theme;
        this.leafCount = leafCount;
        this.viewedLeafCount = viewedLeafCount;
        this.childCount = childCount;
        this.hasPremiumExtras = hasPremiumExtras;
        this.hasPremiumPrimaryExtra = hasPremiumPrimaryExtra;
        this.parentRatingKey = parentRatingKey;
        this.parentGuid = parentGuid;
        this.parentStudio = parentStudio;
        this.parentKey = parentKey;
        this.parentTitle = parentTitle;
        this.parentIndex = parentIndex;
        this.parentYear = parentYear;
        this.parentThumb = parentThumb;
        this.parentTheme = parentTheme;
    }
    
    public GetLibraryItemsMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingKey() {
        return (Optional<String>) ratingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> guid() {
        return (Optional<String>) guid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> studio() {
        return (Optional<String>) studio;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> type() {
        return (Optional<String>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> contentRating() {
        return (Optional<String>) contentRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> summary() {
        return (Optional<String>) summary;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> rating() {
        return (Optional<Double>) rating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Double> audienceRating() {
        return (Optional<Double>) audienceRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> year() {
        return (Optional<Integer>) year;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> tagline() {
        return (Optional<String>) tagline;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> thumb() {
        return (Optional<String>) thumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> art() {
        return (Optional<String>) art;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> duration() {
        return (Optional<Integer>) duration;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LocalDate> originallyAvailableAt() {
        return (Optional<LocalDate>) originallyAvailableAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> addedAt() {
        return (Optional<Integer>) addedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> updatedAt() {
        return (Optional<Integer>) updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> audienceRatingImage() {
        return (Optional<String>) audienceRatingImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> chapterSource() {
        return (Optional<String>) chapterSource;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> primaryExtraKey() {
        return (Optional<String>) primaryExtraKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingImage() {
        return (Optional<String>) ratingImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentRatingKey() {
        return (Optional<String>) grandparentRatingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentGuid() {
        return (Optional<String>) grandparentGuid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentKey() {
        return (Optional<String>) grandparentKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentTitle() {
        return (Optional<String>) grandparentTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentThumb() {
        return (Optional<String>) grandparentThumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentArt() {
        return (Optional<String>) grandparentArt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> grandparentTheme() {
        return (Optional<String>) grandparentTheme;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsMedia>> media() {
        return (Optional<java.util.List<GetLibraryItemsMedia>>) media;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsGenre>> genre() {
        return (Optional<java.util.List<GetLibraryItemsGenre>>) genre;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsCountry>> country() {
        return (Optional<java.util.List<GetLibraryItemsCountry>>) country;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsDirector>> director() {
        return (Optional<java.util.List<GetLibraryItemsDirector>>) director;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsWriter>> writer() {
        return (Optional<java.util.List<GetLibraryItemsWriter>>) writer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<GetLibraryItemsRole>> role() {
        return (Optional<java.util.List<GetLibraryItemsRole>>) role;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> titleSort() {
        return (Optional<String>) titleSort;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> viewCount() {
        return (Optional<Integer>) viewCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> lastViewedAt() {
        return (Optional<Integer>) lastViewedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> originalTitle() {
        return (Optional<String>) originalTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> viewOffset() {
        return (Optional<Integer>) viewOffset;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> skipCount() {
        return (Optional<Integer>) skipCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> index() {
        return (Optional<Integer>) index;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> theme() {
        return (Optional<String>) theme;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> leafCount() {
        return (Optional<Integer>) leafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> viewedLeafCount() {
        return (Optional<Integer>) viewedLeafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> childCount() {
        return (Optional<Integer>) childCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> hasPremiumExtras() {
        return (Optional<String>) hasPremiumExtras;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> hasPremiumPrimaryExtra() {
        return (Optional<String>) hasPremiumPrimaryExtra;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentRatingKey() {
        return (Optional<String>) parentRatingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentGuid() {
        return (Optional<String>) parentGuid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentStudio() {
        return (Optional<String>) parentStudio;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentKey() {
        return (Optional<String>) parentKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentTitle() {
        return (Optional<String>) parentTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> parentIndex() {
        return (Optional<Integer>) parentIndex;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> parentYear() {
        return (Optional<Integer>) parentYear;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentThumb() {
        return (Optional<String>) parentThumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentTheme() {
        return (Optional<String>) parentTheme;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetLibraryItemsMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetLibraryItemsMetadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetLibraryItemsMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetLibraryItemsMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetLibraryItemsMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public GetLibraryItemsMetadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public GetLibraryItemsMetadata withStudio(String studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = Optional.ofNullable(studio);
        return this;
    }

    public GetLibraryItemsMetadata withStudio(Optional<? extends String> studio) {
        Utils.checkNotNull(studio, "studio");
        this.studio = studio;
        return this;
    }

    public GetLibraryItemsMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetLibraryItemsMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetLibraryItemsMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetLibraryItemsMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetLibraryItemsMetadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }

    public GetLibraryItemsMetadata withContentRating(Optional<? extends String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    public GetLibraryItemsMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public GetLibraryItemsMetadata withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public GetLibraryItemsMetadata withRating(double rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = Optional.ofNullable(rating);
        return this;
    }

    public GetLibraryItemsMetadata withRating(Optional<? extends Double> rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    public GetLibraryItemsMetadata withAudienceRating(double audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = Optional.ofNullable(audienceRating);
        return this;
    }

    public GetLibraryItemsMetadata withAudienceRating(Optional<? extends Double> audienceRating) {
        Utils.checkNotNull(audienceRating, "audienceRating");
        this.audienceRating = audienceRating;
        return this;
    }

    public GetLibraryItemsMetadata withYear(int year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    public GetLibraryItemsMetadata withYear(Optional<? extends Integer> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    public GetLibraryItemsMetadata withTagline(String tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = Optional.ofNullable(tagline);
        return this;
    }

    public GetLibraryItemsMetadata withTagline(Optional<? extends String> tagline) {
        Utils.checkNotNull(tagline, "tagline");
        this.tagline = tagline;
        return this;
    }

    public GetLibraryItemsMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetLibraryItemsMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetLibraryItemsMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetLibraryItemsMetadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetLibraryItemsMetadata withDuration(int duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetLibraryItemsMetadata withDuration(Optional<? extends Integer> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetLibraryItemsMetadata withOriginallyAvailableAt(LocalDate originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }

    public GetLibraryItemsMetadata withOriginallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public GetLibraryItemsMetadata withAddedAt(int addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public GetLibraryItemsMetadata withAddedAt(Optional<? extends Integer> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public GetLibraryItemsMetadata withUpdatedAt(int updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public GetLibraryItemsMetadata withUpdatedAt(Optional<? extends Integer> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public GetLibraryItemsMetadata withAudienceRatingImage(String audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
        return this;
    }

    public GetLibraryItemsMetadata withAudienceRatingImage(Optional<? extends String> audienceRatingImage) {
        Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
        this.audienceRatingImage = audienceRatingImage;
        return this;
    }

    public GetLibraryItemsMetadata withChapterSource(String chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = Optional.ofNullable(chapterSource);
        return this;
    }

    public GetLibraryItemsMetadata withChapterSource(Optional<? extends String> chapterSource) {
        Utils.checkNotNull(chapterSource, "chapterSource");
        this.chapterSource = chapterSource;
        return this;
    }

    public GetLibraryItemsMetadata withPrimaryExtraKey(String primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
        return this;
    }

    public GetLibraryItemsMetadata withPrimaryExtraKey(Optional<? extends String> primaryExtraKey) {
        Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
        this.primaryExtraKey = primaryExtraKey;
        return this;
    }

    public GetLibraryItemsMetadata withRatingImage(String ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = Optional.ofNullable(ratingImage);
        return this;
    }

    public GetLibraryItemsMetadata withRatingImage(Optional<? extends String> ratingImage) {
        Utils.checkNotNull(ratingImage, "ratingImage");
        this.ratingImage = ratingImage;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentRatingKey(String grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentRatingKey(Optional<? extends String> grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = grandparentRatingKey;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentGuid(String grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = Optional.ofNullable(grandparentGuid);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentGuid(Optional<? extends String> grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = grandparentGuid;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentKey(Optional<? extends String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentTitle(Optional<? extends String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentThumb(Optional<? extends String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentArt(Optional<? extends String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentTheme(String grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = Optional.ofNullable(grandparentTheme);
        return this;
    }

    public GetLibraryItemsMetadata withGrandparentTheme(Optional<? extends String> grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = grandparentTheme;
        return this;
    }

    public GetLibraryItemsMetadata withMedia(java.util.List<GetLibraryItemsMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }

    public GetLibraryItemsMetadata withMedia(Optional<? extends java.util.List<GetLibraryItemsMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public GetLibraryItemsMetadata withGenre(java.util.List<GetLibraryItemsGenre> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = Optional.ofNullable(genre);
        return this;
    }

    public GetLibraryItemsMetadata withGenre(Optional<? extends java.util.List<GetLibraryItemsGenre>> genre) {
        Utils.checkNotNull(genre, "genre");
        this.genre = genre;
        return this;
    }

    public GetLibraryItemsMetadata withCountry(java.util.List<GetLibraryItemsCountry> country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public GetLibraryItemsMetadata withCountry(Optional<? extends java.util.List<GetLibraryItemsCountry>> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    public GetLibraryItemsMetadata withDirector(java.util.List<GetLibraryItemsDirector> director) {
        Utils.checkNotNull(director, "director");
        this.director = Optional.ofNullable(director);
        return this;
    }

    public GetLibraryItemsMetadata withDirector(Optional<? extends java.util.List<GetLibraryItemsDirector>> director) {
        Utils.checkNotNull(director, "director");
        this.director = director;
        return this;
    }

    public GetLibraryItemsMetadata withWriter(java.util.List<GetLibraryItemsWriter> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = Optional.ofNullable(writer);
        return this;
    }

    public GetLibraryItemsMetadata withWriter(Optional<? extends java.util.List<GetLibraryItemsWriter>> writer) {
        Utils.checkNotNull(writer, "writer");
        this.writer = writer;
        return this;
    }

    public GetLibraryItemsMetadata withRole(java.util.List<GetLibraryItemsRole> role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public GetLibraryItemsMetadata withRole(Optional<? extends java.util.List<GetLibraryItemsRole>> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }

    public GetLibraryItemsMetadata withTitleSort(String titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = Optional.ofNullable(titleSort);
        return this;
    }

    public GetLibraryItemsMetadata withTitleSort(Optional<? extends String> titleSort) {
        Utils.checkNotNull(titleSort, "titleSort");
        this.titleSort = titleSort;
        return this;
    }

    public GetLibraryItemsMetadata withViewCount(int viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }

    public GetLibraryItemsMetadata withViewCount(Optional<? extends Integer> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    public GetLibraryItemsMetadata withLastViewedAt(int lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = Optional.ofNullable(lastViewedAt);
        return this;
    }

    public GetLibraryItemsMetadata withLastViewedAt(Optional<? extends Integer> lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = lastViewedAt;
        return this;
    }

    public GetLibraryItemsMetadata withOriginalTitle(String originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = Optional.ofNullable(originalTitle);
        return this;
    }

    public GetLibraryItemsMetadata withOriginalTitle(Optional<? extends String> originalTitle) {
        Utils.checkNotNull(originalTitle, "originalTitle");
        this.originalTitle = originalTitle;
        return this;
    }

    public GetLibraryItemsMetadata withViewOffset(int viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = Optional.ofNullable(viewOffset);
        return this;
    }

    public GetLibraryItemsMetadata withViewOffset(Optional<? extends Integer> viewOffset) {
        Utils.checkNotNull(viewOffset, "viewOffset");
        this.viewOffset = viewOffset;
        return this;
    }

    public GetLibraryItemsMetadata withSkipCount(int skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = Optional.ofNullable(skipCount);
        return this;
    }

    public GetLibraryItemsMetadata withSkipCount(Optional<? extends Integer> skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = skipCount;
        return this;
    }

    public GetLibraryItemsMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetLibraryItemsMetadata withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetLibraryItemsMetadata withTheme(String theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = Optional.ofNullable(theme);
        return this;
    }

    public GetLibraryItemsMetadata withTheme(Optional<? extends String> theme) {
        Utils.checkNotNull(theme, "theme");
        this.theme = theme;
        return this;
    }

    public GetLibraryItemsMetadata withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    public GetLibraryItemsMetadata withLeafCount(Optional<? extends Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    public GetLibraryItemsMetadata withViewedLeafCount(int viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
        return this;
    }

    public GetLibraryItemsMetadata withViewedLeafCount(Optional<? extends Integer> viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = viewedLeafCount;
        return this;
    }

    public GetLibraryItemsMetadata withChildCount(int childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = Optional.ofNullable(childCount);
        return this;
    }

    public GetLibraryItemsMetadata withChildCount(Optional<? extends Integer> childCount) {
        Utils.checkNotNull(childCount, "childCount");
        this.childCount = childCount;
        return this;
    }

    public GetLibraryItemsMetadata withHasPremiumExtras(String hasPremiumExtras) {
        Utils.checkNotNull(hasPremiumExtras, "hasPremiumExtras");
        this.hasPremiumExtras = Optional.ofNullable(hasPremiumExtras);
        return this;
    }

    public GetLibraryItemsMetadata withHasPremiumExtras(Optional<? extends String> hasPremiumExtras) {
        Utils.checkNotNull(hasPremiumExtras, "hasPremiumExtras");
        this.hasPremiumExtras = hasPremiumExtras;
        return this;
    }

    public GetLibraryItemsMetadata withHasPremiumPrimaryExtra(String hasPremiumPrimaryExtra) {
        Utils.checkNotNull(hasPremiumPrimaryExtra, "hasPremiumPrimaryExtra");
        this.hasPremiumPrimaryExtra = Optional.ofNullable(hasPremiumPrimaryExtra);
        return this;
    }

    public GetLibraryItemsMetadata withHasPremiumPrimaryExtra(Optional<? extends String> hasPremiumPrimaryExtra) {
        Utils.checkNotNull(hasPremiumPrimaryExtra, "hasPremiumPrimaryExtra");
        this.hasPremiumPrimaryExtra = hasPremiumPrimaryExtra;
        return this;
    }

    public GetLibraryItemsMetadata withParentRatingKey(String parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }

    public GetLibraryItemsMetadata withParentRatingKey(Optional<? extends String> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    public GetLibraryItemsMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }

    public GetLibraryItemsMetadata withParentGuid(Optional<? extends String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    public GetLibraryItemsMetadata withParentStudio(String parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = Optional.ofNullable(parentStudio);
        return this;
    }

    public GetLibraryItemsMetadata withParentStudio(Optional<? extends String> parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = parentStudio;
        return this;
    }

    public GetLibraryItemsMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    public GetLibraryItemsMetadata withParentKey(Optional<? extends String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    public GetLibraryItemsMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }

    public GetLibraryItemsMetadata withParentTitle(Optional<? extends String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    public GetLibraryItemsMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    public GetLibraryItemsMetadata withParentIndex(Optional<? extends Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    public GetLibraryItemsMetadata withParentYear(int parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = Optional.ofNullable(parentYear);
        return this;
    }

    public GetLibraryItemsMetadata withParentYear(Optional<? extends Integer> parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = parentYear;
        return this;
    }

    public GetLibraryItemsMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    public GetLibraryItemsMetadata withParentThumb(Optional<? extends String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    public GetLibraryItemsMetadata withParentTheme(String parentTheme) {
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.parentTheme = Optional.ofNullable(parentTheme);
        return this;
    }

    public GetLibraryItemsMetadata withParentTheme(Optional<? extends String> parentTheme) {
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.parentTheme = parentTheme;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLibraryItemsMetadata other = (GetLibraryItemsMetadata) o;
        return 
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.studio, other.studio) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.contentRating, other.contentRating) &&
            java.util.Objects.deepEquals(this.summary, other.summary) &&
            java.util.Objects.deepEquals(this.rating, other.rating) &&
            java.util.Objects.deepEquals(this.audienceRating, other.audienceRating) &&
            java.util.Objects.deepEquals(this.year, other.year) &&
            java.util.Objects.deepEquals(this.tagline, other.tagline) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.audienceRatingImage, other.audienceRatingImage) &&
            java.util.Objects.deepEquals(this.chapterSource, other.chapterSource) &&
            java.util.Objects.deepEquals(this.primaryExtraKey, other.primaryExtraKey) &&
            java.util.Objects.deepEquals(this.ratingImage, other.ratingImage) &&
            java.util.Objects.deepEquals(this.grandparentRatingKey, other.grandparentRatingKey) &&
            java.util.Objects.deepEquals(this.grandparentGuid, other.grandparentGuid) &&
            java.util.Objects.deepEquals(this.grandparentKey, other.grandparentKey) &&
            java.util.Objects.deepEquals(this.grandparentTitle, other.grandparentTitle) &&
            java.util.Objects.deepEquals(this.grandparentThumb, other.grandparentThumb) &&
            java.util.Objects.deepEquals(this.grandparentArt, other.grandparentArt) &&
            java.util.Objects.deepEquals(this.grandparentTheme, other.grandparentTheme) &&
            java.util.Objects.deepEquals(this.media, other.media) &&
            java.util.Objects.deepEquals(this.genre, other.genre) &&
            java.util.Objects.deepEquals(this.country, other.country) &&
            java.util.Objects.deepEquals(this.director, other.director) &&
            java.util.Objects.deepEquals(this.writer, other.writer) &&
            java.util.Objects.deepEquals(this.role, other.role) &&
            java.util.Objects.deepEquals(this.titleSort, other.titleSort) &&
            java.util.Objects.deepEquals(this.viewCount, other.viewCount) &&
            java.util.Objects.deepEquals(this.lastViewedAt, other.lastViewedAt) &&
            java.util.Objects.deepEquals(this.originalTitle, other.originalTitle) &&
            java.util.Objects.deepEquals(this.viewOffset, other.viewOffset) &&
            java.util.Objects.deepEquals(this.skipCount, other.skipCount) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.theme, other.theme) &&
            java.util.Objects.deepEquals(this.leafCount, other.leafCount) &&
            java.util.Objects.deepEquals(this.viewedLeafCount, other.viewedLeafCount) &&
            java.util.Objects.deepEquals(this.childCount, other.childCount) &&
            java.util.Objects.deepEquals(this.hasPremiumExtras, other.hasPremiumExtras) &&
            java.util.Objects.deepEquals(this.hasPremiumPrimaryExtra, other.hasPremiumPrimaryExtra) &&
            java.util.Objects.deepEquals(this.parentRatingKey, other.parentRatingKey) &&
            java.util.Objects.deepEquals(this.parentGuid, other.parentGuid) &&
            java.util.Objects.deepEquals(this.parentStudio, other.parentStudio) &&
            java.util.Objects.deepEquals(this.parentKey, other.parentKey) &&
            java.util.Objects.deepEquals(this.parentTitle, other.parentTitle) &&
            java.util.Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            java.util.Objects.deepEquals(this.parentYear, other.parentYear) &&
            java.util.Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            java.util.Objects.deepEquals(this.parentTheme, other.parentTheme);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ratingKey,
            key,
            guid,
            studio,
            type,
            title,
            contentRating,
            summary,
            rating,
            audienceRating,
            year,
            tagline,
            thumb,
            art,
            duration,
            originallyAvailableAt,
            addedAt,
            updatedAt,
            audienceRatingImage,
            chapterSource,
            primaryExtraKey,
            ratingImage,
            grandparentRatingKey,
            grandparentGuid,
            grandparentKey,
            grandparentTitle,
            grandparentThumb,
            grandparentArt,
            grandparentTheme,
            media,
            genre,
            country,
            director,
            writer,
            role,
            titleSort,
            viewCount,
            lastViewedAt,
            originalTitle,
            viewOffset,
            skipCount,
            index,
            theme,
            leafCount,
            viewedLeafCount,
            childCount,
            hasPremiumExtras,
            hasPremiumPrimaryExtra,
            parentRatingKey,
            parentGuid,
            parentStudio,
            parentKey,
            parentTitle,
            parentIndex,
            parentYear,
            parentThumb,
            parentTheme);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetLibraryItemsMetadata.class,
                "ratingKey", ratingKey,
                "key", key,
                "guid", guid,
                "studio", studio,
                "type", type,
                "title", title,
                "contentRating", contentRating,
                "summary", summary,
                "rating", rating,
                "audienceRating", audienceRating,
                "year", year,
                "tagline", tagline,
                "thumb", thumb,
                "art", art,
                "duration", duration,
                "originallyAvailableAt", originallyAvailableAt,
                "addedAt", addedAt,
                "updatedAt", updatedAt,
                "audienceRatingImage", audienceRatingImage,
                "chapterSource", chapterSource,
                "primaryExtraKey", primaryExtraKey,
                "ratingImage", ratingImage,
                "grandparentRatingKey", grandparentRatingKey,
                "grandparentGuid", grandparentGuid,
                "grandparentKey", grandparentKey,
                "grandparentTitle", grandparentTitle,
                "grandparentThumb", grandparentThumb,
                "grandparentArt", grandparentArt,
                "grandparentTheme", grandparentTheme,
                "media", media,
                "genre", genre,
                "country", country,
                "director", director,
                "writer", writer,
                "role", role,
                "titleSort", titleSort,
                "viewCount", viewCount,
                "lastViewedAt", lastViewedAt,
                "originalTitle", originalTitle,
                "viewOffset", viewOffset,
                "skipCount", skipCount,
                "index", index,
                "theme", theme,
                "leafCount", leafCount,
                "viewedLeafCount", viewedLeafCount,
                "childCount", childCount,
                "hasPremiumExtras", hasPremiumExtras,
                "hasPremiumPrimaryExtra", hasPremiumPrimaryExtra,
                "parentRatingKey", parentRatingKey,
                "parentGuid", parentGuid,
                "parentStudio", parentStudio,
                "parentKey", parentKey,
                "parentTitle", parentTitle,
                "parentIndex", parentIndex,
                "parentYear", parentYear,
                "parentThumb", parentThumb,
                "parentTheme", parentTheme);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends String> studio = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> contentRating = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();
 
        private Optional<? extends Double> rating = Optional.empty();
 
        private Optional<? extends Double> audienceRating = Optional.empty();
 
        private Optional<? extends Integer> year = Optional.empty();
 
        private Optional<? extends String> tagline = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends Integer> duration = Optional.empty();
 
        private Optional<? extends LocalDate> originallyAvailableAt = Optional.empty();
 
        private Optional<? extends Integer> addedAt = Optional.empty();
 
        private Optional<? extends Integer> updatedAt = Optional.empty();
 
        private Optional<? extends String> audienceRatingImage = Optional.empty();
 
        private Optional<? extends String> chapterSource = Optional.empty();
 
        private Optional<? extends String> primaryExtraKey = Optional.empty();
 
        private Optional<? extends String> ratingImage = Optional.empty();
 
        private Optional<? extends String> grandparentRatingKey = Optional.empty();
 
        private Optional<? extends String> grandparentGuid = Optional.empty();
 
        private Optional<? extends String> grandparentKey = Optional.empty();
 
        private Optional<? extends String> grandparentTitle = Optional.empty();
 
        private Optional<? extends String> grandparentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentArt = Optional.empty();
 
        private Optional<? extends String> grandparentTheme = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsMedia>> media = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsGenre>> genre = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsCountry>> country = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsDirector>> director = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsWriter>> writer = Optional.empty();
 
        private Optional<? extends java.util.List<GetLibraryItemsRole>> role = Optional.empty();
 
        private Optional<? extends String> titleSort = Optional.empty();
 
        private Optional<? extends Integer> viewCount = Optional.empty();
 
        private Optional<? extends Integer> lastViewedAt = Optional.empty();
 
        private Optional<? extends String> originalTitle = Optional.empty();
 
        private Optional<? extends Integer> viewOffset = Optional.empty();
 
        private Optional<? extends Integer> skipCount = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends String> theme = Optional.empty();
 
        private Optional<? extends Integer> leafCount = Optional.empty();
 
        private Optional<? extends Integer> viewedLeafCount = Optional.empty();
 
        private Optional<? extends Integer> childCount = Optional.empty();
 
        private Optional<? extends String> hasPremiumExtras = Optional.empty();
 
        private Optional<? extends String> hasPremiumPrimaryExtra = Optional.empty();
 
        private Optional<? extends String> parentRatingKey = Optional.empty();
 
        private Optional<? extends String> parentGuid = Optional.empty();
 
        private Optional<? extends String> parentStudio = Optional.empty();
 
        private Optional<? extends String> parentKey = Optional.empty();
 
        private Optional<? extends String> parentTitle = Optional.empty();
 
        private Optional<? extends Integer> parentIndex = Optional.empty();
 
        private Optional<? extends Integer> parentYear = Optional.empty();
 
        private Optional<? extends String> parentThumb = Optional.empty();
 
        private Optional<? extends String> parentTheme = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder studio(String studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = Optional.ofNullable(studio);
            return this;
        }

        public Builder studio(Optional<? extends String> studio) {
            Utils.checkNotNull(studio, "studio");
            this.studio = studio;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        public Builder contentRating(Optional<? extends String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }

        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        public Builder rating(double rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        public Builder rating(Optional<? extends Double> rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        public Builder audienceRating(double audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = Optional.ofNullable(audienceRating);
            return this;
        }

        public Builder audienceRating(Optional<? extends Double> audienceRating) {
            Utils.checkNotNull(audienceRating, "audienceRating");
            this.audienceRating = audienceRating;
            return this;
        }

        public Builder year(int year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        public Builder year(Optional<? extends Integer> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        public Builder tagline(String tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = Optional.ofNullable(tagline);
            return this;
        }

        public Builder tagline(Optional<? extends String> tagline) {
            Utils.checkNotNull(tagline, "tagline");
            this.tagline = tagline;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder duration(int duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Integer> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder originallyAvailableAt(LocalDate originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        public Builder originallyAvailableAt(Optional<? extends LocalDate> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        public Builder addedAt(int addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Integer> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder updatedAt(int updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Integer> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder audienceRatingImage(String audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = Optional.ofNullable(audienceRatingImage);
            return this;
        }

        public Builder audienceRatingImage(Optional<? extends String> audienceRatingImage) {
            Utils.checkNotNull(audienceRatingImage, "audienceRatingImage");
            this.audienceRatingImage = audienceRatingImage;
            return this;
        }

        public Builder chapterSource(String chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = Optional.ofNullable(chapterSource);
            return this;
        }

        public Builder chapterSource(Optional<? extends String> chapterSource) {
            Utils.checkNotNull(chapterSource, "chapterSource");
            this.chapterSource = chapterSource;
            return this;
        }

        public Builder primaryExtraKey(String primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = Optional.ofNullable(primaryExtraKey);
            return this;
        }

        public Builder primaryExtraKey(Optional<? extends String> primaryExtraKey) {
            Utils.checkNotNull(primaryExtraKey, "primaryExtraKey");
            this.primaryExtraKey = primaryExtraKey;
            return this;
        }

        public Builder ratingImage(String ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = Optional.ofNullable(ratingImage);
            return this;
        }

        public Builder ratingImage(Optional<? extends String> ratingImage) {
            Utils.checkNotNull(ratingImage, "ratingImage");
            this.ratingImage = ratingImage;
            return this;
        }

        public Builder grandparentRatingKey(String grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
            return this;
        }

        public Builder grandparentRatingKey(Optional<? extends String> grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = grandparentRatingKey;
            return this;
        }

        public Builder grandparentGuid(String grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = Optional.ofNullable(grandparentGuid);
            return this;
        }

        public Builder grandparentGuid(Optional<? extends String> grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = grandparentGuid;
            return this;
        }

        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        public Builder grandparentKey(Optional<? extends String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }

        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        public Builder grandparentTitle(Optional<? extends String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }

        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        public Builder grandparentThumb(Optional<? extends String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }

        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        public Builder grandparentArt(Optional<? extends String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }

        public Builder grandparentTheme(String grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = Optional.ofNullable(grandparentTheme);
            return this;
        }

        public Builder grandparentTheme(Optional<? extends String> grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = grandparentTheme;
            return this;
        }

        public Builder media(java.util.List<GetLibraryItemsMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends java.util.List<GetLibraryItemsMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }

        public Builder genre(java.util.List<GetLibraryItemsGenre> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = Optional.ofNullable(genre);
            return this;
        }

        public Builder genre(Optional<? extends java.util.List<GetLibraryItemsGenre>> genre) {
            Utils.checkNotNull(genre, "genre");
            this.genre = genre;
            return this;
        }

        public Builder country(java.util.List<GetLibraryItemsCountry> country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<? extends java.util.List<GetLibraryItemsCountry>> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        public Builder director(java.util.List<GetLibraryItemsDirector> director) {
            Utils.checkNotNull(director, "director");
            this.director = Optional.ofNullable(director);
            return this;
        }

        public Builder director(Optional<? extends java.util.List<GetLibraryItemsDirector>> director) {
            Utils.checkNotNull(director, "director");
            this.director = director;
            return this;
        }

        public Builder writer(java.util.List<GetLibraryItemsWriter> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = Optional.ofNullable(writer);
            return this;
        }

        public Builder writer(Optional<? extends java.util.List<GetLibraryItemsWriter>> writer) {
            Utils.checkNotNull(writer, "writer");
            this.writer = writer;
            return this;
        }

        public Builder role(java.util.List<GetLibraryItemsRole> role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<? extends java.util.List<GetLibraryItemsRole>> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }

        public Builder titleSort(String titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = Optional.ofNullable(titleSort);
            return this;
        }

        public Builder titleSort(Optional<? extends String> titleSort) {
            Utils.checkNotNull(titleSort, "titleSort");
            this.titleSort = titleSort;
            return this;
        }

        public Builder viewCount(int viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        public Builder viewCount(Optional<? extends Integer> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        public Builder lastViewedAt(int lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = Optional.ofNullable(lastViewedAt);
            return this;
        }

        public Builder lastViewedAt(Optional<? extends Integer> lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = lastViewedAt;
            return this;
        }

        public Builder originalTitle(String originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = Optional.ofNullable(originalTitle);
            return this;
        }

        public Builder originalTitle(Optional<? extends String> originalTitle) {
            Utils.checkNotNull(originalTitle, "originalTitle");
            this.originalTitle = originalTitle;
            return this;
        }

        public Builder viewOffset(int viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = Optional.ofNullable(viewOffset);
            return this;
        }

        public Builder viewOffset(Optional<? extends Integer> viewOffset) {
            Utils.checkNotNull(viewOffset, "viewOffset");
            this.viewOffset = viewOffset;
            return this;
        }

        public Builder skipCount(int skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = Optional.ofNullable(skipCount);
            return this;
        }

        public Builder skipCount(Optional<? extends Integer> skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = skipCount;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder theme(String theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = Optional.ofNullable(theme);
            return this;
        }

        public Builder theme(Optional<? extends String> theme) {
            Utils.checkNotNull(theme, "theme");
            this.theme = theme;
            return this;
        }

        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        public Builder leafCount(Optional<? extends Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        public Builder viewedLeafCount(int viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
            return this;
        }

        public Builder viewedLeafCount(Optional<? extends Integer> viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = viewedLeafCount;
            return this;
        }

        public Builder childCount(int childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = Optional.ofNullable(childCount);
            return this;
        }

        public Builder childCount(Optional<? extends Integer> childCount) {
            Utils.checkNotNull(childCount, "childCount");
            this.childCount = childCount;
            return this;
        }

        public Builder hasPremiumExtras(String hasPremiumExtras) {
            Utils.checkNotNull(hasPremiumExtras, "hasPremiumExtras");
            this.hasPremiumExtras = Optional.ofNullable(hasPremiumExtras);
            return this;
        }

        public Builder hasPremiumExtras(Optional<? extends String> hasPremiumExtras) {
            Utils.checkNotNull(hasPremiumExtras, "hasPremiumExtras");
            this.hasPremiumExtras = hasPremiumExtras;
            return this;
        }

        public Builder hasPremiumPrimaryExtra(String hasPremiumPrimaryExtra) {
            Utils.checkNotNull(hasPremiumPrimaryExtra, "hasPremiumPrimaryExtra");
            this.hasPremiumPrimaryExtra = Optional.ofNullable(hasPremiumPrimaryExtra);
            return this;
        }

        public Builder hasPremiumPrimaryExtra(Optional<? extends String> hasPremiumPrimaryExtra) {
            Utils.checkNotNull(hasPremiumPrimaryExtra, "hasPremiumPrimaryExtra");
            this.hasPremiumPrimaryExtra = hasPremiumPrimaryExtra;
            return this;
        }

        public Builder parentRatingKey(String parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        public Builder parentRatingKey(Optional<? extends String> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }

        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        public Builder parentGuid(Optional<? extends String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }

        public Builder parentStudio(String parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = Optional.ofNullable(parentStudio);
            return this;
        }

        public Builder parentStudio(Optional<? extends String> parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = parentStudio;
            return this;
        }

        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        public Builder parentKey(Optional<? extends String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        public Builder parentTitle(Optional<? extends String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }

        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        public Builder parentIndex(Optional<? extends Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        public Builder parentYear(int parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = Optional.ofNullable(parentYear);
            return this;
        }

        public Builder parentYear(Optional<? extends Integer> parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = parentYear;
            return this;
        }

        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        public Builder parentThumb(Optional<? extends String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        public Builder parentTheme(String parentTheme) {
            Utils.checkNotNull(parentTheme, "parentTheme");
            this.parentTheme = Optional.ofNullable(parentTheme);
            return this;
        }

        public Builder parentTheme(Optional<? extends String> parentTheme) {
            Utils.checkNotNull(parentTheme, "parentTheme");
            this.parentTheme = parentTheme;
            return this;
        }
        
        public GetLibraryItemsMetadata build() {
            return new GetLibraryItemsMetadata(
                ratingKey,
                key,
                guid,
                studio,
                type,
                title,
                contentRating,
                summary,
                rating,
                audienceRating,
                year,
                tagline,
                thumb,
                art,
                duration,
                originallyAvailableAt,
                addedAt,
                updatedAt,
                audienceRatingImage,
                chapterSource,
                primaryExtraKey,
                ratingImage,
                grandparentRatingKey,
                grandparentGuid,
                grandparentKey,
                grandparentTitle,
                grandparentThumb,
                grandparentArt,
                grandparentTheme,
                media,
                genre,
                country,
                director,
                writer,
                role,
                titleSort,
                viewCount,
                lastViewedAt,
                originalTitle,
                viewOffset,
                skipCount,
                index,
                theme,
                leafCount,
                viewedLeafCount,
                childCount,
                hasPremiumExtras,
                hasPremiumPrimaryExtra,
                parentRatingKey,
                parentGuid,
                parentStudio,
                parentKey,
                parentTitle,
                parentIndex,
                parentYear,
                parentThumb,
                parentTheme);
        }
    }
}

