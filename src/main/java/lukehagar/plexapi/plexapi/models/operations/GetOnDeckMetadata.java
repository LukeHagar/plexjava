/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.OffsetDateTime;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetOnDeckMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowSync")
    private Optional<? extends Boolean> allowSync;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionID")
    private Optional<? extends Double> librarySectionID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionTitle")
    private Optional<? extends String> librarySectionTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionUUID")
    private Optional<? extends String> librarySectionUUID;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends Double> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<? extends Double> parentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentRatingKey")
    private Optional<? extends Double> grandparentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<? extends String> parentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentGuid")
    private Optional<? extends String> grandparentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentKey")
    private Optional<? extends String> grandparentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<? extends String> parentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("librarySectionKey")
    private Optional<? extends String> librarySectionKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTitle")
    private Optional<? extends String> grandparentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<? extends String> parentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contentRating")
    private Optional<? extends String> contentRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends String> summary;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Double> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<? extends Double> parentIndex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedAt")
    private Optional<? extends Double> lastViewedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<? extends Double> year;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<? extends String> parentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentThumb")
    private Optional<? extends String> grandparentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentArt")
    private Optional<? extends String> grandparentArt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grandparentTheme")
    private Optional<? extends String> grandparentTheme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Double> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("originallyAvailableAt")
    private Optional<? extends OffsetDateTime> originallyAvailableAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Double> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Double> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Media")
    private Optional<? extends java.util.List<GetOnDeckMedia>> media;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Guid")
    private Optional<? extends java.util.List<GetOnDeckGuids>> guids;

    public GetOnDeckMetadata(
            @JsonProperty("allowSync") Optional<? extends Boolean> allowSync,
            @JsonProperty("librarySectionID") Optional<? extends Double> librarySectionID,
            @JsonProperty("librarySectionTitle") Optional<? extends String> librarySectionTitle,
            @JsonProperty("librarySectionUUID") Optional<? extends String> librarySectionUUID,
            @JsonProperty("ratingKey") Optional<? extends Double> ratingKey,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("parentRatingKey") Optional<? extends Double> parentRatingKey,
            @JsonProperty("grandparentRatingKey") Optional<? extends Double> grandparentRatingKey,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("parentGuid") Optional<? extends String> parentGuid,
            @JsonProperty("grandparentGuid") Optional<? extends String> grandparentGuid,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("grandparentKey") Optional<? extends String> grandparentKey,
            @JsonProperty("parentKey") Optional<? extends String> parentKey,
            @JsonProperty("librarySectionKey") Optional<? extends String> librarySectionKey,
            @JsonProperty("grandparentTitle") Optional<? extends String> grandparentTitle,
            @JsonProperty("parentTitle") Optional<? extends String> parentTitle,
            @JsonProperty("contentRating") Optional<? extends String> contentRating,
            @JsonProperty("summary") Optional<? extends String> summary,
            @JsonProperty("index") Optional<? extends Double> index,
            @JsonProperty("parentIndex") Optional<? extends Double> parentIndex,
            @JsonProperty("lastViewedAt") Optional<? extends Double> lastViewedAt,
            @JsonProperty("year") Optional<? extends Double> year,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("parentThumb") Optional<? extends String> parentThumb,
            @JsonProperty("grandparentThumb") Optional<? extends String> grandparentThumb,
            @JsonProperty("grandparentArt") Optional<? extends String> grandparentArt,
            @JsonProperty("grandparentTheme") Optional<? extends String> grandparentTheme,
            @JsonProperty("duration") Optional<? extends Double> duration,
            @JsonProperty("originallyAvailableAt") Optional<? extends OffsetDateTime> originallyAvailableAt,
            @JsonProperty("addedAt") Optional<? extends Double> addedAt,
            @JsonProperty("updatedAt") Optional<? extends Double> updatedAt,
            @JsonProperty("Media") Optional<? extends java.util.List<GetOnDeckMedia>> media,
            @JsonProperty("guids") Optional<? extends java.util.List<GetOnDeckGuids>> guids) {
        Utils.checkNotNull(allowSync, "allowSync");
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(contentRating, "contentRating");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(guids, "guids");
        this.allowSync = allowSync;
        this.librarySectionID = librarySectionID;
        this.librarySectionTitle = librarySectionTitle;
        this.librarySectionUUID = librarySectionUUID;
        this.ratingKey = ratingKey;
        this.key = key;
        this.parentRatingKey = parentRatingKey;
        this.grandparentRatingKey = grandparentRatingKey;
        this.guid = guid;
        this.parentGuid = parentGuid;
        this.grandparentGuid = grandparentGuid;
        this.type = type;
        this.title = title;
        this.grandparentKey = grandparentKey;
        this.parentKey = parentKey;
        this.librarySectionKey = librarySectionKey;
        this.grandparentTitle = grandparentTitle;
        this.parentTitle = parentTitle;
        this.contentRating = contentRating;
        this.summary = summary;
        this.index = index;
        this.parentIndex = parentIndex;
        this.lastViewedAt = lastViewedAt;
        this.year = year;
        this.thumb = thumb;
        this.art = art;
        this.parentThumb = parentThumb;
        this.grandparentThumb = grandparentThumb;
        this.grandparentArt = grandparentArt;
        this.grandparentTheme = grandparentTheme;
        this.duration = duration;
        this.originallyAvailableAt = originallyAvailableAt;
        this.addedAt = addedAt;
        this.updatedAt = updatedAt;
        this.media = media;
        this.guids = guids;
    }

    public Optional<? extends Boolean> allowSync() {
        return allowSync;
    }

    public Optional<? extends Double> librarySectionID() {
        return librarySectionID;
    }

    public Optional<? extends String> librarySectionTitle() {
        return librarySectionTitle;
    }

    public Optional<? extends String> librarySectionUUID() {
        return librarySectionUUID;
    }

    public Optional<? extends Double> ratingKey() {
        return ratingKey;
    }

    public Optional<? extends String> key() {
        return key;
    }

    public Optional<? extends Double> parentRatingKey() {
        return parentRatingKey;
    }

    public Optional<? extends Double> grandparentRatingKey() {
        return grandparentRatingKey;
    }

    public Optional<? extends String> guid() {
        return guid;
    }

    public Optional<? extends String> parentGuid() {
        return parentGuid;
    }

    public Optional<? extends String> grandparentGuid() {
        return grandparentGuid;
    }

    public Optional<? extends String> type() {
        return type;
    }

    public Optional<? extends String> title() {
        return title;
    }

    public Optional<? extends String> grandparentKey() {
        return grandparentKey;
    }

    public Optional<? extends String> parentKey() {
        return parentKey;
    }

    public Optional<? extends String> librarySectionKey() {
        return librarySectionKey;
    }

    public Optional<? extends String> grandparentTitle() {
        return grandparentTitle;
    }

    public Optional<? extends String> parentTitle() {
        return parentTitle;
    }

    public Optional<? extends String> contentRating() {
        return contentRating;
    }

    public Optional<? extends String> summary() {
        return summary;
    }

    public Optional<? extends Double> index() {
        return index;
    }

    public Optional<? extends Double> parentIndex() {
        return parentIndex;
    }

    public Optional<? extends Double> lastViewedAt() {
        return lastViewedAt;
    }

    public Optional<? extends Double> year() {
        return year;
    }

    public Optional<? extends String> thumb() {
        return thumb;
    }

    public Optional<? extends String> art() {
        return art;
    }

    public Optional<? extends String> parentThumb() {
        return parentThumb;
    }

    public Optional<? extends String> grandparentThumb() {
        return grandparentThumb;
    }

    public Optional<? extends String> grandparentArt() {
        return grandparentArt;
    }

    public Optional<? extends String> grandparentTheme() {
        return grandparentTheme;
    }

    public Optional<? extends Double> duration() {
        return duration;
    }

    public Optional<? extends OffsetDateTime> originallyAvailableAt() {
        return originallyAvailableAt;
    }

    public Optional<? extends Double> addedAt() {
        return addedAt;
    }

    public Optional<? extends Double> updatedAt() {
        return updatedAt;
    }

    public Optional<? extends java.util.List<GetOnDeckMedia>> media() {
        return media;
    }

    public Optional<? extends java.util.List<GetOnDeckGuids>> guids() {
        return guids;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetOnDeckMetadata withAllowSync(boolean allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = Optional.ofNullable(allowSync);
        return this;
    }

    public GetOnDeckMetadata withAllowSync(Optional<? extends Boolean> allowSync) {
        Utils.checkNotNull(allowSync, "allowSync");
        this.allowSync = allowSync;
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionID(double librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = Optional.ofNullable(librarySectionID);
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionID(Optional<? extends Double> librarySectionID) {
        Utils.checkNotNull(librarySectionID, "librarySectionID");
        this.librarySectionID = librarySectionID;
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionTitle(String librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionTitle(Optional<? extends String> librarySectionTitle) {
        Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
        this.librarySectionTitle = librarySectionTitle;
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionUUID(String librarySectionUUID) {
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        this.librarySectionUUID = Optional.ofNullable(librarySectionUUID);
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionUUID(Optional<? extends String> librarySectionUUID) {
        Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
        this.librarySectionUUID = librarySectionUUID;
        return this;
    }

    public GetOnDeckMetadata withRatingKey(double ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetOnDeckMetadata withRatingKey(Optional<? extends Double> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetOnDeckMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetOnDeckMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetOnDeckMetadata withParentRatingKey(double parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }

    public GetOnDeckMetadata withParentRatingKey(Optional<? extends Double> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    public GetOnDeckMetadata withGrandparentRatingKey(double grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
        return this;
    }

    public GetOnDeckMetadata withGrandparentRatingKey(Optional<? extends Double> grandparentRatingKey) {
        Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
        this.grandparentRatingKey = grandparentRatingKey;
        return this;
    }

    public GetOnDeckMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public GetOnDeckMetadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public GetOnDeckMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }

    public GetOnDeckMetadata withParentGuid(Optional<? extends String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    public GetOnDeckMetadata withGrandparentGuid(String grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = Optional.ofNullable(grandparentGuid);
        return this;
    }

    public GetOnDeckMetadata withGrandparentGuid(Optional<? extends String> grandparentGuid) {
        Utils.checkNotNull(grandparentGuid, "grandparentGuid");
        this.grandparentGuid = grandparentGuid;
        return this;
    }

    public GetOnDeckMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetOnDeckMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetOnDeckMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetOnDeckMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetOnDeckMetadata withGrandparentKey(String grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = Optional.ofNullable(grandparentKey);
        return this;
    }

    public GetOnDeckMetadata withGrandparentKey(Optional<? extends String> grandparentKey) {
        Utils.checkNotNull(grandparentKey, "grandparentKey");
        this.grandparentKey = grandparentKey;
        return this;
    }

    public GetOnDeckMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    public GetOnDeckMetadata withParentKey(Optional<? extends String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionKey(String librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = Optional.ofNullable(librarySectionKey);
        return this;
    }

    public GetOnDeckMetadata withLibrarySectionKey(Optional<? extends String> librarySectionKey) {
        Utils.checkNotNull(librarySectionKey, "librarySectionKey");
        this.librarySectionKey = librarySectionKey;
        return this;
    }

    public GetOnDeckMetadata withGrandparentTitle(String grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = Optional.ofNullable(grandparentTitle);
        return this;
    }

    public GetOnDeckMetadata withGrandparentTitle(Optional<? extends String> grandparentTitle) {
        Utils.checkNotNull(grandparentTitle, "grandparentTitle");
        this.grandparentTitle = grandparentTitle;
        return this;
    }

    public GetOnDeckMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }

    public GetOnDeckMetadata withParentTitle(Optional<? extends String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    public GetOnDeckMetadata withContentRating(String contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = Optional.ofNullable(contentRating);
        return this;
    }

    public GetOnDeckMetadata withContentRating(Optional<? extends String> contentRating) {
        Utils.checkNotNull(contentRating, "contentRating");
        this.contentRating = contentRating;
        return this;
    }

    public GetOnDeckMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public GetOnDeckMetadata withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public GetOnDeckMetadata withIndex(double index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetOnDeckMetadata withIndex(Optional<? extends Double> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetOnDeckMetadata withParentIndex(double parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    public GetOnDeckMetadata withParentIndex(Optional<? extends Double> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    public GetOnDeckMetadata withLastViewedAt(double lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = Optional.ofNullable(lastViewedAt);
        return this;
    }

    public GetOnDeckMetadata withLastViewedAt(Optional<? extends Double> lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = lastViewedAt;
        return this;
    }

    public GetOnDeckMetadata withYear(double year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    public GetOnDeckMetadata withYear(Optional<? extends Double> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    public GetOnDeckMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetOnDeckMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetOnDeckMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetOnDeckMetadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetOnDeckMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    public GetOnDeckMetadata withParentThumb(Optional<? extends String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    public GetOnDeckMetadata withGrandparentThumb(String grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = Optional.ofNullable(grandparentThumb);
        return this;
    }

    public GetOnDeckMetadata withGrandparentThumb(Optional<? extends String> grandparentThumb) {
        Utils.checkNotNull(grandparentThumb, "grandparentThumb");
        this.grandparentThumb = grandparentThumb;
        return this;
    }

    public GetOnDeckMetadata withGrandparentArt(String grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = Optional.ofNullable(grandparentArt);
        return this;
    }

    public GetOnDeckMetadata withGrandparentArt(Optional<? extends String> grandparentArt) {
        Utils.checkNotNull(grandparentArt, "grandparentArt");
        this.grandparentArt = grandparentArt;
        return this;
    }

    public GetOnDeckMetadata withGrandparentTheme(String grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = Optional.ofNullable(grandparentTheme);
        return this;
    }

    public GetOnDeckMetadata withGrandparentTheme(Optional<? extends String> grandparentTheme) {
        Utils.checkNotNull(grandparentTheme, "grandparentTheme");
        this.grandparentTheme = grandparentTheme;
        return this;
    }

    public GetOnDeckMetadata withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetOnDeckMetadata withDuration(Optional<? extends Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetOnDeckMetadata withOriginallyAvailableAt(OffsetDateTime originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
        return this;
    }

    public GetOnDeckMetadata withOriginallyAvailableAt(Optional<? extends OffsetDateTime> originallyAvailableAt) {
        Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
        this.originallyAvailableAt = originallyAvailableAt;
        return this;
    }

    public GetOnDeckMetadata withAddedAt(double addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public GetOnDeckMetadata withAddedAt(Optional<? extends Double> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public GetOnDeckMetadata withUpdatedAt(double updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public GetOnDeckMetadata withUpdatedAt(Optional<? extends Double> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public GetOnDeckMetadata withMedia(java.util.List<GetOnDeckMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }

    public GetOnDeckMetadata withMedia(Optional<? extends java.util.List<GetOnDeckMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public GetOnDeckMetadata withGuids(java.util.List<GetOnDeckGuids> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = Optional.ofNullable(guids);
        return this;
    }

    public GetOnDeckMetadata withGuids(Optional<? extends java.util.List<GetOnDeckGuids>> guids) {
        Utils.checkNotNull(guids, "guids");
        this.guids = guids;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOnDeckMetadata other = (GetOnDeckMetadata) o;
        return 
            java.util.Objects.deepEquals(this.allowSync, other.allowSync) &&
            java.util.Objects.deepEquals(this.librarySectionID, other.librarySectionID) &&
            java.util.Objects.deepEquals(this.librarySectionTitle, other.librarySectionTitle) &&
            java.util.Objects.deepEquals(this.librarySectionUUID, other.librarySectionUUID) &&
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.parentRatingKey, other.parentRatingKey) &&
            java.util.Objects.deepEquals(this.grandparentRatingKey, other.grandparentRatingKey) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.parentGuid, other.parentGuid) &&
            java.util.Objects.deepEquals(this.grandparentGuid, other.grandparentGuid) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.grandparentKey, other.grandparentKey) &&
            java.util.Objects.deepEquals(this.parentKey, other.parentKey) &&
            java.util.Objects.deepEquals(this.librarySectionKey, other.librarySectionKey) &&
            java.util.Objects.deepEquals(this.grandparentTitle, other.grandparentTitle) &&
            java.util.Objects.deepEquals(this.parentTitle, other.parentTitle) &&
            java.util.Objects.deepEquals(this.contentRating, other.contentRating) &&
            java.util.Objects.deepEquals(this.summary, other.summary) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            java.util.Objects.deepEquals(this.lastViewedAt, other.lastViewedAt) &&
            java.util.Objects.deepEquals(this.year, other.year) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            java.util.Objects.deepEquals(this.grandparentThumb, other.grandparentThumb) &&
            java.util.Objects.deepEquals(this.grandparentArt, other.grandparentArt) &&
            java.util.Objects.deepEquals(this.grandparentTheme, other.grandparentTheme) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.originallyAvailableAt, other.originallyAvailableAt) &&
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.media, other.media) &&
            java.util.Objects.deepEquals(this.guids, other.guids);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            allowSync,
            librarySectionID,
            librarySectionTitle,
            librarySectionUUID,
            ratingKey,
            key,
            parentRatingKey,
            grandparentRatingKey,
            guid,
            parentGuid,
            grandparentGuid,
            type,
            title,
            grandparentKey,
            parentKey,
            librarySectionKey,
            grandparentTitle,
            parentTitle,
            contentRating,
            summary,
            index,
            parentIndex,
            lastViewedAt,
            year,
            thumb,
            art,
            parentThumb,
            grandparentThumb,
            grandparentArt,
            grandparentTheme,
            duration,
            originallyAvailableAt,
            addedAt,
            updatedAt,
            media,
            guids);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOnDeckMetadata.class,
                "allowSync", allowSync,
                "librarySectionID", librarySectionID,
                "librarySectionTitle", librarySectionTitle,
                "librarySectionUUID", librarySectionUUID,
                "ratingKey", ratingKey,
                "key", key,
                "parentRatingKey", parentRatingKey,
                "grandparentRatingKey", grandparentRatingKey,
                "guid", guid,
                "parentGuid", parentGuid,
                "grandparentGuid", grandparentGuid,
                "type", type,
                "title", title,
                "grandparentKey", grandparentKey,
                "parentKey", parentKey,
                "librarySectionKey", librarySectionKey,
                "grandparentTitle", grandparentTitle,
                "parentTitle", parentTitle,
                "contentRating", contentRating,
                "summary", summary,
                "index", index,
                "parentIndex", parentIndex,
                "lastViewedAt", lastViewedAt,
                "year", year,
                "thumb", thumb,
                "art", art,
                "parentThumb", parentThumb,
                "grandparentThumb", grandparentThumb,
                "grandparentArt", grandparentArt,
                "grandparentTheme", grandparentTheme,
                "duration", duration,
                "originallyAvailableAt", originallyAvailableAt,
                "addedAt", addedAt,
                "updatedAt", updatedAt,
                "media", media,
                "guids", guids);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> allowSync = Optional.empty();
 
        private Optional<? extends Double> librarySectionID = Optional.empty();
 
        private Optional<? extends String> librarySectionTitle = Optional.empty();
 
        private Optional<? extends String> librarySectionUUID = Optional.empty();
 
        private Optional<? extends Double> ratingKey = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends Double> parentRatingKey = Optional.empty();
 
        private Optional<? extends Double> grandparentRatingKey = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends String> parentGuid = Optional.empty();
 
        private Optional<? extends String> grandparentGuid = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> grandparentKey = Optional.empty();
 
        private Optional<? extends String> parentKey = Optional.empty();
 
        private Optional<? extends String> librarySectionKey = Optional.empty();
 
        private Optional<? extends String> grandparentTitle = Optional.empty();
 
        private Optional<? extends String> parentTitle = Optional.empty();
 
        private Optional<? extends String> contentRating = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();
 
        private Optional<? extends Double> index = Optional.empty();
 
        private Optional<? extends Double> parentIndex = Optional.empty();
 
        private Optional<? extends Double> lastViewedAt = Optional.empty();
 
        private Optional<? extends Double> year = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends String> parentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentThumb = Optional.empty();
 
        private Optional<? extends String> grandparentArt = Optional.empty();
 
        private Optional<? extends String> grandparentTheme = Optional.empty();
 
        private Optional<? extends Double> duration = Optional.empty();
 
        private Optional<? extends OffsetDateTime> originallyAvailableAt = Optional.empty();
 
        private Optional<? extends Double> addedAt = Optional.empty();
 
        private Optional<? extends Double> updatedAt = Optional.empty();
 
        private Optional<? extends java.util.List<GetOnDeckMedia>> media = Optional.empty();
 
        private Optional<? extends java.util.List<GetOnDeckGuids>> guids = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder allowSync(boolean allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = Optional.ofNullable(allowSync);
            return this;
        }

        public Builder allowSync(Optional<? extends Boolean> allowSync) {
            Utils.checkNotNull(allowSync, "allowSync");
            this.allowSync = allowSync;
            return this;
        }

        public Builder librarySectionID(double librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = Optional.ofNullable(librarySectionID);
            return this;
        }

        public Builder librarySectionID(Optional<? extends Double> librarySectionID) {
            Utils.checkNotNull(librarySectionID, "librarySectionID");
            this.librarySectionID = librarySectionID;
            return this;
        }

        public Builder librarySectionTitle(String librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = Optional.ofNullable(librarySectionTitle);
            return this;
        }

        public Builder librarySectionTitle(Optional<? extends String> librarySectionTitle) {
            Utils.checkNotNull(librarySectionTitle, "librarySectionTitle");
            this.librarySectionTitle = librarySectionTitle;
            return this;
        }

        public Builder librarySectionUUID(String librarySectionUUID) {
            Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
            this.librarySectionUUID = Optional.ofNullable(librarySectionUUID);
            return this;
        }

        public Builder librarySectionUUID(Optional<? extends String> librarySectionUUID) {
            Utils.checkNotNull(librarySectionUUID, "librarySectionUUID");
            this.librarySectionUUID = librarySectionUUID;
            return this;
        }

        public Builder ratingKey(double ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends Double> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder parentRatingKey(double parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        public Builder parentRatingKey(Optional<? extends Double> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }

        public Builder grandparentRatingKey(double grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = Optional.ofNullable(grandparentRatingKey);
            return this;
        }

        public Builder grandparentRatingKey(Optional<? extends Double> grandparentRatingKey) {
            Utils.checkNotNull(grandparentRatingKey, "grandparentRatingKey");
            this.grandparentRatingKey = grandparentRatingKey;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        public Builder parentGuid(Optional<? extends String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }

        public Builder grandparentGuid(String grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = Optional.ofNullable(grandparentGuid);
            return this;
        }

        public Builder grandparentGuid(Optional<? extends String> grandparentGuid) {
            Utils.checkNotNull(grandparentGuid, "grandparentGuid");
            this.grandparentGuid = grandparentGuid;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder grandparentKey(String grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = Optional.ofNullable(grandparentKey);
            return this;
        }

        public Builder grandparentKey(Optional<? extends String> grandparentKey) {
            Utils.checkNotNull(grandparentKey, "grandparentKey");
            this.grandparentKey = grandparentKey;
            return this;
        }

        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        public Builder parentKey(Optional<? extends String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        public Builder librarySectionKey(String librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = Optional.ofNullable(librarySectionKey);
            return this;
        }

        public Builder librarySectionKey(Optional<? extends String> librarySectionKey) {
            Utils.checkNotNull(librarySectionKey, "librarySectionKey");
            this.librarySectionKey = librarySectionKey;
            return this;
        }

        public Builder grandparentTitle(String grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = Optional.ofNullable(grandparentTitle);
            return this;
        }

        public Builder grandparentTitle(Optional<? extends String> grandparentTitle) {
            Utils.checkNotNull(grandparentTitle, "grandparentTitle");
            this.grandparentTitle = grandparentTitle;
            return this;
        }

        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        public Builder parentTitle(Optional<? extends String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }

        public Builder contentRating(String contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = Optional.ofNullable(contentRating);
            return this;
        }

        public Builder contentRating(Optional<? extends String> contentRating) {
            Utils.checkNotNull(contentRating, "contentRating");
            this.contentRating = contentRating;
            return this;
        }

        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        public Builder index(double index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Double> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder parentIndex(double parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        public Builder parentIndex(Optional<? extends Double> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        public Builder lastViewedAt(double lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = Optional.ofNullable(lastViewedAt);
            return this;
        }

        public Builder lastViewedAt(Optional<? extends Double> lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = lastViewedAt;
            return this;
        }

        public Builder year(double year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        public Builder year(Optional<? extends Double> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        public Builder parentThumb(Optional<? extends String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        public Builder grandparentThumb(String grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = Optional.ofNullable(grandparentThumb);
            return this;
        }

        public Builder grandparentThumb(Optional<? extends String> grandparentThumb) {
            Utils.checkNotNull(grandparentThumb, "grandparentThumb");
            this.grandparentThumb = grandparentThumb;
            return this;
        }

        public Builder grandparentArt(String grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = Optional.ofNullable(grandparentArt);
            return this;
        }

        public Builder grandparentArt(Optional<? extends String> grandparentArt) {
            Utils.checkNotNull(grandparentArt, "grandparentArt");
            this.grandparentArt = grandparentArt;
            return this;
        }

        public Builder grandparentTheme(String grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = Optional.ofNullable(grandparentTheme);
            return this;
        }

        public Builder grandparentTheme(Optional<? extends String> grandparentTheme) {
            Utils.checkNotNull(grandparentTheme, "grandparentTheme");
            this.grandparentTheme = grandparentTheme;
            return this;
        }

        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder originallyAvailableAt(OffsetDateTime originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = Optional.ofNullable(originallyAvailableAt);
            return this;
        }

        public Builder originallyAvailableAt(Optional<? extends OffsetDateTime> originallyAvailableAt) {
            Utils.checkNotNull(originallyAvailableAt, "originallyAvailableAt");
            this.originallyAvailableAt = originallyAvailableAt;
            return this;
        }

        public Builder addedAt(double addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Double> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder updatedAt(double updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Double> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder media(java.util.List<GetOnDeckMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends java.util.List<GetOnDeckMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }

        public Builder guids(java.util.List<GetOnDeckGuids> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = Optional.ofNullable(guids);
            return this;
        }

        public Builder guids(Optional<? extends java.util.List<GetOnDeckGuids>> guids) {
            Utils.checkNotNull(guids, "guids");
            this.guids = guids;
            return this;
        }
        
        public GetOnDeckMetadata build() {
            return new GetOnDeckMetadata(
                allowSync,
                librarySectionID,
                librarySectionTitle,
                librarySectionUUID,
                ratingKey,
                key,
                parentRatingKey,
                grandparentRatingKey,
                guid,
                parentGuid,
                grandparentGuid,
                type,
                title,
                grandparentKey,
                parentKey,
                librarySectionKey,
                grandparentTitle,
                parentTitle,
                contentRating,
                summary,
                index,
                parentIndex,
                lastViewedAt,
                year,
                thumb,
                art,
                parentThumb,
                grandparentThumb,
                grandparentArt,
                grandparentTheme,
                duration,
                originallyAvailableAt,
                addedAt,
                updatedAt,
                media,
                guids);
        }
    }
}

