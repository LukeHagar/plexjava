/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class GetSearchResultsMedia {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Double> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("duration")
    private Optional<? extends Double> duration;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bitrate")
    private Optional<? extends Double> bitrate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<? extends Double> width;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<? extends Double> height;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aspectRatio")
    private Optional<? extends Double> aspectRatio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioChannels")
    private Optional<? extends Double> audioChannels;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioCodec")
    private Optional<? extends String> audioCodec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoCodec")
    private Optional<? extends String> videoCodec;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoResolution")
    private Optional<? extends Double> videoResolution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("container")
    private Optional<? extends String> container;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoFrameRate")
    private Optional<? extends String> videoFrameRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audioProfile")
    private Optional<? extends String> audioProfile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("videoProfile")
    private Optional<? extends String> videoProfile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("Part")
    private Optional<? extends java.util.List<GetSearchResultsPart>> part;

    public GetSearchResultsMedia(
            @JsonProperty("id") Optional<? extends Double> id,
            @JsonProperty("duration") Optional<? extends Double> duration,
            @JsonProperty("bitrate") Optional<? extends Double> bitrate,
            @JsonProperty("width") Optional<? extends Double> width,
            @JsonProperty("height") Optional<? extends Double> height,
            @JsonProperty("aspectRatio") Optional<? extends Double> aspectRatio,
            @JsonProperty("audioChannels") Optional<? extends Double> audioChannels,
            @JsonProperty("audioCodec") Optional<? extends String> audioCodec,
            @JsonProperty("videoCodec") Optional<? extends String> videoCodec,
            @JsonProperty("videoResolution") Optional<? extends Double> videoResolution,
            @JsonProperty("container") Optional<? extends String> container,
            @JsonProperty("videoFrameRate") Optional<? extends String> videoFrameRate,
            @JsonProperty("audioProfile") Optional<? extends String> audioProfile,
            @JsonProperty("videoProfile") Optional<? extends String> videoProfile,
            @JsonProperty("Part") Optional<? extends java.util.List<GetSearchResultsPart>> part) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(duration, "duration");
        Utils.checkNotNull(bitrate, "bitrate");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(aspectRatio, "aspectRatio");
        Utils.checkNotNull(audioChannels, "audioChannels");
        Utils.checkNotNull(audioCodec, "audioCodec");
        Utils.checkNotNull(videoCodec, "videoCodec");
        Utils.checkNotNull(videoResolution, "videoResolution");
        Utils.checkNotNull(container, "container");
        Utils.checkNotNull(videoFrameRate, "videoFrameRate");
        Utils.checkNotNull(audioProfile, "audioProfile");
        Utils.checkNotNull(videoProfile, "videoProfile");
        Utils.checkNotNull(part, "part");
        this.id = id;
        this.duration = duration;
        this.bitrate = bitrate;
        this.width = width;
        this.height = height;
        this.aspectRatio = aspectRatio;
        this.audioChannels = audioChannels;
        this.audioCodec = audioCodec;
        this.videoCodec = videoCodec;
        this.videoResolution = videoResolution;
        this.container = container;
        this.videoFrameRate = videoFrameRate;
        this.audioProfile = audioProfile;
        this.videoProfile = videoProfile;
        this.part = part;
    }

    public Optional<? extends Double> id() {
        return id;
    }

    public Optional<? extends Double> duration() {
        return duration;
    }

    public Optional<? extends Double> bitrate() {
        return bitrate;
    }

    public Optional<? extends Double> width() {
        return width;
    }

    public Optional<? extends Double> height() {
        return height;
    }

    public Optional<? extends Double> aspectRatio() {
        return aspectRatio;
    }

    public Optional<? extends Double> audioChannels() {
        return audioChannels;
    }

    public Optional<? extends String> audioCodec() {
        return audioCodec;
    }

    public Optional<? extends String> videoCodec() {
        return videoCodec;
    }

    public Optional<? extends Double> videoResolution() {
        return videoResolution;
    }

    public Optional<? extends String> container() {
        return container;
    }

    public Optional<? extends String> videoFrameRate() {
        return videoFrameRate;
    }

    public Optional<? extends String> audioProfile() {
        return audioProfile;
    }

    public Optional<? extends String> videoProfile() {
        return videoProfile;
    }

    public Optional<? extends java.util.List<GetSearchResultsPart>> part() {
        return part;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetSearchResultsMedia withId(double id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public GetSearchResultsMedia withId(Optional<? extends Double> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GetSearchResultsMedia withDuration(double duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = Optional.ofNullable(duration);
        return this;
    }

    public GetSearchResultsMedia withDuration(Optional<? extends Double> duration) {
        Utils.checkNotNull(duration, "duration");
        this.duration = duration;
        return this;
    }

    public GetSearchResultsMedia withBitrate(double bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = Optional.ofNullable(bitrate);
        return this;
    }

    public GetSearchResultsMedia withBitrate(Optional<? extends Double> bitrate) {
        Utils.checkNotNull(bitrate, "bitrate");
        this.bitrate = bitrate;
        return this;
    }

    public GetSearchResultsMedia withWidth(double width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    public GetSearchResultsMedia withWidth(Optional<? extends Double> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    public GetSearchResultsMedia withHeight(double height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    public GetSearchResultsMedia withHeight(Optional<? extends Double> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public GetSearchResultsMedia withAspectRatio(double aspectRatio) {
        Utils.checkNotNull(aspectRatio, "aspectRatio");
        this.aspectRatio = Optional.ofNullable(aspectRatio);
        return this;
    }

    public GetSearchResultsMedia withAspectRatio(Optional<? extends Double> aspectRatio) {
        Utils.checkNotNull(aspectRatio, "aspectRatio");
        this.aspectRatio = aspectRatio;
        return this;
    }

    public GetSearchResultsMedia withAudioChannels(double audioChannels) {
        Utils.checkNotNull(audioChannels, "audioChannels");
        this.audioChannels = Optional.ofNullable(audioChannels);
        return this;
    }

    public GetSearchResultsMedia withAudioChannels(Optional<? extends Double> audioChannels) {
        Utils.checkNotNull(audioChannels, "audioChannels");
        this.audioChannels = audioChannels;
        return this;
    }

    public GetSearchResultsMedia withAudioCodec(String audioCodec) {
        Utils.checkNotNull(audioCodec, "audioCodec");
        this.audioCodec = Optional.ofNullable(audioCodec);
        return this;
    }

    public GetSearchResultsMedia withAudioCodec(Optional<? extends String> audioCodec) {
        Utils.checkNotNull(audioCodec, "audioCodec");
        this.audioCodec = audioCodec;
        return this;
    }

    public GetSearchResultsMedia withVideoCodec(String videoCodec) {
        Utils.checkNotNull(videoCodec, "videoCodec");
        this.videoCodec = Optional.ofNullable(videoCodec);
        return this;
    }

    public GetSearchResultsMedia withVideoCodec(Optional<? extends String> videoCodec) {
        Utils.checkNotNull(videoCodec, "videoCodec");
        this.videoCodec = videoCodec;
        return this;
    }

    public GetSearchResultsMedia withVideoResolution(double videoResolution) {
        Utils.checkNotNull(videoResolution, "videoResolution");
        this.videoResolution = Optional.ofNullable(videoResolution);
        return this;
    }

    public GetSearchResultsMedia withVideoResolution(Optional<? extends Double> videoResolution) {
        Utils.checkNotNull(videoResolution, "videoResolution");
        this.videoResolution = videoResolution;
        return this;
    }

    public GetSearchResultsMedia withContainer(String container) {
        Utils.checkNotNull(container, "container");
        this.container = Optional.ofNullable(container);
        return this;
    }

    public GetSearchResultsMedia withContainer(Optional<? extends String> container) {
        Utils.checkNotNull(container, "container");
        this.container = container;
        return this;
    }

    public GetSearchResultsMedia withVideoFrameRate(String videoFrameRate) {
        Utils.checkNotNull(videoFrameRate, "videoFrameRate");
        this.videoFrameRate = Optional.ofNullable(videoFrameRate);
        return this;
    }

    public GetSearchResultsMedia withVideoFrameRate(Optional<? extends String> videoFrameRate) {
        Utils.checkNotNull(videoFrameRate, "videoFrameRate");
        this.videoFrameRate = videoFrameRate;
        return this;
    }

    public GetSearchResultsMedia withAudioProfile(String audioProfile) {
        Utils.checkNotNull(audioProfile, "audioProfile");
        this.audioProfile = Optional.ofNullable(audioProfile);
        return this;
    }

    public GetSearchResultsMedia withAudioProfile(Optional<? extends String> audioProfile) {
        Utils.checkNotNull(audioProfile, "audioProfile");
        this.audioProfile = audioProfile;
        return this;
    }

    public GetSearchResultsMedia withVideoProfile(String videoProfile) {
        Utils.checkNotNull(videoProfile, "videoProfile");
        this.videoProfile = Optional.ofNullable(videoProfile);
        return this;
    }

    public GetSearchResultsMedia withVideoProfile(Optional<? extends String> videoProfile) {
        Utils.checkNotNull(videoProfile, "videoProfile");
        this.videoProfile = videoProfile;
        return this;
    }

    public GetSearchResultsMedia withPart(java.util.List<GetSearchResultsPart> part) {
        Utils.checkNotNull(part, "part");
        this.part = Optional.ofNullable(part);
        return this;
    }

    public GetSearchResultsMedia withPart(Optional<? extends java.util.List<GetSearchResultsPart>> part) {
        Utils.checkNotNull(part, "part");
        this.part = part;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSearchResultsMedia other = (GetSearchResultsMedia) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.duration, other.duration) &&
            java.util.Objects.deepEquals(this.bitrate, other.bitrate) &&
            java.util.Objects.deepEquals(this.width, other.width) &&
            java.util.Objects.deepEquals(this.height, other.height) &&
            java.util.Objects.deepEquals(this.aspectRatio, other.aspectRatio) &&
            java.util.Objects.deepEquals(this.audioChannels, other.audioChannels) &&
            java.util.Objects.deepEquals(this.audioCodec, other.audioCodec) &&
            java.util.Objects.deepEquals(this.videoCodec, other.videoCodec) &&
            java.util.Objects.deepEquals(this.videoResolution, other.videoResolution) &&
            java.util.Objects.deepEquals(this.container, other.container) &&
            java.util.Objects.deepEquals(this.videoFrameRate, other.videoFrameRate) &&
            java.util.Objects.deepEquals(this.audioProfile, other.audioProfile) &&
            java.util.Objects.deepEquals(this.videoProfile, other.videoProfile) &&
            java.util.Objects.deepEquals(this.part, other.part);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            duration,
            bitrate,
            width,
            height,
            aspectRatio,
            audioChannels,
            audioCodec,
            videoCodec,
            videoResolution,
            container,
            videoFrameRate,
            audioProfile,
            videoProfile,
            part);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetSearchResultsMedia.class,
                "id", id,
                "duration", duration,
                "bitrate", bitrate,
                "width", width,
                "height", height,
                "aspectRatio", aspectRatio,
                "audioChannels", audioChannels,
                "audioCodec", audioCodec,
                "videoCodec", videoCodec,
                "videoResolution", videoResolution,
                "container", container,
                "videoFrameRate", videoFrameRate,
                "audioProfile", audioProfile,
                "videoProfile", videoProfile,
                "part", part);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> id = Optional.empty();
 
        private Optional<? extends Double> duration = Optional.empty();
 
        private Optional<? extends Double> bitrate = Optional.empty();
 
        private Optional<? extends Double> width = Optional.empty();
 
        private Optional<? extends Double> height = Optional.empty();
 
        private Optional<? extends Double> aspectRatio = Optional.empty();
 
        private Optional<? extends Double> audioChannels = Optional.empty();
 
        private Optional<? extends String> audioCodec = Optional.empty();
 
        private Optional<? extends String> videoCodec = Optional.empty();
 
        private Optional<? extends Double> videoResolution = Optional.empty();
 
        private Optional<? extends String> container = Optional.empty();
 
        private Optional<? extends String> videoFrameRate = Optional.empty();
 
        private Optional<? extends String> audioProfile = Optional.empty();
 
        private Optional<? extends String> videoProfile = Optional.empty();
 
        private Optional<? extends java.util.List<GetSearchResultsPart>> part = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(double id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends Double> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder duration(double duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = Optional.ofNullable(duration);
            return this;
        }

        public Builder duration(Optional<? extends Double> duration) {
            Utils.checkNotNull(duration, "duration");
            this.duration = duration;
            return this;
        }

        public Builder bitrate(double bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = Optional.ofNullable(bitrate);
            return this;
        }

        public Builder bitrate(Optional<? extends Double> bitrate) {
            Utils.checkNotNull(bitrate, "bitrate");
            this.bitrate = bitrate;
            return this;
        }

        public Builder width(double width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        public Builder width(Optional<? extends Double> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        public Builder height(double height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        public Builder height(Optional<? extends Double> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder aspectRatio(double aspectRatio) {
            Utils.checkNotNull(aspectRatio, "aspectRatio");
            this.aspectRatio = Optional.ofNullable(aspectRatio);
            return this;
        }

        public Builder aspectRatio(Optional<? extends Double> aspectRatio) {
            Utils.checkNotNull(aspectRatio, "aspectRatio");
            this.aspectRatio = aspectRatio;
            return this;
        }

        public Builder audioChannels(double audioChannels) {
            Utils.checkNotNull(audioChannels, "audioChannels");
            this.audioChannels = Optional.ofNullable(audioChannels);
            return this;
        }

        public Builder audioChannels(Optional<? extends Double> audioChannels) {
            Utils.checkNotNull(audioChannels, "audioChannels");
            this.audioChannels = audioChannels;
            return this;
        }

        public Builder audioCodec(String audioCodec) {
            Utils.checkNotNull(audioCodec, "audioCodec");
            this.audioCodec = Optional.ofNullable(audioCodec);
            return this;
        }

        public Builder audioCodec(Optional<? extends String> audioCodec) {
            Utils.checkNotNull(audioCodec, "audioCodec");
            this.audioCodec = audioCodec;
            return this;
        }

        public Builder videoCodec(String videoCodec) {
            Utils.checkNotNull(videoCodec, "videoCodec");
            this.videoCodec = Optional.ofNullable(videoCodec);
            return this;
        }

        public Builder videoCodec(Optional<? extends String> videoCodec) {
            Utils.checkNotNull(videoCodec, "videoCodec");
            this.videoCodec = videoCodec;
            return this;
        }

        public Builder videoResolution(double videoResolution) {
            Utils.checkNotNull(videoResolution, "videoResolution");
            this.videoResolution = Optional.ofNullable(videoResolution);
            return this;
        }

        public Builder videoResolution(Optional<? extends Double> videoResolution) {
            Utils.checkNotNull(videoResolution, "videoResolution");
            this.videoResolution = videoResolution;
            return this;
        }

        public Builder container(String container) {
            Utils.checkNotNull(container, "container");
            this.container = Optional.ofNullable(container);
            return this;
        }

        public Builder container(Optional<? extends String> container) {
            Utils.checkNotNull(container, "container");
            this.container = container;
            return this;
        }

        public Builder videoFrameRate(String videoFrameRate) {
            Utils.checkNotNull(videoFrameRate, "videoFrameRate");
            this.videoFrameRate = Optional.ofNullable(videoFrameRate);
            return this;
        }

        public Builder videoFrameRate(Optional<? extends String> videoFrameRate) {
            Utils.checkNotNull(videoFrameRate, "videoFrameRate");
            this.videoFrameRate = videoFrameRate;
            return this;
        }

        public Builder audioProfile(String audioProfile) {
            Utils.checkNotNull(audioProfile, "audioProfile");
            this.audioProfile = Optional.ofNullable(audioProfile);
            return this;
        }

        public Builder audioProfile(Optional<? extends String> audioProfile) {
            Utils.checkNotNull(audioProfile, "audioProfile");
            this.audioProfile = audioProfile;
            return this;
        }

        public Builder videoProfile(String videoProfile) {
            Utils.checkNotNull(videoProfile, "videoProfile");
            this.videoProfile = Optional.ofNullable(videoProfile);
            return this;
        }

        public Builder videoProfile(Optional<? extends String> videoProfile) {
            Utils.checkNotNull(videoProfile, "videoProfile");
            this.videoProfile = videoProfile;
            return this;
        }

        public Builder part(java.util.List<GetSearchResultsPart> part) {
            Utils.checkNotNull(part, "part");
            this.part = Optional.ofNullable(part);
            return this;
        }

        public Builder part(Optional<? extends java.util.List<GetSearchResultsPart>> part) {
            Utils.checkNotNull(part, "part");
            this.part = part;
            return this;
        }
        
        public GetSearchResultsMedia build() {
            return new GetSearchResultsMedia(
                id,
                duration,
                bitrate,
                width,
                height,
                aspectRatio,
                audioChannels,
                audioCodec,
                videoCodec,
                videoResolution,
                container,
                videoFrameRate,
                audioProfile,
                videoProfile,
                part);
        }
    }
}

