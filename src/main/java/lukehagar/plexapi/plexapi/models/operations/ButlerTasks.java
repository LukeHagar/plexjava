/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class ButlerTasks {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ButlerTask")
    private Optional<? extends java.util.List<ButlerTask>> butlerTask;

    public ButlerTasks(
            @JsonProperty("ButlerTask") Optional<? extends java.util.List<ButlerTask>> butlerTask) {
        Utils.checkNotNull(butlerTask, "butlerTask");
        this.butlerTask = butlerTask;
    }

    public Optional<? extends java.util.List<ButlerTask>> butlerTask() {
        return butlerTask;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ButlerTasks withButlerTask(java.util.List<ButlerTask> butlerTask) {
        Utils.checkNotNull(butlerTask, "butlerTask");
        this.butlerTask = Optional.ofNullable(butlerTask);
        return this;
    }

    public ButlerTasks withButlerTask(Optional<? extends java.util.List<ButlerTask>> butlerTask) {
        Utils.checkNotNull(butlerTask, "butlerTask");
        this.butlerTask = butlerTask;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ButlerTasks other = (ButlerTasks) o;
        return 
            java.util.Objects.deepEquals(this.butlerTask, other.butlerTask);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            butlerTask);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ButlerTasks.class,
                "butlerTask", butlerTask);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<ButlerTask>> butlerTask = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder butlerTask(java.util.List<ButlerTask> butlerTask) {
            Utils.checkNotNull(butlerTask, "butlerTask");
            this.butlerTask = Optional.ofNullable(butlerTask);
            return this;
        }

        public Builder butlerTask(Optional<? extends java.util.List<ButlerTask>> butlerTask) {
            Utils.checkNotNull(butlerTask, "butlerTask");
            this.butlerTask = butlerTask;
            return this;
        }
        
        public ButlerTasks build() {
            return new ButlerTasks(
                butlerTask);
        }
    }
}

