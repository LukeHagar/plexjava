/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;


public class Release {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<? extends String> version;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("added")
    private Optional<? extends String> added;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed")
    private Optional<? extends String> fixed;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("downloadURL")
    private Optional<? extends String> downloadURL;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<? extends String> state;

    public Release(
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("version") Optional<? extends String> version,
            @JsonProperty("added") Optional<? extends String> added,
            @JsonProperty("fixed") Optional<? extends String> fixed,
            @JsonProperty("downloadURL") Optional<? extends String> downloadURL,
            @JsonProperty("state") Optional<? extends String> state) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(added, "added");
        Utils.checkNotNull(fixed, "fixed");
        Utils.checkNotNull(downloadURL, "downloadURL");
        Utils.checkNotNull(state, "state");
        this.key = key;
        this.version = version;
        this.added = added;
        this.fixed = fixed;
        this.downloadURL = downloadURL;
        this.state = state;
    }

    public Optional<? extends String> key() {
        return key;
    }

    public Optional<? extends String> version() {
        return version;
    }

    public Optional<? extends String> added() {
        return added;
    }

    public Optional<? extends String> fixed() {
        return fixed;
    }

    public Optional<? extends String> downloadURL() {
        return downloadURL;
    }

    public Optional<? extends String> state() {
        return state;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Release withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public Release withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public Release withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public Release withVersion(Optional<? extends String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    public Release withAdded(String added) {
        Utils.checkNotNull(added, "added");
        this.added = Optional.ofNullable(added);
        return this;
    }

    public Release withAdded(Optional<? extends String> added) {
        Utils.checkNotNull(added, "added");
        this.added = added;
        return this;
    }

    public Release withFixed(String fixed) {
        Utils.checkNotNull(fixed, "fixed");
        this.fixed = Optional.ofNullable(fixed);
        return this;
    }

    public Release withFixed(Optional<? extends String> fixed) {
        Utils.checkNotNull(fixed, "fixed");
        this.fixed = fixed;
        return this;
    }

    public Release withDownloadURL(String downloadURL) {
        Utils.checkNotNull(downloadURL, "downloadURL");
        this.downloadURL = Optional.ofNullable(downloadURL);
        return this;
    }

    public Release withDownloadURL(Optional<? extends String> downloadURL) {
        Utils.checkNotNull(downloadURL, "downloadURL");
        this.downloadURL = downloadURL;
        return this;
    }

    public Release withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public Release withState(Optional<? extends String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Release other = (Release) o;
        return 
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.version, other.version) &&
            java.util.Objects.deepEquals(this.added, other.added) &&
            java.util.Objects.deepEquals(this.fixed, other.fixed) &&
            java.util.Objects.deepEquals(this.downloadURL, other.downloadURL) &&
            java.util.Objects.deepEquals(this.state, other.state);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            key,
            version,
            added,
            fixed,
            downloadURL,
            state);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Release.class,
                "key", key,
                "version", version,
                "added", added,
                "fixed", fixed,
                "downloadURL", downloadURL,
                "state", state);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> version = Optional.empty();
 
        private Optional<? extends String> added = Optional.empty();
 
        private Optional<? extends String> fixed = Optional.empty();
 
        private Optional<? extends String> downloadURL = Optional.empty();
 
        private Optional<? extends String> state = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<? extends String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        public Builder added(String added) {
            Utils.checkNotNull(added, "added");
            this.added = Optional.ofNullable(added);
            return this;
        }

        public Builder added(Optional<? extends String> added) {
            Utils.checkNotNull(added, "added");
            this.added = added;
            return this;
        }

        public Builder fixed(String fixed) {
            Utils.checkNotNull(fixed, "fixed");
            this.fixed = Optional.ofNullable(fixed);
            return this;
        }

        public Builder fixed(Optional<? extends String> fixed) {
            Utils.checkNotNull(fixed, "fixed");
            this.fixed = fixed;
            return this;
        }

        public Builder downloadURL(String downloadURL) {
            Utils.checkNotNull(downloadURL, "downloadURL");
            this.downloadURL = Optional.ofNullable(downloadURL);
            return this;
        }

        public Builder downloadURL(Optional<? extends String> downloadURL) {
            Utils.checkNotNull(downloadURL, "downloadURL");
            this.downloadURL = downloadURL;
            return this;
        }

        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<? extends String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }
        
        public Release build() {
            return new Release(
                key,
                version,
                added,
                fixed,
                downloadURL,
                state);
        }
    }
}

