/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import lukehagar.plexapi.plexapi.utils.SpeakeasyMetadata;
import lukehagar.plexapi.plexapi.utils.Utils;


public class SearchLibraryRequest {

    /**
     * the Id of the library to query
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=sectionId")
    private long sectionId;

    /**
     * Plex content type to search for
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Type type;

    public SearchLibraryRequest(
            long sectionId,
            Type type) {
        Utils.checkNotNull(sectionId, "sectionId");
        Utils.checkNotNull(type, "type");
        this.sectionId = sectionId;
        this.type = type;
    }

    /**
     * the Id of the library to query
     */
    public long sectionId() {
        return sectionId;
    }

    /**
     * Plex content type to search for
     */
    public Type type() {
        return type;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the Id of the library to query
     */
    public SearchLibraryRequest withSectionId(long sectionId) {
        Utils.checkNotNull(sectionId, "sectionId");
        this.sectionId = sectionId;
        return this;
    }

    /**
     * Plex content type to search for
     */
    public SearchLibraryRequest withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchLibraryRequest other = (SearchLibraryRequest) o;
        return 
            java.util.Objects.deepEquals(this.sectionId, other.sectionId) &&
            java.util.Objects.deepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            sectionId,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchLibraryRequest.class,
                "sectionId", sectionId,
                "type", type);
    }
    
    public final static class Builder {
 
        private Long sectionId;
 
        private Type type;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the Id of the library to query
         */
        public Builder sectionId(long sectionId) {
            Utils.checkNotNull(sectionId, "sectionId");
            this.sectionId = sectionId;
            return this;
        }

        /**
         * Plex content type to search for
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }
        
        public SearchLibraryRequest build() {
            return new SearchLibraryRequest(
                sectionId,
                type);
        }
    }
}

