/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import lukehagar.plexapi.plexapi.utils.Utils;

public class GetMetadataChildrenMetadata {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ratingKey")
    private Optional<? extends String> ratingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends String> key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentRatingKey")
    private Optional<? extends String> parentRatingKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("guid")
    private Optional<? extends String> guid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentGuid")
    private Optional<? extends String> parentGuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentStudio")
    private Optional<? extends String> parentStudio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<? extends String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentKey")
    private Optional<? extends String> parentKey;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTitle")
    private Optional<? extends String> parentTitle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("summary")
    private Optional<? extends String> summary;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends Integer> index;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentIndex")
    private Optional<? extends Integer> parentIndex;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewCount")
    private Optional<? extends Integer> viewCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastViewedAt")
    private Optional<? extends Integer> lastViewedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentYear")
    private Optional<? extends Integer> parentYear;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumb")
    private Optional<? extends String> thumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("art")
    private Optional<? extends String> art;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentThumb")
    private Optional<? extends String> parentThumb;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parentTheme")
    private Optional<? extends String> parentTheme;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leafCount")
    private Optional<? extends Integer> leafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("viewedLeafCount")
    private Optional<? extends Integer> viewedLeafCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addedAt")
    private Optional<? extends Integer> addedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updatedAt")
    private Optional<? extends Integer> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userRating")
    private Optional<? extends Integer> userRating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skipCount")
    private Optional<? extends Integer> skipCount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRatedAt")
    private Optional<? extends Integer> lastRatedAt;

    @JsonCreator
    public GetMetadataChildrenMetadata(
            @JsonProperty("ratingKey") Optional<? extends String> ratingKey,
            @JsonProperty("key") Optional<? extends String> key,
            @JsonProperty("parentRatingKey") Optional<? extends String> parentRatingKey,
            @JsonProperty("guid") Optional<? extends String> guid,
            @JsonProperty("parentGuid") Optional<? extends String> parentGuid,
            @JsonProperty("parentStudio") Optional<? extends String> parentStudio,
            @JsonProperty("type") Optional<? extends String> type,
            @JsonProperty("title") Optional<? extends String> title,
            @JsonProperty("parentKey") Optional<? extends String> parentKey,
            @JsonProperty("parentTitle") Optional<? extends String> parentTitle,
            @JsonProperty("summary") Optional<? extends String> summary,
            @JsonProperty("index") Optional<? extends Integer> index,
            @JsonProperty("parentIndex") Optional<? extends Integer> parentIndex,
            @JsonProperty("viewCount") Optional<? extends Integer> viewCount,
            @JsonProperty("lastViewedAt") Optional<? extends Integer> lastViewedAt,
            @JsonProperty("parentYear") Optional<? extends Integer> parentYear,
            @JsonProperty("thumb") Optional<? extends String> thumb,
            @JsonProperty("art") Optional<? extends String> art,
            @JsonProperty("parentThumb") Optional<? extends String> parentThumb,
            @JsonProperty("parentTheme") Optional<? extends String> parentTheme,
            @JsonProperty("leafCount") Optional<? extends Integer> leafCount,
            @JsonProperty("viewedLeafCount") Optional<? extends Integer> viewedLeafCount,
            @JsonProperty("addedAt") Optional<? extends Integer> addedAt,
            @JsonProperty("updatedAt") Optional<? extends Integer> updatedAt,
            @JsonProperty("userRating") Optional<? extends Integer> userRating,
            @JsonProperty("skipCount") Optional<? extends Integer> skipCount,
            @JsonProperty("lastRatedAt") Optional<? extends Integer> lastRatedAt) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        Utils.checkNotNull(guid, "guid");
        Utils.checkNotNull(parentGuid, "parentGuid");
        Utils.checkNotNull(parentStudio, "parentStudio");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(parentKey, "parentKey");
        Utils.checkNotNull(parentTitle, "parentTitle");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(parentIndex, "parentIndex");
        Utils.checkNotNull(viewCount, "viewCount");
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        Utils.checkNotNull(parentYear, "parentYear");
        Utils.checkNotNull(thumb, "thumb");
        Utils.checkNotNull(art, "art");
        Utils.checkNotNull(parentThumb, "parentThumb");
        Utils.checkNotNull(parentTheme, "parentTheme");
        Utils.checkNotNull(leafCount, "leafCount");
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        Utils.checkNotNull(addedAt, "addedAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userRating, "userRating");
        Utils.checkNotNull(skipCount, "skipCount");
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.ratingKey = ratingKey;
        this.key = key;
        this.parentRatingKey = parentRatingKey;
        this.guid = guid;
        this.parentGuid = parentGuid;
        this.parentStudio = parentStudio;
        this.type = type;
        this.title = title;
        this.parentKey = parentKey;
        this.parentTitle = parentTitle;
        this.summary = summary;
        this.index = index;
        this.parentIndex = parentIndex;
        this.viewCount = viewCount;
        this.lastViewedAt = lastViewedAt;
        this.parentYear = parentYear;
        this.thumb = thumb;
        this.art = art;
        this.parentThumb = parentThumb;
        this.parentTheme = parentTheme;
        this.leafCount = leafCount;
        this.viewedLeafCount = viewedLeafCount;
        this.addedAt = addedAt;
        this.updatedAt = updatedAt;
        this.userRating = userRating;
        this.skipCount = skipCount;
        this.lastRatedAt = lastRatedAt;
    }
    
    public GetMetadataChildrenMetadata() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> ratingKey() {
        return (Optional<String>) ratingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> key() {
        return (Optional<String>) key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentRatingKey() {
        return (Optional<String>) parentRatingKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> guid() {
        return (Optional<String>) guid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentGuid() {
        return (Optional<String>) parentGuid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentStudio() {
        return (Optional<String>) parentStudio;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> type() {
        return (Optional<String>) type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> title() {
        return (Optional<String>) title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentKey() {
        return (Optional<String>) parentKey;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentTitle() {
        return (Optional<String>) parentTitle;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> summary() {
        return (Optional<String>) summary;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> index() {
        return (Optional<Integer>) index;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> parentIndex() {
        return (Optional<Integer>) parentIndex;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> viewCount() {
        return (Optional<Integer>) viewCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> lastViewedAt() {
        return (Optional<Integer>) lastViewedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> parentYear() {
        return (Optional<Integer>) parentYear;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> thumb() {
        return (Optional<String>) thumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> art() {
        return (Optional<String>) art;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentThumb() {
        return (Optional<String>) parentThumb;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> parentTheme() {
        return (Optional<String>) parentTheme;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> leafCount() {
        return (Optional<Integer>) leafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> viewedLeafCount() {
        return (Optional<Integer>) viewedLeafCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> addedAt() {
        return (Optional<Integer>) addedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> updatedAt() {
        return (Optional<Integer>) updatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> userRating() {
        return (Optional<Integer>) userRating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> skipCount() {
        return (Optional<Integer>) skipCount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Integer> lastRatedAt() {
        return (Optional<Integer>) lastRatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetMetadataChildrenMetadata withRatingKey(String ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = Optional.ofNullable(ratingKey);
        return this;
    }

    public GetMetadataChildrenMetadata withRatingKey(Optional<? extends String> ratingKey) {
        Utils.checkNotNull(ratingKey, "ratingKey");
        this.ratingKey = ratingKey;
        return this;
    }

    public GetMetadataChildrenMetadata withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    public GetMetadataChildrenMetadata withKey(Optional<? extends String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public GetMetadataChildrenMetadata withParentRatingKey(String parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = Optional.ofNullable(parentRatingKey);
        return this;
    }

    public GetMetadataChildrenMetadata withParentRatingKey(Optional<? extends String> parentRatingKey) {
        Utils.checkNotNull(parentRatingKey, "parentRatingKey");
        this.parentRatingKey = parentRatingKey;
        return this;
    }

    public GetMetadataChildrenMetadata withGuid(String guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = Optional.ofNullable(guid);
        return this;
    }

    public GetMetadataChildrenMetadata withGuid(Optional<? extends String> guid) {
        Utils.checkNotNull(guid, "guid");
        this.guid = guid;
        return this;
    }

    public GetMetadataChildrenMetadata withParentGuid(String parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = Optional.ofNullable(parentGuid);
        return this;
    }

    public GetMetadataChildrenMetadata withParentGuid(Optional<? extends String> parentGuid) {
        Utils.checkNotNull(parentGuid, "parentGuid");
        this.parentGuid = parentGuid;
        return this;
    }

    public GetMetadataChildrenMetadata withParentStudio(String parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = Optional.ofNullable(parentStudio);
        return this;
    }

    public GetMetadataChildrenMetadata withParentStudio(Optional<? extends String> parentStudio) {
        Utils.checkNotNull(parentStudio, "parentStudio");
        this.parentStudio = parentStudio;
        return this;
    }

    public GetMetadataChildrenMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public GetMetadataChildrenMetadata withType(Optional<? extends String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public GetMetadataChildrenMetadata withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public GetMetadataChildrenMetadata withTitle(Optional<? extends String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public GetMetadataChildrenMetadata withParentKey(String parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = Optional.ofNullable(parentKey);
        return this;
    }

    public GetMetadataChildrenMetadata withParentKey(Optional<? extends String> parentKey) {
        Utils.checkNotNull(parentKey, "parentKey");
        this.parentKey = parentKey;
        return this;
    }

    public GetMetadataChildrenMetadata withParentTitle(String parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = Optional.ofNullable(parentTitle);
        return this;
    }

    public GetMetadataChildrenMetadata withParentTitle(Optional<? extends String> parentTitle) {
        Utils.checkNotNull(parentTitle, "parentTitle");
        this.parentTitle = parentTitle;
        return this;
    }

    public GetMetadataChildrenMetadata withSummary(String summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public GetMetadataChildrenMetadata withSummary(Optional<? extends String> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public GetMetadataChildrenMetadata withIndex(int index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetMetadataChildrenMetadata withIndex(Optional<? extends Integer> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    public GetMetadataChildrenMetadata withParentIndex(int parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = Optional.ofNullable(parentIndex);
        return this;
    }

    public GetMetadataChildrenMetadata withParentIndex(Optional<? extends Integer> parentIndex) {
        Utils.checkNotNull(parentIndex, "parentIndex");
        this.parentIndex = parentIndex;
        return this;
    }

    public GetMetadataChildrenMetadata withViewCount(int viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = Optional.ofNullable(viewCount);
        return this;
    }

    public GetMetadataChildrenMetadata withViewCount(Optional<? extends Integer> viewCount) {
        Utils.checkNotNull(viewCount, "viewCount");
        this.viewCount = viewCount;
        return this;
    }

    public GetMetadataChildrenMetadata withLastViewedAt(int lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = Optional.ofNullable(lastViewedAt);
        return this;
    }

    public GetMetadataChildrenMetadata withLastViewedAt(Optional<? extends Integer> lastViewedAt) {
        Utils.checkNotNull(lastViewedAt, "lastViewedAt");
        this.lastViewedAt = lastViewedAt;
        return this;
    }

    public GetMetadataChildrenMetadata withParentYear(int parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = Optional.ofNullable(parentYear);
        return this;
    }

    public GetMetadataChildrenMetadata withParentYear(Optional<? extends Integer> parentYear) {
        Utils.checkNotNull(parentYear, "parentYear");
        this.parentYear = parentYear;
        return this;
    }

    public GetMetadataChildrenMetadata withThumb(String thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = Optional.ofNullable(thumb);
        return this;
    }

    public GetMetadataChildrenMetadata withThumb(Optional<? extends String> thumb) {
        Utils.checkNotNull(thumb, "thumb");
        this.thumb = thumb;
        return this;
    }

    public GetMetadataChildrenMetadata withArt(String art) {
        Utils.checkNotNull(art, "art");
        this.art = Optional.ofNullable(art);
        return this;
    }

    public GetMetadataChildrenMetadata withArt(Optional<? extends String> art) {
        Utils.checkNotNull(art, "art");
        this.art = art;
        return this;
    }

    public GetMetadataChildrenMetadata withParentThumb(String parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = Optional.ofNullable(parentThumb);
        return this;
    }

    public GetMetadataChildrenMetadata withParentThumb(Optional<? extends String> parentThumb) {
        Utils.checkNotNull(parentThumb, "parentThumb");
        this.parentThumb = parentThumb;
        return this;
    }

    public GetMetadataChildrenMetadata withParentTheme(String parentTheme) {
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.parentTheme = Optional.ofNullable(parentTheme);
        return this;
    }

    public GetMetadataChildrenMetadata withParentTheme(Optional<? extends String> parentTheme) {
        Utils.checkNotNull(parentTheme, "parentTheme");
        this.parentTheme = parentTheme;
        return this;
    }

    public GetMetadataChildrenMetadata withLeafCount(int leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = Optional.ofNullable(leafCount);
        return this;
    }

    public GetMetadataChildrenMetadata withLeafCount(Optional<? extends Integer> leafCount) {
        Utils.checkNotNull(leafCount, "leafCount");
        this.leafCount = leafCount;
        return this;
    }

    public GetMetadataChildrenMetadata withViewedLeafCount(int viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
        return this;
    }

    public GetMetadataChildrenMetadata withViewedLeafCount(Optional<? extends Integer> viewedLeafCount) {
        Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
        this.viewedLeafCount = viewedLeafCount;
        return this;
    }

    public GetMetadataChildrenMetadata withAddedAt(int addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = Optional.ofNullable(addedAt);
        return this;
    }

    public GetMetadataChildrenMetadata withAddedAt(Optional<? extends Integer> addedAt) {
        Utils.checkNotNull(addedAt, "addedAt");
        this.addedAt = addedAt;
        return this;
    }

    public GetMetadataChildrenMetadata withUpdatedAt(int updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public GetMetadataChildrenMetadata withUpdatedAt(Optional<? extends Integer> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public GetMetadataChildrenMetadata withUserRating(int userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = Optional.ofNullable(userRating);
        return this;
    }

    public GetMetadataChildrenMetadata withUserRating(Optional<? extends Integer> userRating) {
        Utils.checkNotNull(userRating, "userRating");
        this.userRating = userRating;
        return this;
    }

    public GetMetadataChildrenMetadata withSkipCount(int skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = Optional.ofNullable(skipCount);
        return this;
    }

    public GetMetadataChildrenMetadata withSkipCount(Optional<? extends Integer> skipCount) {
        Utils.checkNotNull(skipCount, "skipCount");
        this.skipCount = skipCount;
        return this;
    }

    public GetMetadataChildrenMetadata withLastRatedAt(int lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = Optional.ofNullable(lastRatedAt);
        return this;
    }

    public GetMetadataChildrenMetadata withLastRatedAt(Optional<? extends Integer> lastRatedAt) {
        Utils.checkNotNull(lastRatedAt, "lastRatedAt");
        this.lastRatedAt = lastRatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetMetadataChildrenMetadata other = (GetMetadataChildrenMetadata) o;
        return 
            java.util.Objects.deepEquals(this.ratingKey, other.ratingKey) &&
            java.util.Objects.deepEquals(this.key, other.key) &&
            java.util.Objects.deepEquals(this.parentRatingKey, other.parentRatingKey) &&
            java.util.Objects.deepEquals(this.guid, other.guid) &&
            java.util.Objects.deepEquals(this.parentGuid, other.parentGuid) &&
            java.util.Objects.deepEquals(this.parentStudio, other.parentStudio) &&
            java.util.Objects.deepEquals(this.type, other.type) &&
            java.util.Objects.deepEquals(this.title, other.title) &&
            java.util.Objects.deepEquals(this.parentKey, other.parentKey) &&
            java.util.Objects.deepEquals(this.parentTitle, other.parentTitle) &&
            java.util.Objects.deepEquals(this.summary, other.summary) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.parentIndex, other.parentIndex) &&
            java.util.Objects.deepEquals(this.viewCount, other.viewCount) &&
            java.util.Objects.deepEquals(this.lastViewedAt, other.lastViewedAt) &&
            java.util.Objects.deepEquals(this.parentYear, other.parentYear) &&
            java.util.Objects.deepEquals(this.thumb, other.thumb) &&
            java.util.Objects.deepEquals(this.art, other.art) &&
            java.util.Objects.deepEquals(this.parentThumb, other.parentThumb) &&
            java.util.Objects.deepEquals(this.parentTheme, other.parentTheme) &&
            java.util.Objects.deepEquals(this.leafCount, other.leafCount) &&
            java.util.Objects.deepEquals(this.viewedLeafCount, other.viewedLeafCount) &&
            java.util.Objects.deepEquals(this.addedAt, other.addedAt) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.userRating, other.userRating) &&
            java.util.Objects.deepEquals(this.skipCount, other.skipCount) &&
            java.util.Objects.deepEquals(this.lastRatedAt, other.lastRatedAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ratingKey,
            key,
            parentRatingKey,
            guid,
            parentGuid,
            parentStudio,
            type,
            title,
            parentKey,
            parentTitle,
            summary,
            index,
            parentIndex,
            viewCount,
            lastViewedAt,
            parentYear,
            thumb,
            art,
            parentThumb,
            parentTheme,
            leafCount,
            viewedLeafCount,
            addedAt,
            updatedAt,
            userRating,
            skipCount,
            lastRatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetMetadataChildrenMetadata.class,
                "ratingKey", ratingKey,
                "key", key,
                "parentRatingKey", parentRatingKey,
                "guid", guid,
                "parentGuid", parentGuid,
                "parentStudio", parentStudio,
                "type", type,
                "title", title,
                "parentKey", parentKey,
                "parentTitle", parentTitle,
                "summary", summary,
                "index", index,
                "parentIndex", parentIndex,
                "viewCount", viewCount,
                "lastViewedAt", lastViewedAt,
                "parentYear", parentYear,
                "thumb", thumb,
                "art", art,
                "parentThumb", parentThumb,
                "parentTheme", parentTheme,
                "leafCount", leafCount,
                "viewedLeafCount", viewedLeafCount,
                "addedAt", addedAt,
                "updatedAt", updatedAt,
                "userRating", userRating,
                "skipCount", skipCount,
                "lastRatedAt", lastRatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> ratingKey = Optional.empty();
 
        private Optional<? extends String> key = Optional.empty();
 
        private Optional<? extends String> parentRatingKey = Optional.empty();
 
        private Optional<? extends String> guid = Optional.empty();
 
        private Optional<? extends String> parentGuid = Optional.empty();
 
        private Optional<? extends String> parentStudio = Optional.empty();
 
        private Optional<? extends String> type = Optional.empty();
 
        private Optional<? extends String> title = Optional.empty();
 
        private Optional<? extends String> parentKey = Optional.empty();
 
        private Optional<? extends String> parentTitle = Optional.empty();
 
        private Optional<? extends String> summary = Optional.empty();
 
        private Optional<? extends Integer> index = Optional.empty();
 
        private Optional<? extends Integer> parentIndex = Optional.empty();
 
        private Optional<? extends Integer> viewCount = Optional.empty();
 
        private Optional<? extends Integer> lastViewedAt = Optional.empty();
 
        private Optional<? extends Integer> parentYear = Optional.empty();
 
        private Optional<? extends String> thumb = Optional.empty();
 
        private Optional<? extends String> art = Optional.empty();
 
        private Optional<? extends String> parentThumb = Optional.empty();
 
        private Optional<? extends String> parentTheme = Optional.empty();
 
        private Optional<? extends Integer> leafCount = Optional.empty();
 
        private Optional<? extends Integer> viewedLeafCount = Optional.empty();
 
        private Optional<? extends Integer> addedAt = Optional.empty();
 
        private Optional<? extends Integer> updatedAt = Optional.empty();
 
        private Optional<? extends Integer> userRating = Optional.empty();
 
        private Optional<? extends Integer> skipCount = Optional.empty();
 
        private Optional<? extends Integer> lastRatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ratingKey(String ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = Optional.ofNullable(ratingKey);
            return this;
        }

        public Builder ratingKey(Optional<? extends String> ratingKey) {
            Utils.checkNotNull(ratingKey, "ratingKey");
            this.ratingKey = ratingKey;
            return this;
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        public Builder key(Optional<? extends String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder parentRatingKey(String parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = Optional.ofNullable(parentRatingKey);
            return this;
        }

        public Builder parentRatingKey(Optional<? extends String> parentRatingKey) {
            Utils.checkNotNull(parentRatingKey, "parentRatingKey");
            this.parentRatingKey = parentRatingKey;
            return this;
        }

        public Builder guid(String guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = Optional.ofNullable(guid);
            return this;
        }

        public Builder guid(Optional<? extends String> guid) {
            Utils.checkNotNull(guid, "guid");
            this.guid = guid;
            return this;
        }

        public Builder parentGuid(String parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = Optional.ofNullable(parentGuid);
            return this;
        }

        public Builder parentGuid(Optional<? extends String> parentGuid) {
            Utils.checkNotNull(parentGuid, "parentGuid");
            this.parentGuid = parentGuid;
            return this;
        }

        public Builder parentStudio(String parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = Optional.ofNullable(parentStudio);
            return this;
        }

        public Builder parentStudio(Optional<? extends String> parentStudio) {
            Utils.checkNotNull(parentStudio, "parentStudio");
            this.parentStudio = parentStudio;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<? extends String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder parentKey(String parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = Optional.ofNullable(parentKey);
            return this;
        }

        public Builder parentKey(Optional<? extends String> parentKey) {
            Utils.checkNotNull(parentKey, "parentKey");
            this.parentKey = parentKey;
            return this;
        }

        public Builder parentTitle(String parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = Optional.ofNullable(parentTitle);
            return this;
        }

        public Builder parentTitle(Optional<? extends String> parentTitle) {
            Utils.checkNotNull(parentTitle, "parentTitle");
            this.parentTitle = parentTitle;
            return this;
        }

        public Builder summary(String summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<? extends String> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        public Builder index(int index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends Integer> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        public Builder parentIndex(int parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = Optional.ofNullable(parentIndex);
            return this;
        }

        public Builder parentIndex(Optional<? extends Integer> parentIndex) {
            Utils.checkNotNull(parentIndex, "parentIndex");
            this.parentIndex = parentIndex;
            return this;
        }

        public Builder viewCount(int viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = Optional.ofNullable(viewCount);
            return this;
        }

        public Builder viewCount(Optional<? extends Integer> viewCount) {
            Utils.checkNotNull(viewCount, "viewCount");
            this.viewCount = viewCount;
            return this;
        }

        public Builder lastViewedAt(int lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = Optional.ofNullable(lastViewedAt);
            return this;
        }

        public Builder lastViewedAt(Optional<? extends Integer> lastViewedAt) {
            Utils.checkNotNull(lastViewedAt, "lastViewedAt");
            this.lastViewedAt = lastViewedAt;
            return this;
        }

        public Builder parentYear(int parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = Optional.ofNullable(parentYear);
            return this;
        }

        public Builder parentYear(Optional<? extends Integer> parentYear) {
            Utils.checkNotNull(parentYear, "parentYear");
            this.parentYear = parentYear;
            return this;
        }

        public Builder thumb(String thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = Optional.ofNullable(thumb);
            return this;
        }

        public Builder thumb(Optional<? extends String> thumb) {
            Utils.checkNotNull(thumb, "thumb");
            this.thumb = thumb;
            return this;
        }

        public Builder art(String art) {
            Utils.checkNotNull(art, "art");
            this.art = Optional.ofNullable(art);
            return this;
        }

        public Builder art(Optional<? extends String> art) {
            Utils.checkNotNull(art, "art");
            this.art = art;
            return this;
        }

        public Builder parentThumb(String parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = Optional.ofNullable(parentThumb);
            return this;
        }

        public Builder parentThumb(Optional<? extends String> parentThumb) {
            Utils.checkNotNull(parentThumb, "parentThumb");
            this.parentThumb = parentThumb;
            return this;
        }

        public Builder parentTheme(String parentTheme) {
            Utils.checkNotNull(parentTheme, "parentTheme");
            this.parentTheme = Optional.ofNullable(parentTheme);
            return this;
        }

        public Builder parentTheme(Optional<? extends String> parentTheme) {
            Utils.checkNotNull(parentTheme, "parentTheme");
            this.parentTheme = parentTheme;
            return this;
        }

        public Builder leafCount(int leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = Optional.ofNullable(leafCount);
            return this;
        }

        public Builder leafCount(Optional<? extends Integer> leafCount) {
            Utils.checkNotNull(leafCount, "leafCount");
            this.leafCount = leafCount;
            return this;
        }

        public Builder viewedLeafCount(int viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = Optional.ofNullable(viewedLeafCount);
            return this;
        }

        public Builder viewedLeafCount(Optional<? extends Integer> viewedLeafCount) {
            Utils.checkNotNull(viewedLeafCount, "viewedLeafCount");
            this.viewedLeafCount = viewedLeafCount;
            return this;
        }

        public Builder addedAt(int addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = Optional.ofNullable(addedAt);
            return this;
        }

        public Builder addedAt(Optional<? extends Integer> addedAt) {
            Utils.checkNotNull(addedAt, "addedAt");
            this.addedAt = addedAt;
            return this;
        }

        public Builder updatedAt(int updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<? extends Integer> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userRating(int userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = Optional.ofNullable(userRating);
            return this;
        }

        public Builder userRating(Optional<? extends Integer> userRating) {
            Utils.checkNotNull(userRating, "userRating");
            this.userRating = userRating;
            return this;
        }

        public Builder skipCount(int skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = Optional.ofNullable(skipCount);
            return this;
        }

        public Builder skipCount(Optional<? extends Integer> skipCount) {
            Utils.checkNotNull(skipCount, "skipCount");
            this.skipCount = skipCount;
            return this;
        }

        public Builder lastRatedAt(int lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = Optional.ofNullable(lastRatedAt);
            return this;
        }

        public Builder lastRatedAt(Optional<? extends Integer> lastRatedAt) {
            Utils.checkNotNull(lastRatedAt, "lastRatedAt");
            this.lastRatedAt = lastRatedAt;
            return this;
        }
        
        public GetMetadataChildrenMetadata build() {
            return new GetMetadataChildrenMetadata(
                ratingKey,
                key,
                parentRatingKey,
                guid,
                parentGuid,
                parentStudio,
                type,
                title,
                parentKey,
                parentTitle,
                summary,
                index,
                parentIndex,
                viewCount,
                lastViewedAt,
                parentYear,
                thumb,
                art,
                parentThumb,
                parentTheme,
                leafCount,
                viewedLeafCount,
                addedAt,
                updatedAt,
                userRating,
                skipCount,
                lastRatedAt);
        }
    }
}

