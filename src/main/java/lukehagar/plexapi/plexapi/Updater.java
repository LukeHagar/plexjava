/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import lukehagar.plexapi.plexapi.models.errors.SDKError;
import lukehagar.plexapi.plexapi.models.operations.SDKMethodInterfaces.*;
import lukehagar.plexapi.plexapi.utils.HTTPClient;
import lukehagar.plexapi.plexapi.utils.HTTPRequest;
import lukehagar.plexapi.plexapi.utils.JSON;
import lukehagar.plexapi.plexapi.utils.Utils;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * This describes the API for searching and applying updates to the Plex Media Server.
 * Updates to the status can be observed via the Event API.
 * 
 */
public class Updater implements
            MethodCallGetUpdateStatus,
            MethodCallCheckForUpdates,
            MethodCallApplyUpdates {

    private final SDKConfiguration sdkConfiguration;

    Updater(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusRequestBuilder getUpdateStatus() {
        return new lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusRequestBuilder(this);
    }

    /**
     * Querying status of updates
     * Querying status of updates
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponse getUpdateStatusDirect() throws Exception {

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/updater/status");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusUpdaterResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetUpdateStatusUpdaterResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesRequestBuilder checkForUpdates() {
        return new lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesRequestBuilder(this);
    }

    /**
     * Checking for updates
     * Checking for updates
     * @param download Indicate that you want to start download any updates found.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponse checkForUpdates(
            Optional<? extends lukehagar.plexapi.plexapi.models.operations.Download> download) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesRequest request =
            lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesRequest
                .builder()
                .download(download)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/updater/check");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.CheckForUpdatesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesRequestBuilder applyUpdates() {
        return new lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesRequestBuilder(this);
    }

    /**
     * Apply Updates
     * Note that these two parameters are effectively mutually exclusive. The `tonight` parameter takes precedence and `skip` will be ignored if `tonight` is also passed
     * 
     * @param tonight Indicate that you want the update to run during the next Butler execution. Omitting this or setting it to false indicates that the update should install
     * @param skip Indicate that the latest version should be marked as skipped. The <Release> entry for this version will have the `state` set to `skipped`.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponse applyUpdates(
            Optional<? extends lukehagar.plexapi.plexapi.models.operations.Tonight> tonight,
            Optional<? extends lukehagar.plexapi.plexapi.models.operations.Skip> skip) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesRequest request =
            lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesRequest
                .builder()
                .tonight(tonight)
                .skip(skip)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/updater/apply");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 500) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.ApplyUpdatesResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
