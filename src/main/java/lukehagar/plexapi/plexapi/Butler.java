/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import lukehagar.plexapi.plexapi.models.errors.SDKError;
import lukehagar.plexapi.plexapi.models.operations.SDKMethodInterfaces.*;
import lukehagar.plexapi.plexapi.utils.HTTPClient;
import lukehagar.plexapi.plexapi.utils.HTTPRequest;
import lukehagar.plexapi.plexapi.utils.JSON;
import lukehagar.plexapi.plexapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Butler is the task manager of the Plex Media Server Ecosystem.
 * 
 */
public class Butler implements
            MethodCallGetButlerTasks,
            MethodCallStartAllTasks,
            MethodCallStopAllTasks,
            MethodCallStartTask,
            MethodCallStopTask {

    private final SDKConfiguration sdkConfiguration;

    Butler(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public lukehagar.plexapi.plexapi.models.operations.GetButlerTasksRequestBuilder getButlerTasks() {
        return new lukehagar.plexapi.plexapi.models.operations.GetButlerTasksRequestBuilder(this);
    }

    /**
     * Get Butler tasks
     * Returns a list of butler tasks
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponse getButlerTasksDirect() throws Exception {

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/butler");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetButlerTasksResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetButlerTasksButlerResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetButlerTasksButlerResponseBody>() {});
                res.withFourHundredAndOneApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.StartAllTasksRequestBuilder startAllTasks() {
        return new lukehagar.plexapi.plexapi.models.operations.StartAllTasksRequestBuilder(this);
    }

    /**
     * Start all Butler tasks
     * This endpoint will attempt to start all Butler tasks that are enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponse startAllTasksDirect() throws Exception {

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/butler");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.StartAllTasksResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.StopAllTasksRequestBuilder stopAllTasks() {
        return new lukehagar.plexapi.plexapi.models.operations.StopAllTasksRequestBuilder(this);
    }

    /**
     * Stop all Butler tasks
     * This endpoint will stop all currently running tasks and remove any scheduled tasks from the queue.
     * 
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponse stopAllTasksDirect() throws Exception {

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/butler");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.StopAllTasksResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.StartTaskRequestBuilder startTask() {
        return new lukehagar.plexapi.plexapi.models.operations.StartTaskRequestBuilder(this);
    }

    /**
     * Start a single Butler task
     * This endpoint will attempt to start a single Butler task that is enabled in the settings. Butler tasks normally run automatically during a time window configured on the server's Settings page but can be manually started using this endpoint. Tasks will run with the following criteria:
     * 1. Any tasks not scheduled to run on the current day will be skipped.
     * 2. If a task is configured to run at a random time during the configured window and we are outside that window, the task will start immediately.
     * 3. If a task is configured to run at a random time during the configured window and we are within that window, the task will be scheduled at a random time within the window.
     * 4. If we are outside the configured window, the task will start immediately.
     * 
     * @param taskName the name of the task to be started.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.StartTaskResponse startTask(
            lukehagar.plexapi.plexapi.models.operations.TaskName taskName) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.StartTaskRequest request =
            lukehagar.plexapi.plexapi.models.operations.StartTaskRequest
                .builder()
                .taskName(taskName)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.StartTaskRequest.class,
                baseUrl,
                "/butler/{taskName}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.StartTaskResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.StartTaskResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.StartTaskResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 202 || httpRes.statusCode() == 400) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.StartTaskResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.StartTaskResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.StopTaskRequestBuilder stopTask() {
        return new lukehagar.plexapi.plexapi.models.operations.StopTaskRequestBuilder(this);
    }

    /**
     * Stop a single Butler task
     * This endpoint will stop a currently running task by name, or remove it from the list of scheduled tasks if it exists. See the section above for a list of task names for this endpoint.
     * 
     * @param taskName The name of the task to be started.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.StopTaskResponse stopTask(
            lukehagar.plexapi.plexapi.models.operations.PathParamTaskName taskName) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.StopTaskRequest request =
            lukehagar.plexapi.plexapi.models.operations.StopTaskRequest
                .builder()
                .taskName(taskName)
                .build();
        

        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(
                this.sdkConfiguration.serverUrl, this.sdkConfiguration.getServerVariableDefaults());

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.StopTaskRequest.class,
                baseUrl,
                "/butler/{taskName}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = lukehagar.plexapi.plexapi.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.StopTaskResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.StopTaskResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.StopTaskResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200 || httpRes.statusCode() == 400 || httpRes.statusCode() == 404) {
        } else if (httpRes.statusCode() == 401) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.StopTaskResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.StopTaskResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
