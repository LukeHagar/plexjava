/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package lukehagar.plexapi.plexapi;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Optional;
import lukehagar.plexapi.plexapi.models.errors.SDKError;
import lukehagar.plexapi.plexapi.models.operations.SDKMethodInterfaces.*;
import lukehagar.plexapi.plexapi.utils.HTTPClient;
import lukehagar.plexapi.plexapi.utils.HTTPRequest;
import lukehagar.plexapi.plexapi.utils.JSON;
import lukehagar.plexapi.plexapi.utils.Utils;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * API Calls that perform operations directly against https://Plex.tv
 * 
 */
public class Plex implements
            MethodCallGetPin,
            MethodCallGetToken {
    
    /**
     * GET_PIN_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_PIN_SERVERS = {
        "https://plex.tv/api/v2",
    };
    
    /**
     * GET_TOKEN_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] GET_TOKEN_SERVERS = {
        "https://plex.tv/api/v2",
    };

    private final SDKConfiguration sdkConfiguration;

    Plex(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public lukehagar.plexapi.plexapi.models.operations.GetPinRequestBuilder getPin() {
        return new lukehagar.plexapi.plexapi.models.operations.GetPinRequestBuilder(this);
    }

    /**
     * Get a Pin
     * Retrieve a Pin from Plex.tv for authentication flows
     * @param strong Determines the kind of code returned by the API call
    Strong codes are used for Pin authentication flows
    Non-Strong codes are used for `Plex.tv/link`

     * @param xPlexClientIdentifier The unique identifier for the client application
    This is used to track the client application and its usage
    (UUID, serial number, or other number unique per device)

     * @param serverURL Overrides the server URL.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetPinResponse getPin(
            Optional<? extends Boolean> strong,
            String xPlexClientIdentifier,
            java.util.Optional<String> serverURL) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.GetPinRequest request =
            lukehagar.plexapi.plexapi.models.operations.GetPinRequest
                .builder()
                .strong(strong)
                .xPlexClientIdentifier(xPlexClientIdentifier)
                .build();
        
        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(GET_PIN_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                baseUrl,
                "/pins");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = lukehagar.plexapi.plexapi.utils.Utils.getQueryParams(
                lukehagar.plexapi.plexapi.models.operations.GetPinRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        java.util.Map<String, java.util.List<String>> headers = lukehagar.plexapi.plexapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetPinResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetPinResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetPinResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPinResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPinResponseBody>() {});
                res.withTwoHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        } else if (httpRes.statusCode() == 400) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetPinPlexResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetPinPlexResponseBody>() {});
                res.withFourHundredApplicationJsonObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public lukehagar.plexapi.plexapi.models.operations.GetTokenRequestBuilder getToken() {
        return new lukehagar.plexapi.plexapi.models.operations.GetTokenRequestBuilder(this);
    }

    /**
     * Get Access Token
     * Retrieve an Access Token from Plex.tv after the Pin has already been authenticated
     * @param pinID The PinID to retrieve an access token for
     * @param xPlexClientIdentifier The unique identifier for the client application
    This is used to track the client application and its usage
    (UUID, serial number, or other number unique per device)

     * @param serverURL Overrides the server URL.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public lukehagar.plexapi.plexapi.models.operations.GetTokenResponse getToken(
            String pinID,
            String xPlexClientIdentifier,
            java.util.Optional<String> serverURL) throws Exception {
        lukehagar.plexapi.plexapi.models.operations.GetTokenRequest request =
            lukehagar.plexapi.plexapi.models.operations.GetTokenRequest
                .builder()
                .pinID(pinID)
                .xPlexClientIdentifier(xPlexClientIdentifier)
                .build();
        
        String baseUrl = lukehagar.plexapi.plexapi.utils.Utils.templateUrl(GET_TOKEN_SERVERS[0], new java.util.HashMap<String, String>());
        if (serverURL.isPresent() && !serverURL.get().isBlank()) {
            baseUrl = serverURL.get();
        }

        String url = lukehagar.plexapi.plexapi.utils.Utils.generateURL(
                lukehagar.plexapi.plexapi.models.operations.GetTokenRequest.class,
                baseUrl,
                "/pins/{pinID}",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.Map<String, java.util.List<String>> headers = lukehagar.plexapi.plexapi.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        lukehagar.plexapi.plexapi.models.operations.GetTokenResponse.Builder resBuilder = 
            lukehagar.plexapi.plexapi.models.operations.GetTokenResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        lukehagar.plexapi.plexapi.models.operations.GetTokenResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
        } else if (httpRes.statusCode() == 400) {
            if (lukehagar.plexapi.plexapi.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                lukehagar.plexapi.plexapi.models.operations.GetTokenResponseBody out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<lukehagar.plexapi.plexapi.models.operations.GetTokenResponseBody>() {});
                res.withObject(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
