/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import dev.plexapi.sdk.models.operations.AddPlaylistContentsMediaContainer;
import dev.plexapi.sdk.models.operations.AddPlaylistContentsMetadata;
import dev.plexapi.sdk.models.operations.AddPlaylistContentsResponse;
import dev.plexapi.sdk.models.operations.AddPlaylistContentsResponseBody;
import dev.plexapi.sdk.models.operations.ClearPlaylistContentsResponse;
import dev.plexapi.sdk.models.operations.CreatePlaylistMediaContainer;
import dev.plexapi.sdk.models.operations.CreatePlaylistMetadata;
import dev.plexapi.sdk.models.operations.CreatePlaylistQueryParamType;
import dev.plexapi.sdk.models.operations.CreatePlaylistRequest;
import dev.plexapi.sdk.models.operations.CreatePlaylistResponse;
import dev.plexapi.sdk.models.operations.CreatePlaylistResponseBody;
import dev.plexapi.sdk.models.operations.DeletePlaylistResponse;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsCountry;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsDirector;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsGenre;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsMedia;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsMediaContainer;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsMetadata;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsPart;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsQueryParamType;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsResponse;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsResponseBody;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsRole;
import dev.plexapi.sdk.models.operations.GetPlaylistContentsWriter;
import dev.plexapi.sdk.models.operations.GetPlaylistMediaContainer;
import dev.plexapi.sdk.models.operations.GetPlaylistMetadata;
import dev.plexapi.sdk.models.operations.GetPlaylistResponse;
import dev.plexapi.sdk.models.operations.GetPlaylistResponseBody;
import dev.plexapi.sdk.models.operations.GetPlaylistsMediaContainer;
import dev.plexapi.sdk.models.operations.GetPlaylistsMetadata;
import dev.plexapi.sdk.models.operations.GetPlaylistsResponse;
import dev.plexapi.sdk.models.operations.GetPlaylistsResponseBody;
import dev.plexapi.sdk.models.operations.PlaylistType;
import dev.plexapi.sdk.models.operations.QueryParamForce;
import dev.plexapi.sdk.models.operations.QueryParamSmart;
import dev.plexapi.sdk.models.operations.Smart;
import dev.plexapi.sdk.models.operations.UpdatePlaylistResponse;
import dev.plexapi.sdk.models.operations.UploadPlaylistResponse;
import java.lang.Exception;
import java.time.LocalDate;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class PlaylistsTests { 

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_CreatePlaylist() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        CreatePlaylistRequest req = CreatePlaylistRequest.builder()
                .title("<value>")
                .type(CreatePlaylistQueryParamType.PHOTO)
                .smart(Smart.ONE)
                .uri("https://comfortable-eyebrow.info/")
                .build();

        CreatePlaylistResponse res = sdk.playlists().createPlaylist()
                .request(req)
                .call();

        assertEquals(
            CreatePlaylistResponseBody.builder()
        .mediaContainer(CreatePlaylistMediaContainer.builder()
            .size(7)
            .metadata(List.of(
                CreatePlaylistMetadata.builder()
                    .ratingKey("96")
                    .key("/playlists/96/items")
                    .guid("com.plexapp.agents.none://a2f92937-1408-40e2-b022-63a8a9377e55")
                    .type("playlist")
                    .title("A Great Playlist")
                    .summary("What a great playlist")
                    .smart(false)
                    .playlistType("video")
                    .icon("playlist://image.smart")
                    .viewCount(1)
                    .lastViewedAt(1705719589)
                    .leafCount(1)
                    .addedAt(1705719589)
                    .updatedAt(1705724593)
                    .composite("/playlists/96/composite/1705724593")
                    .duration(141000)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_GetPlaylists() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetPlaylistsResponse res = sdk.playlists().getPlaylists()
                .playlistType(PlaylistType.VIDEO)
                .smart(QueryParamSmart.ZERO)
                .call();

        assertEquals(
            GetPlaylistsResponseBody.builder()
        .mediaContainer(GetPlaylistsMediaContainer.builder()
            .size(4)
            .metadata(List.of(
                GetPlaylistsMetadata.builder()
                    .ratingKey("92")
                    .key("/playlists/92/items")
                    .guid("com.plexapp.agents.none://7ca5aaef-58e8-4828-9e21-c009c97f2903")
                    .type("playlist")
                    .title("Static Playlist")
                    .summary("A Great Playlist")
                    .smart(false)
                    .playlistType("video")
                    .composite("/playlists/92/composite/1705716440")
                    .icon("playlist://image.smart")
                    .viewCount(1)
                    .lastViewedAt(1705716298)
                    .duration(7328000)
                    .leafCount(32)
                    .addedAt(1705716298)
                    .updatedAt(1705716440)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_GetPlaylist() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetPlaylistResponse res = sdk.playlists().getPlaylist()
                .playlistID(9883.74d)
                .call();

        assertEquals(
            GetPlaylistResponseBody.builder()
        .mediaContainer(GetPlaylistMediaContainer.builder()
            .size(1)
            .metadata(List.of(
                GetPlaylistMetadata.builder()
                    .content("library://x/directory/%2Flibrary%2Fsections%2F1%2Fall%3Ftype%3D1%26push%3D1%26title%3D2%26or%3D1%26title%3DSerenity%26pop%3D1")
                    .ratingKey("95")
                    .key("/playlists/95/items")
                    .guid("com.plexapp.agents.none://87425529-380f-44b8-a689-9a0537e7ec91")
                    .type("playlist")
                    .title("Smart Movie Playlist")
                    .summary("")
                    .smart(true)
                    .playlistType("video")
                    .composite("/playlists/95/composite/1705717387")
                    .icon("playlist://image.smart")
                    .duration(282000)
                    .leafCount(2)
                    .addedAt(1705716493)
                    .updatedAt(1705717387)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_DeletePlaylist() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        DeletePlaylistResponse res = sdk.playlists().deletePlaylist()
                .playlistID(1020.45d)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_UpdatePlaylist() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        UpdatePlaylistResponse res = sdk.playlists().updatePlaylist()
                .playlistID(2088.77d)
                .title("<value>")
                .summary("<value>")
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_GetPlaylistContents() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetPlaylistContentsResponse res = sdk.playlists().getPlaylistContents()
                .playlistID(1613.10d)
                .type(GetPlaylistContentsQueryParamType.TvShow)
                .call();

        assertEquals(
            GetPlaylistContentsResponseBody.builder()
        .mediaContainer(GetPlaylistContentsMediaContainer.builder()
            .size(2)
            .composite("/playlists/95/composite/1705717521")
            .duration(282)
            .leafCount(2)
            .playlistType("video")
            .ratingKey("95")
            .smart(true)
            .title("Smart Movie Playlist")
            .metadata(List.of(
                GetPlaylistContentsMetadata.builder()
                    .ratingKey("17")
                    .key("/library/metadata/17")
                    .guid("plex://movie/5d77683f6f4521001ea9dc53")
                    .studio("Universal Pictures")
                    .type("movie")
                    .title("Serenity")
                    .titleSort("Amazing Spider-Man 2")
                    .librarySectionTitle("Movies")
                    .librarySectionID(1)
                    .librarySectionKey("/library/sections/1")
                    .contentRating("PG-13")
                    .summary("Serenity continues the story of the TV series it was based upon (\"Firefly\"). River Tam had a secret - one in which she's not even aware - so dangerous, no one's safe, as an Alliance operative's sent to capture her, and all others are considered irrelevant to his job.")
                    .rating(8.2d)
                    .audienceRating(9.1d)
                    .year(2005)
                    .tagline("They aim to misbehave.")
                    .thumb("/library/metadata/17/thumb/1705637165")
                    .art("/library/metadata/17/art/1705637165")
                    .duration(141416)
                    .originallyAvailableAt(LocalDate.parse("2005-09-29T00:00:00Z"))
                    .addedAt(1705637164)
                    .updatedAt(1705637165)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .hasPremiumExtras("1")
                    .hasPremiumPrimaryExtra("1")
                    .ratingImage("rottentomatoes://image.rating.ripe")
                    .media(List.of(
                        GetPlaylistContentsMedia.builder()
                            .id(15)
                            .duration(141416)
                            .bitrate(2273)
                            .width(1920)
                            .height(814)
                            .aspectRatio(2.35d)
                            .audioChannels(2)
                            .audioCodec("aac")
                            .videoCodec("h264")
                            .videoResolution("1080")
                            .container("mp4")
                            .videoFrameRate("24p")
                            .optimizedForStreaming(0)
                            .audioProfile("lc")
                            .has64bitOffsets(false)
                            .videoProfile("high")
                            .part(List.of(
                                GetPlaylistContentsPart.builder()
                                    .id(15)
                                    .key("/library/parts/15/1705637151/file.mp4")
                                    .duration(141416)
                                    .file("/movies/Serenity (2005)/Serenity (2005).mp4")
                                    .size(40271948)
                                    .audioProfile("lc")
                                    .container("mp4")
                                    .has64bitOffsets(false)
                                    .optimizedForStreaming(false)
                                    .videoProfile("high")
                                    .build()))
                            .build()))
                    .genre(List.of(
                        GetPlaylistContentsGenre.builder()
                            .tag("Action")
                            .build()))
                    .country(List.of(
                        GetPlaylistContentsCountry.builder()
                            .tag("United States of America")
                            .build()))
                    .director(List.of(
                        GetPlaylistContentsDirector.builder()
                            .tag("Joss Whedon")
                            .build()))
                    .writer(List.of(
                        GetPlaylistContentsWriter.builder()
                            .tag("Joss Whedon")
                            .build()))
                    .role(List.of(
                        GetPlaylistContentsRole.builder()
                            .tag("Gina Torres")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_ClearPlaylistContents() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        ClearPlaylistContentsResponse res = sdk.playlists().clearPlaylistContents()
                .playlistID(6531.08d)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_AddPlaylistContents() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        AddPlaylistContentsResponse res = sdk.playlists().addPlaylistContents()
                .playlistID(2532.92d)
                .uri("server://12345/com.plexapp.plugins.library/library/metadata/1")
                .playQueueID(123d)
                .call();

        assertEquals(
            AddPlaylistContentsResponseBody.builder()
        .mediaContainer(AddPlaylistContentsMediaContainer.builder()
            .size(1)
            .leafCountAdded(1)
            .leafCountRequested(1)
            .metadata(List.of(
                AddPlaylistContentsMetadata.builder()
                    .ratingKey("94")
                    .key("/playlists/94/items")
                    .guid("com.plexapp.agents.none://972e3047-83d6-4848-a000-261f0af26ba2")
                    .type("playlist")
                    .title("A great playlist")
                    .summary("One of my great playlists")
                    .smart(false)
                    .playlistType("video")
                    .composite("/playlists/94/composite/1705800070")
                    .duration(423000)
                    .leafCount(3)
                    .addedAt(1705716458)
                    .updatedAt(1705800070)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testPlaylists_UploadPlaylist() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        UploadPlaylistResponse res = sdk.playlists().uploadPlaylist()
                .path("/home/barkley/playlist.m3u")
                .force(QueryParamForce.ZERO)
                .sectionID(1L)
                .call();


    }

}