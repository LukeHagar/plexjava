/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import dev.plexapi.sdk.models.operations.ActiveDirection;
import dev.plexapi.sdk.models.operations.DefaultDirection;
import dev.plexapi.sdk.models.operations.DeleteLibraryResponse;
import dev.plexapi.sdk.models.operations.Field;
import dev.plexapi.sdk.models.operations.FieldType;
import dev.plexapi.sdk.models.operations.Force;
import dev.plexapi.sdk.models.operations.GetAllLibrariesDirectory;
import dev.plexapi.sdk.models.operations.GetAllLibrariesMediaContainer;
import dev.plexapi.sdk.models.operations.GetAllLibrariesResponse;
import dev.plexapi.sdk.models.operations.GetAllLibrariesResponseBody;
import dev.plexapi.sdk.models.operations.GetFileHashResponse;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsDirectory;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsField;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsFieldType;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsFilter;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsMediaContainer;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsOperator;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsResponse;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsResponseBody;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsSort;
import dev.plexapi.sdk.models.operations.GetLibraryDetailsType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsActiveDirection;
import dev.plexapi.sdk.models.operations.GetLibraryItemsCollection;
import dev.plexapi.sdk.models.operations.GetLibraryItemsCountry;
import dev.plexapi.sdk.models.operations.GetLibraryItemsDefaultDirection;
import dev.plexapi.sdk.models.operations.GetLibraryItemsDirector;
import dev.plexapi.sdk.models.operations.GetLibraryItemsField;
import dev.plexapi.sdk.models.operations.GetLibraryItemsFieldType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsFilter;
import dev.plexapi.sdk.models.operations.GetLibraryItemsFlattenSeasons;
import dev.plexapi.sdk.models.operations.GetLibraryItemsGenre;
import dev.plexapi.sdk.models.operations.GetLibraryItemsHasThumbnail;
import dev.plexapi.sdk.models.operations.GetLibraryItemsImage;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryActiveDirection;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryDefaultDirection;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryField;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryFieldType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryFilter;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryOperator;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryResponse200Type;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryResponseType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibrarySort;
import dev.plexapi.sdk.models.operations.GetLibraryItemsLibraryType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMedia;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMediaContainer;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMediaGuid;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMeta;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMetaDataRating;
import dev.plexapi.sdk.models.operations.GetLibraryItemsMetadata;
import dev.plexapi.sdk.models.operations.GetLibraryItemsOperator;
import dev.plexapi.sdk.models.operations.GetLibraryItemsOptimizedForStreaming;
import dev.plexapi.sdk.models.operations.GetLibraryItemsPart;
import dev.plexapi.sdk.models.operations.GetLibraryItemsQueryParamIncludeMeta;
import dev.plexapi.sdk.models.operations.GetLibraryItemsQueryParamType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsRequest;
import dev.plexapi.sdk.models.operations.GetLibraryItemsResponse;
import dev.plexapi.sdk.models.operations.GetLibraryItemsResponseBody;
import dev.plexapi.sdk.models.operations.GetLibraryItemsRole;
import dev.plexapi.sdk.models.operations.GetLibraryItemsShowOrdering;
import dev.plexapi.sdk.models.operations.GetLibraryItemsSort;
import dev.plexapi.sdk.models.operations.GetLibraryItemsStream;
import dev.plexapi.sdk.models.operations.GetLibraryItemsType;
import dev.plexapi.sdk.models.operations.GetLibraryItemsUltraBlurColors;
import dev.plexapi.sdk.models.operations.GetLibraryItemsWriter;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyCountry;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyDirector;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyGenre;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyMedia;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyMediaContainer;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyMetadata;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyPart;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyResponse;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyResponseBody;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyRole;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyStream;
import dev.plexapi.sdk.models.operations.GetMetaDataByRatingKeyWriter;
import dev.plexapi.sdk.models.operations.GetMetadataChildrenDirectory;
import dev.plexapi.sdk.models.operations.GetMetadataChildrenMediaContainer;
import dev.plexapi.sdk.models.operations.GetMetadataChildrenMetadata;
import dev.plexapi.sdk.models.operations.GetMetadataChildrenResponse;
import dev.plexapi.sdk.models.operations.GetMetadataChildrenResponseBody;
import dev.plexapi.sdk.models.operations.GetOnDeckGuids;
import dev.plexapi.sdk.models.operations.GetOnDeckMedia;
import dev.plexapi.sdk.models.operations.GetOnDeckMediaContainer;
import dev.plexapi.sdk.models.operations.GetOnDeckMetadata;
import dev.plexapi.sdk.models.operations.GetOnDeckPart;
import dev.plexapi.sdk.models.operations.GetOnDeckResponse;
import dev.plexapi.sdk.models.operations.GetOnDeckResponseBody;
import dev.plexapi.sdk.models.operations.GetOnDeckStream;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryCountry;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryDirector;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryFilter;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryGenre;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryMedia;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryMediaContainer;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryMetadata;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryPart;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryRequest;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryResponse;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryResponseBody;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryRole;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryType;
import dev.plexapi.sdk.models.operations.GetRecentlyAddedLibraryWriter;
import dev.plexapi.sdk.models.operations.GetRefreshLibraryMetadataResponse;
import dev.plexapi.sdk.models.operations.GetSearchLibraryMediaContainer;
import dev.plexapi.sdk.models.operations.GetSearchLibraryMetadata;
import dev.plexapi.sdk.models.operations.GetSearchLibraryQueryParamType;
import dev.plexapi.sdk.models.operations.GetSearchLibraryResponse;
import dev.plexapi.sdk.models.operations.GetSearchLibraryResponseBody;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentCountry;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentGenre;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentGuids;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentMediaContainer;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentMetadata;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentQueryParamType;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentResponse;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentResponseBody;
import dev.plexapi.sdk.models.operations.GetTopWatchedContentRole;
import dev.plexapi.sdk.models.operations.Guids;
import dev.plexapi.sdk.models.operations.IncludeDetails;
import dev.plexapi.sdk.models.operations.IncludeGuids;
import dev.plexapi.sdk.models.operations.Location;
import dev.plexapi.sdk.models.operations.Operator;
import dev.plexapi.sdk.models.operations.Producer;
import dev.plexapi.sdk.models.operations.QueryParamIncludeMeta;
import dev.plexapi.sdk.models.operations.QueryParamType;
import dev.plexapi.sdk.models.operations.Ratings;
import dev.plexapi.sdk.models.operations.Sort;
import dev.plexapi.sdk.models.operations.Tag;
import dev.plexapi.sdk.models.operations.User;
import java.lang.Exception;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class LibraryTests { 

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetFileHash() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetFileHashResponse res = sdk.library().getFileHash()
                .url("file://C:\Image.png&type=13")
                .type(187.90d)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetRecentlyAddedLibrary() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetRecentlyAddedLibraryRequest req = GetRecentlyAddedLibraryRequest.builder()
                .type(QueryParamType.TvShow)
                .contentDirectoryID(2L)
                .pinnedContentDirectoryID(List.of(
                    3L,
                    5L,
                    7L,
                    13L,
                    12L,
                    1L,
                    6L,
                    14L,
                    2L,
                    10L,
                    16L,
                    17L))
                .sectionID(2L)
                .includeMeta(QueryParamIncludeMeta.Enable)
                .xPlexContainerStart(0)
                .xPlexContainerSize(50)
                .build();

        GetRecentlyAddedLibraryResponse res = sdk.library().getRecentlyAddedLibrary()
                .request(req)
                .call();

        assertEquals(
            GetRecentlyAddedLibraryResponseBody.builder()
        .mediaContainer(GetRecentlyAddedLibraryMediaContainer.builder()
            .type(List.of(
                GetRecentlyAddedLibraryType.builder()
                    .key("/library/sections/2/all?type=2")
                    .type("show")
                    .title("TV Shows")
                    .active(false)
                    .filter(List.of(
                        GetRecentlyAddedLibraryFilter.builder()
                            .filter("genre")
                            .filterType("string")
                            .key("/library/sections/2/genre?type=2")
                            .title("Genre")
                            .type("filter")
                            .build()))
                    .sort(List.of(
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build(),
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build(),
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build()))
                    .field(List.of(
                        Field.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build(),
                        Field.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build()))
                    .build(),
                GetRecentlyAddedLibraryType.builder()
                    .key("/library/sections/2/all?type=2")
                    .type("show")
                    .title("TV Shows")
                    .active(false)
                    .filter(List.of(
                        GetRecentlyAddedLibraryFilter.builder()
                            .filter("genre")
                            .filterType("string")
                            .key("/library/sections/2/genre?type=2")
                            .title("Genre")
                            .type("filter")
                            .build()))
                    .sort(List.of(
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build(),
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build(),
                        Sort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(ActiveDirection.Ascending)
                            .defaultDirection(DefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build()))
                    .field(List.of(
                        Field.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build(),
                        Field.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build()))
                    .build()))
            .fieldType(List.of(
                FieldType.builder()
                    .type("tag")
                    .operator(List.of(
                        Operator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build()))
            .size(50d)
            .identifier("com.plexapp.plugins.library")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1680021154d)
            .metadata(List.of(
                GetRecentlyAddedLibraryMetadata.builder()
                    .librarySectionID(1d)
                    .librarySectionTitle("Movies")
                    .librarySectionUUID("322a231a-b7f7-49f5-920f-14c61199cd30")
                    .ratingKey(59398d)
                    .key("/library/metadata/59398")
                    .guid("plex://movie/5e161a83bea6ac004126e148")
                    .studio("Marvel Studios")
                    .type("movie")
                    .title("Ant-Man and the Wasp: Quantumania")
                    .contentRating("PG-13")
                    .summary("Scott Lang and Hope Van Dyne along with Hank Pym and Janet Van Dyne explore the Quantum Realm where they interact with strange creatures and embark on an adventure that goes beyond the limits of what they thought was possible.")
                    .rating(4.7d)
                    .audienceRating(8.3d)
                    .year(2023d)
                    .tagline("Witness the beginning of a new dynasty.")
                    .thumb("/library/metadata/59398/thumb/1681888010")
                    .art("/library/metadata/59398/art/1681888010")
                    .duration(7474422d)
                    .originallyAvailableAt(OffsetDateTime.parse("2023-02-15T00:00:00Z"))
                    .addedAt(1681803215d)
                    .updatedAt(1681888010d)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .chapterSource("media")
                    .primaryExtraKey("/library/metadata/59399")
                    .ratingImage("rottentomatoes://image.rating.rotten")
                    .media(List.of(
                        GetRecentlyAddedLibraryMedia.builder()
                            .id(120345d)
                            .duration(7474422d)
                            .bitrate(3623d)
                            .width(1920d)
                            .height(804d)
                            .aspectRatio(2.35d)
                            .audioChannels(6d)
                            .audioCodec("ac3")
                            .videoCodec("h264")
                            .videoResolution(1080d)
                            .container("mp4")
                            .videoFrameRate("24p")
                            .optimizedForStreaming(0d)
                            .videoProfile("high")
                            .part(List.of(
                                GetRecentlyAddedLibraryPart.builder()
                                    .id(120353d)
                                    .key("/library/parts/120353/1681803203/file.mp4")
                                    .duration(7474422d)
                                    .file("/movies/Ant-Man and the Wasp Quantumania (2023)/Ant-Man.and.the.Wasp.Quantumania.2023.1080p.mp4")
                                    .size(3395307162d)
                                    .container("mp4")
                                    .hasThumbnail(1d)
                                    .videoProfile("high")
                                    .build()))
                            .build()))
                    .genre(List.of(
                        GetRecentlyAddedLibraryGenre.builder()
                            .tag("Comedy")
                            .build()))
                    .director(List.of(
                        GetRecentlyAddedLibraryDirector.builder()
                            .tag("Peyton Reed")
                            .build()))
                    .writer(List.of(
                        GetRecentlyAddedLibraryWriter.builder()
                            .tag("Jeff Loveness")
                            .build()))
                    .country(List.of(
                        GetRecentlyAddedLibraryCountry.builder()
                            .tag("United States of America")
                            .build()))
                    .role(List.of(
                        GetRecentlyAddedLibraryRole.builder()
                            .tag("Paul Rudd")
                            .build(),
                        GetRecentlyAddedLibraryRole.builder()
                            .tag("Paul Rudd")
                            .build(),
                        GetRecentlyAddedLibraryRole.builder()
                            .tag("Paul Rudd")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetAllLibraries() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetAllLibrariesResponse res = sdk.library().getAllLibraries()
                .call();

        assertEquals(
            GetAllLibrariesResponseBody.builder()
        .mediaContainer(GetAllLibrariesMediaContainer.builder()
            .size(5)
            .allowSync(false)
            .title1("Plex Library")
            .directory(List.of(
                GetAllLibrariesDirectory.builder()
                    .allowSync(true)
                    .art("/:/resources/movie-fanart.jpg")
                    .composite("/library/sections/1/composite/1705615584")
                    .filters(true)
                    .refreshing(false)
                    .thumb("/:/resources/movie.png")
                    .key("1")
                    .type("movie")
                    .title("Movies")
                    .agent("tv.plex.agents.movie")
                    .scanner("Plex Movie")
                    .language("en-US")
                    .uuid("322a231a-b7f7-49f5-920f-14c61199cd30")
                    .updatedAt(1556281940L)
                    .createdAt(1556281940L)
                    .scannedAt(1556281940L)
                    .content(true)
                    .directory(true)
                    .contentChangedAt(1556281940L)
                    .hidden(0)
                    .location(List.of(
                        Location.builder()
                            .id(1)
                            .path("/movies")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetLibraryDetails() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetLibraryDetailsResponse res = sdk.library().getLibraryDetails()
                .sectionKey(9518)
                .includeDetails(IncludeDetails.ONE)
                .call();

        assertEquals(
            GetLibraryDetailsResponseBody.builder()
        .mediaContainer(GetLibraryDetailsMediaContainer.builder()
            .size(29)
            .allowSync(false)
            .art("/:/resources/movie-fanart.jpg")
            .content("secondary")
            .identifier("com.plexapp.plugins.library")
            .librarySectionID(1)
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .thumb("/:/resources/movie.png")
            .title1("Movies")
            .viewGroup("secondary")
            .viewMode(65592)
            .directory(List.of(
                GetLibraryDetailsDirectory.builder()
                    .key("search?type=1")
                    .title("Search...")
                    .secondary(true)
                    .prompt("Search Movies")
                    .search(true)
                    .build()))
            .type(List.of(
                GetLibraryDetailsType.builder()
                    .key("/library/sections/1/all?type=1")
                    .type("movie")
                    .title("Movies")
                    .active(false)
                    .filter(List.of(
                        GetLibraryDetailsFilter.builder()
                            .filter("label")
                            .filterType("string")
                            .key("/library/sections/1/label")
                            .title("Labels")
                            .type("filter")
                            .build()))
                    .sort(List.of(
                        GetLibraryDetailsSort.builder()
                            .default_("asc")
                            .defaultDirection("desc")
                            .descKey("random:desc")
                            .firstCharacterKey("/library/sections/1/firstCharacter")
                            .key("random")
                            .title("Randomly")
                            .build()))
                    .field(List.of(
                        GetLibraryDetailsField.builder()
                            .key("label")
                            .title("Label")
                            .type("tag")
                            .subType("bitrate")
                            .build()))
                    .build()))
            .fieldType(List.of(
                GetLibraryDetailsFieldType.builder()
                    .type("resolution")
                    .operator(List.of(
                        GetLibraryDetailsOperator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_DeleteLibrary() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        DeleteLibraryResponse res = sdk.library().deleteLibrary()
                .sectionKey(9518)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetLibraryItems_() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetLibraryItemsRequest req = GetLibraryItemsRequest.builder()
                .sectionKey(9518)
                .tag(Tag.DIRECTOR)
                .includeGuids(IncludeGuids.Enable)
                .type(GetLibraryItemsQueryParamType.TvShow)
                .includeMeta(GetLibraryItemsQueryParamIncludeMeta.Enable)
                .xPlexContainerStart(0)
                .xPlexContainerSize(50)
                .build();

        GetLibraryItemsResponse res = sdk.library().getLibraryItems()
                .request(req)
                .call();

        assertEquals(
            GetLibraryItemsResponseBody.builder()
        .mediaContainer(GetLibraryItemsMediaContainer.builder()
            .size(70)
            .totalSize(170)
            .offset(0)
            .content("secondary")
            .allowSync(true)
            .art("/:/resources/movie-fanart.jpg")
            .identifier("com.plexapp.plugins.library")
            .librarySectionID(1L)
            .librarySectionTitle("Movies")
            .librarySectionUUID("322a231a-b7f7-49f5-920f-14c61199cd30")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .thumb("/:/resources/movie.png")
            .title1("Movies")
            .title2("Recently Released")
            .viewGroup("movie")
            .metadata(List.of(
                GetLibraryItemsMetadata.builder()
                    .ratingKey("58683")
                    .key("/library/metadata/58683")
                    .guid("plex://movie/5d7768ba96b655001fdc0408")
                    .type(GetLibraryItemsLibraryType.Movie)
                    .title("Avatar: The Way of Water")
                    .summary("Jake Sully lives with his newfound family formed on the extrasolar moon Pandora. Once a familiar threat returns to finish what was previously started, Jake must work with Neytiri and the army of the Na'vi race to protect their home.")
                    .addedAt(1556281940L)
                    .studio("20th Century Studios")
                    .skipChildren(false)
                    .librarySectionID(1L)
                    .librarySectionTitle("Movies")
                    .librarySectionKey("/library/sections/1")
                    .slug("4-for-texas")
                    .contentRating("PG-13")
                    .rating(7.6d)
                    .audienceRating(9.2d)
                    .year(2022)
                    .seasonCount(2022)
                    .tagline("Return to Pandora.")
                    .flattenSeasons(GetLibraryItemsFlattenSeasons.True)
                    .showOrdering(GetLibraryItemsShowOrdering.Dvd)
                    .thumb("/library/metadata/58683/thumb/1703239236")
                    .art("/library/metadata/58683/art/1703239236")
                    .banner("/library/metadata/58683/banner/1703239236")
                    .duration(11558112)
                    .originallyAvailableAt(LocalDate.parse("2022-12-14T00:00:00Z"))
                    .updatedAt(1556281940L)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .chapterSource("media")
                    .primaryExtraKey("/library/metadata/58684")
                    .ratingImage("rottentomatoes://image.rating.ripe")
                    .grandparentRatingKey("66")
                    .grandparentGuid("plex://show/5d9c081b170e24001f2a7be4")
                    .grandparentKey("/library/metadata/66")
                    .grandparentTitle("Caprica")
                    .grandparentThumb("/library/metadata/66/thumb/1705716261")
                    .parentSlug("alice-in-borderland-2020")
                    .grandparentSlug("alice-in-borderland-2020")
                    .grandparentArt("/library/metadata/66/art/1705716261")
                    .grandparentTheme("/library/metadata/66/theme/1705716261")
                    .media(List.of(
                        GetLibraryItemsMedia.builder()
                            .id(119534)
                            .duration(11558112)
                            .bitrate(25025)
                            .width(3840)
                            .height(2072)
                            .aspectRatio(1.85d)
                            .audioChannels(6)
                            .audioCodec("eac3")
                            .videoCodec("hevc")
                            .videoResolution("4k")
                            .container("mkv")
                            .videoFrameRate("24p")
                            .videoProfile("main 10")
                            .part(List.of(
                                GetLibraryItemsPart.builder()
                                    .id(119542)
                                    .key("/library/parts/119542/1680457526/file.mkv")
                                    .duration(11558112)
                                    .file("/movies/Avatar The Way of Water (2022)/Avatar.The.Way.of.Water.2022.2160p.WEB-DL.DDP5.1.Atmos.DV.HDR10.HEVC-CMRG.mkv")
                                    .size(36158371307L)
                                    .container("mkv")
                                    .videoProfile("main 10")
                                    .audioProfile("dts")
                                    .has64bitOffsets(false)
                                    .optimizedForStreaming(false)
                                    .indexes("sd")
                                    .hasThumbnail(GetLibraryItemsHasThumbnail.True)
                                    .stream(List.of(
                                        GetLibraryItemsStream.builder()
                                            .id(272796L)
                                            .streamType(1L)
                                            .codec("h264")
                                            .index(0L)
                                            .default_(true)
                                            .selected(true)
                                            .bitrate(6273L)
                                            .colorPrimaries("bt709")
                                            .colorRange("tv")
                                            .colorSpace("bt709")
                                            .colorTrc("bt709")
                                            .bitDepth(8L)
                                            .chromaLocation("left")
                                            .streamIdentifier("2")
                                            .chromaSubsampling("4:2:0")
                                            .codedHeight(1088L)
                                            .codedWidth(1920L)
                                            .frameRate(29.97d)
                                            .hasScalingMatrix(false)
                                            .hearingImpaired(false)
                                            .closedCaptions(false)
                                            .embeddedInVideo("1")
                                            .height(1080L)
                                            .level(40L)
                                            .profile("main")
                                            .refFrames(4L)
                                            .scanType("progressive")
                                            .width(1920L)
                                            .displayTitle("1080p (H.264)")
                                            .extendedDisplayTitle("1080p (H.264)")
                                            .channels(2L)
                                            .language("English")
                                            .languageTag("en")
                                            .languageCode("eng")
                                            .audioChannelLayout("stereo")
                                            .samplingRate(48000L)
                                            .title("English")
                                            .canAutoSync(false)
                                            .build()))
                                    .build()))
                            .audioProfile("dts")
                            .hasVoiceActivity(false)
                            .optimizedForStreaming(GetLibraryItemsOptimizedForStreaming.Enable)
                            .has64bitOffsets(false)
                            .build()))
                    .genre(List.of(
                        GetLibraryItemsGenre.builder()
                            .tag("Adventure")
                            .build()))
                    .country(List.of(
                        GetLibraryItemsCountry.builder()
                            .tag("United States of America")
                            .build()))
                    .director(List.of(
                        GetLibraryItemsDirector.builder()
                            .tag("James Cameron")
                            .build()))
                    .writer(List.of(
                        GetLibraryItemsWriter.builder()
                            .tag("James Cameron")
                            .build()))
                    .collection(List.of(
                        GetLibraryItemsCollection.builder()
                            .tag("Working NL Subs")
                            .build()))
                    .role(List.of(
                        GetLibraryItemsRole.builder()
                            .id(294129L)
                            .filter("actor=294129")
                            .thumb("https://metadata-static.plex.tv/2/people/27b85844536c39f3f9ac943aaad46608.jpg")
                            .tag("Mike Smith")
                            .tagKey("668e7e7b22bcad9064350c91")
                            .role("Self")
                            .build()))
                    .mediaGuid(List.of(
                        GetLibraryItemsMediaGuid.builder()
                            .id("imdb://tt13015952")
                            .build()))
                    .ultraBlurColors(GetLibraryItemsUltraBlurColors.builder()
                        .topLeft("11333b")
                        .topRight("0a232d")
                        .bottomRight("73958")
                        .bottomLeft("1f5066")
                        .build())
                    .metaDataRating(List.of(
                        GetLibraryItemsMetaDataRating.builder()
                            .image("themoviedb://image.rating")
                            .value(3f)
                            .type("audience")
                            .build()))
                    .image(List.of(
                        GetLibraryItemsImage.builder()
                            .alt("Episode 1")
                            .type(GetLibraryItemsLibraryResponse200Type.BACKGROUND)
                            .url("/library/metadata/45521/thumb/1644710589")
                            .build()))
                    .titleSort("Whale")
                    .viewCount(1)
                    .lastViewedAt(1682752242)
                    .originalTitle("映画 ブラッククローバー 魔法帝の剣")
                    .viewOffset(5222500)
                    .skipCount(1)
                    .index(1)
                    .theme("/library/metadata/1/theme/1705636920")
                    .leafCount(14)
                    .viewedLeafCount(0)
                    .childCount(1)
                    .hasPremiumExtras("1")
                    .hasPremiumPrimaryExtra("1")
                    .parentRatingKey("66")
                    .parentGuid("plex://show/5d9c081b170e24001f2a7be4")
                    .parentStudio("UCP")
                    .parentKey("/library/metadata/66")
                    .parentTitle("Caprica")
                    .parentIndex(1)
                    .parentYear(2010)
                    .parentThumb("/library/metadata/66/thumb/1705716261")
                    .parentTheme("/library/metadata/66/theme/1705716261")
                    .build()))
            .type(List.of(
                GetLibraryItemsType.builder()
                    .key("/library/sections/2/all?type=2")
                    .type("show")
                    .title("TV Shows")
                    .active(false)
                    .filter(List.of(
                        GetLibraryItemsFilter.builder()
                            .filter("genre")
                            .filterType("string")
                            .key("/library/sections/2/genre?type=2")
                            .title("Genre")
                            .type("filter")
                            .build()))
                    .sort(List.of(
                        GetLibraryItemsSort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(GetLibraryItemsActiveDirection.Ascending)
                            .defaultDirection(GetLibraryItemsDefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build()))
                    .field(List.of(
                        GetLibraryItemsField.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build()))
                    .build()))
            .fieldType(List.of(
                GetLibraryItemsFieldType.builder()
                    .type("tag")
                    .operator(List.of(
                        GetLibraryItemsOperator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build()))
            .nocache(true)
            .viewMode(65592)
            .mixedParents(true)
            .meta(GetLibraryItemsMeta.builder()
                .type(List.of(
                    GetLibraryItemsLibraryResponseType.builder()
                        .key("/library/sections/2/all?type=2")
                        .type("show")
                        .title("TV Shows")
                        .active(false)
                        .filter(List.of(
                            GetLibraryItemsLibraryFilter.builder()
                                .filter("genre")
                                .filterType("string")
                                .key("/library/sections/2/genre?type=2")
                                .title("Genre")
                                .type("filter")
                                .build()))
                        .sort(List.of(
                            GetLibraryItemsLibrarySort.builder()
                                .key("titleSort")
                                .title("Title")
                                .default_("asc")
                                .active(false)
                                .activeDirection(GetLibraryItemsLibraryActiveDirection.Ascending)
                                .defaultDirection(GetLibraryItemsLibraryDefaultDirection.Ascending)
                                .descKey("titleSort:desc")
                                .firstCharacterKey("/library/sections/2/firstCharacter")
                                .build()))
                        .field(List.of(
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build()))
                        .build()))
                .fieldType(List.of(
                    GetLibraryItemsLibraryFieldType.builder()
                        .type("tag")
                        .operator(List.of(
                            GetLibraryItemsLibraryOperator.builder()
                                .key("=")
                                .title("is")
                                .build()))
                        .build()))
                .build())
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetLibraryItems() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetLibraryItemsRequest req = GetLibraryItemsRequest.builder()
                .sectionKey(9518)
                .tag(Tag.DIRECTOR)
                .includeGuids(IncludeGuids.Enable)
                .type(GetLibraryItemsQueryParamType.TvShow)
                .includeMeta(GetLibraryItemsQueryParamIncludeMeta.Enable)
                .xPlexContainerStart(0)
                .xPlexContainerSize(50)
                .build();

        GetLibraryItemsResponse res = sdk.library().getLibraryItems()
                .request(req)
                .call();

        assertEquals(
            GetLibraryItemsResponseBody.builder()
        .mediaContainer(GetLibraryItemsMediaContainer.builder()
            .size(70)
            .totalSize(170)
            .offset(0)
            .content("secondary")
            .allowSync(true)
            .art("/:/resources/movie-fanart.jpg")
            .identifier("com.plexapp.plugins.library")
            .librarySectionID(1L)
            .librarySectionTitle("Movies")
            .librarySectionUUID("322a231a-b7f7-49f5-920f-14c61199cd30")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .thumb("/:/resources/movie.png")
            .title1("Movies")
            .title2("Recently Released")
            .viewGroup("movie")
            .metadata(List.of(
                GetLibraryItemsMetadata.builder()
                    .ratingKey("58683")
                    .key("/library/metadata/58683")
                    .guid("plex://movie/5d7768ba96b655001fdc0408")
                    .type(GetLibraryItemsLibraryType.Movie)
                    .title("Avatar: The Way of Water")
                    .summary("Jake Sully lives with his newfound family formed on the extrasolar moon Pandora. Once a familiar threat returns to finish what was previously started, Jake must work with Neytiri and the army of the Na'vi race to protect their home.")
                    .addedAt(1556281940L)
                    .studio("20th Century Studios")
                    .skipChildren(false)
                    .librarySectionID(1L)
                    .librarySectionTitle("Movies")
                    .librarySectionKey("/library/sections/1")
                    .slug("4-for-texas")
                    .contentRating("PG-13")
                    .rating(7.6d)
                    .audienceRating(9.2d)
                    .year(2022)
                    .seasonCount(2022)
                    .tagline("Return to Pandora.")
                    .flattenSeasons(GetLibraryItemsFlattenSeasons.True)
                    .showOrdering(GetLibraryItemsShowOrdering.Dvd)
                    .thumb("/library/metadata/58683/thumb/1703239236")
                    .art("/library/metadata/58683/art/1703239236")
                    .banner("/library/metadata/58683/banner/1703239236")
                    .duration(11558112)
                    .originallyAvailableAt(LocalDate.parse("2022-12-14T00:00:00Z"))
                    .updatedAt(1556281940L)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .chapterSource("media")
                    .primaryExtraKey("/library/metadata/58684")
                    .ratingImage("rottentomatoes://image.rating.ripe")
                    .grandparentRatingKey("66")
                    .grandparentGuid("plex://show/5d9c081b170e24001f2a7be4")
                    .grandparentKey("/library/metadata/66")
                    .grandparentTitle("Caprica")
                    .grandparentThumb("/library/metadata/66/thumb/1705716261")
                    .parentSlug("alice-in-borderland-2020")
                    .grandparentSlug("alice-in-borderland-2020")
                    .grandparentArt("/library/metadata/66/art/1705716261")
                    .grandparentTheme("/library/metadata/66/theme/1705716261")
                    .media(List.of(
                        GetLibraryItemsMedia.builder()
                            .id(119534)
                            .duration(11558112)
                            .bitrate(25025)
                            .width(3840)
                            .height(2072)
                            .aspectRatio(1.85d)
                            .audioChannels(6)
                            .audioCodec("eac3")
                            .videoCodec("hevc")
                            .videoResolution("4k")
                            .container("mkv")
                            .videoFrameRate("24p")
                            .videoProfile("main 10")
                            .part(List.of(
                                GetLibraryItemsPart.builder()
                                    .id(119542)
                                    .key("/library/parts/119542/1680457526/file.mkv")
                                    .duration(11558112)
                                    .file("/movies/Avatar The Way of Water (2022)/Avatar.The.Way.of.Water.2022.2160p.WEB-DL.DDP5.1.Atmos.DV.HDR10.HEVC-CMRG.mkv")
                                    .size(36158371307L)
                                    .container("mkv")
                                    .videoProfile("main 10")
                                    .audioProfile("dts")
                                    .has64bitOffsets(false)
                                    .optimizedForStreaming(false)
                                    .indexes("sd")
                                    .hasThumbnail(GetLibraryItemsHasThumbnail.True)
                                    .stream(List.of(
                                        GetLibraryItemsStream.builder()
                                            .id(272796L)
                                            .streamType(1L)
                                            .codec("h264")
                                            .index(0L)
                                            .default_(true)
                                            .selected(true)
                                            .bitrate(6273L)
                                            .colorPrimaries("bt709")
                                            .colorRange("tv")
                                            .colorSpace("bt709")
                                            .colorTrc("bt709")
                                            .bitDepth(8L)
                                            .chromaLocation("left")
                                            .streamIdentifier("2")
                                            .chromaSubsampling("4:2:0")
                                            .codedHeight(1088L)
                                            .codedWidth(1920L)
                                            .frameRate(29.97d)
                                            .hasScalingMatrix(false)
                                            .hearingImpaired(false)
                                            .closedCaptions(false)
                                            .embeddedInVideo("1")
                                            .height(1080L)
                                            .level(40L)
                                            .profile("main")
                                            .refFrames(4L)
                                            .scanType("progressive")
                                            .width(1920L)
                                            .displayTitle("1080p (H.264)")
                                            .extendedDisplayTitle("1080p (H.264)")
                                            .channels(2L)
                                            .language("English")
                                            .languageTag("en")
                                            .languageCode("eng")
                                            .audioChannelLayout("stereo")
                                            .samplingRate(48000L)
                                            .title("English")
                                            .canAutoSync(false)
                                            .build()))
                                    .build()))
                            .audioProfile("dts")
                            .hasVoiceActivity(false)
                            .optimizedForStreaming(GetLibraryItemsOptimizedForStreaming.Enable)
                            .has64bitOffsets(false)
                            .build()))
                    .genre(List.of(
                        GetLibraryItemsGenre.builder()
                            .tag("Adventure")
                            .build()))
                    .country(List.of(
                        GetLibraryItemsCountry.builder()
                            .tag("United States of America")
                            .build()))
                    .director(List.of(
                        GetLibraryItemsDirector.builder()
                            .tag("James Cameron")
                            .build()))
                    .writer(List.of(
                        GetLibraryItemsWriter.builder()
                            .tag("James Cameron")
                            .build()))
                    .collection(List.of(
                        GetLibraryItemsCollection.builder()
                            .tag("Working NL Subs")
                            .build()))
                    .role(List.of(
                        GetLibraryItemsRole.builder()
                            .id(294129L)
                            .filter("actor=294129")
                            .thumb("https://metadata-static.plex.tv/2/people/27b85844536c39f3f9ac943aaad46608.jpg")
                            .tag("Mike Smith")
                            .tagKey("668e7e7b22bcad9064350c91")
                            .role("Self")
                            .build()))
                    .mediaGuid(List.of(
                        GetLibraryItemsMediaGuid.builder()
                            .id("imdb://tt13015952")
                            .build()))
                    .ultraBlurColors(GetLibraryItemsUltraBlurColors.builder()
                        .topLeft("11333b")
                        .topRight("0a232d")
                        .bottomRight("73958")
                        .bottomLeft("1f5066")
                        .build())
                    .metaDataRating(List.of(
                        GetLibraryItemsMetaDataRating.builder()
                            .image("themoviedb://image.rating")
                            .value(3f)
                            .type("audience")
                            .build()))
                    .image(List.of(
                        GetLibraryItemsImage.builder()
                            .alt("Episode 1")
                            .type(GetLibraryItemsLibraryResponse200Type.BACKGROUND)
                            .url("/library/metadata/45521/thumb/1644710589")
                            .build()))
                    .titleSort("Whale")
                    .viewCount(1)
                    .lastViewedAt(1682752242)
                    .originalTitle("映画 ブラッククローバー 魔法帝の剣")
                    .viewOffset(5222500)
                    .skipCount(1)
                    .index(1)
                    .theme("/library/metadata/1/theme/1705636920")
                    .leafCount(14)
                    .viewedLeafCount(0)
                    .childCount(1)
                    .hasPremiumExtras("1")
                    .hasPremiumPrimaryExtra("1")
                    .parentRatingKey("66")
                    .parentGuid("plex://show/5d9c081b170e24001f2a7be4")
                    .parentStudio("UCP")
                    .parentKey("/library/metadata/66")
                    .parentTitle("Caprica")
                    .parentIndex(1)
                    .parentYear(2010)
                    .parentThumb("/library/metadata/66/thumb/1705716261")
                    .parentTheme("/library/metadata/66/theme/1705716261")
                    .build()))
            .type(List.of(
                GetLibraryItemsType.builder()
                    .key("/library/sections/2/all?type=2")
                    .type("show")
                    .title("TV Shows")
                    .active(false)
                    .filter(List.of(
                        GetLibraryItemsFilter.builder()
                            .filter("genre")
                            .filterType("string")
                            .key("/library/sections/2/genre?type=2")
                            .title("Genre")
                            .type("filter")
                            .build(),
                        GetLibraryItemsFilter.builder()
                            .filter("genre")
                            .filterType("string")
                            .key("/library/sections/2/genre?type=2")
                            .title("Genre")
                            .type("filter")
                            .build()))
                    .sort(List.of(
                        GetLibraryItemsSort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(GetLibraryItemsActiveDirection.Ascending)
                            .defaultDirection(GetLibraryItemsDefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build(),
                        GetLibraryItemsSort.builder()
                            .key("titleSort")
                            .title("Title")
                            .default_("asc")
                            .active(false)
                            .activeDirection(GetLibraryItemsActiveDirection.Ascending)
                            .defaultDirection(GetLibraryItemsDefaultDirection.Ascending)
                            .descKey("titleSort:desc")
                            .firstCharacterKey("/library/sections/2/firstCharacter")
                            .build()))
                    .field(List.of(
                        GetLibraryItemsField.builder()
                            .key("show.title")
                            .title("Show Title")
                            .type("string")
                            .subType("rating")
                            .build()))
                    .build()))
            .fieldType(List.of(
                GetLibraryItemsFieldType.builder()
                    .type("tag")
                    .operator(List.of(
                        GetLibraryItemsOperator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build(),
                GetLibraryItemsFieldType.builder()
                    .type("tag")
                    .operator(List.of(
                        GetLibraryItemsOperator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build(),
                GetLibraryItemsFieldType.builder()
                    .type("tag")
                    .operator(List.of(
                        GetLibraryItemsOperator.builder()
                            .key("=")
                            .title("is")
                            .build()))
                    .build()))
            .nocache(true)
            .viewMode(65592)
            .mixedParents(true)
            .meta(GetLibraryItemsMeta.builder()
                .type(List.of(
                    GetLibraryItemsLibraryResponseType.builder()
                        .key("/library/sections/2/all?type=2")
                        .type("show")
                        .title("TV Shows")
                        .active(false)
                        .filter(List.of(
                            GetLibraryItemsLibraryFilter.builder()
                                .filter("genre")
                                .filterType("string")
                                .key("/library/sections/2/genre?type=2")
                                .title("Genre")
                                .type("filter")
                                .build()))
                        .sort(List.of(
                            GetLibraryItemsLibrarySort.builder()
                                .key("titleSort")
                                .title("Title")
                                .default_("asc")
                                .active(false)
                                .activeDirection(GetLibraryItemsLibraryActiveDirection.Ascending)
                                .defaultDirection(GetLibraryItemsLibraryDefaultDirection.Ascending)
                                .descKey("titleSort:desc")
                                .firstCharacterKey("/library/sections/2/firstCharacter")
                                .build()))
                        .field(List.of(
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build(),
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build()))
                        .build(),
                    GetLibraryItemsLibraryResponseType.builder()
                        .key("/library/sections/2/all?type=2")
                        .type("show")
                        .title("TV Shows")
                        .active(false)
                        .filter(List.of(
                            GetLibraryItemsLibraryFilter.builder()
                                .filter("genre")
                                .filterType("string")
                                .key("/library/sections/2/genre?type=2")
                                .title("Genre")
                                .type("filter")
                                .build(),
                            GetLibraryItemsLibraryFilter.builder()
                                .filter("genre")
                                .filterType("string")
                                .key("/library/sections/2/genre?type=2")
                                .title("Genre")
                                .type("filter")
                                .build(),
                            GetLibraryItemsLibraryFilter.builder()
                                .filter("genre")
                                .filterType("string")
                                .key("/library/sections/2/genre?type=2")
                                .title("Genre")
                                .type("filter")
                                .build()))
                        .sort(List.of(
                            GetLibraryItemsLibrarySort.builder()
                                .key("titleSort")
                                .title("Title")
                                .default_("asc")
                                .active(false)
                                .activeDirection(GetLibraryItemsLibraryActiveDirection.Ascending)
                                .defaultDirection(GetLibraryItemsLibraryDefaultDirection.Ascending)
                                .descKey("titleSort:desc")
                                .firstCharacterKey("/library/sections/2/firstCharacter")
                                .build()))
                        .field(List.of(
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build(),
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build(),
                            GetLibraryItemsLibraryField.builder()
                                .key("show.title")
                                .title("Show Title")
                                .type("string")
                                .subType("rating")
                                .build()))
                        .build()))
                .fieldType(List.of(
                    GetLibraryItemsLibraryFieldType.builder()
                        .type("tag")
                        .operator(List.of(
                            GetLibraryItemsLibraryOperator.builder()
                                .key("=")
                                .title("is")
                                .build()))
                        .build(),
                    GetLibraryItemsLibraryFieldType.builder()
                        .type("tag")
                        .operator(List.of(
                            GetLibraryItemsLibraryOperator.builder()
                                .key("=")
                                .title("is")
                                .build()))
                        .build(),
                    GetLibraryItemsLibraryFieldType.builder()
                        .type("tag")
                        .operator(List.of(
                            GetLibraryItemsLibraryOperator.builder()
                                .key("=")
                                .title("is")
                                .build()))
                        .build()))
                .build())
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetRefreshLibraryMetadata() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetRefreshLibraryMetadataResponse res = sdk.library().getRefreshLibraryMetadata()
                .sectionKey(9518)
                .force(Force.ONE)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetSearchLibrary() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetSearchLibraryResponse res = sdk.library().getSearchLibrary()
                .sectionKey(9518)
                .type(GetSearchLibraryQueryParamType.TvShow)
                .call();

        assertEquals(
            GetSearchLibraryResponseBody.builder()
        .mediaContainer(GetSearchLibraryMediaContainer.builder()
            .size(2)
            .allowSync(false)
            .art("/:/resources/show-fanart.jpg")
            .identifier("com.plexapp.plugins.library")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1698860922)
            .nocache(true)
            .thumb("/:/resources/show.png")
            .title1("TV Shows")
            .title2("Search for ''")
            .viewGroup("season")
            .viewMode(65593)
            .metadata(List.of(
                GetSearchLibraryMetadata.builder()
                    .ratingKey("2")
                    .key("/library/metadata/2/children")
                    .parentRatingKey("1")
                    .guid("plex://season/602e67e766dfdb002c0a1b5b")
                    .parentGuid("plex://show/5d9c086c7d06d9001ffd27aa")
                    .parentStudio("Mutant Enemy Productions")
                    .type("season")
                    .title("Season 1")
                    .parentKey("/library/metadata/1")
                    .parentTitle("Firefly")
                    .summary("Captain Malcolm 'Mal' Reynolds is a former galactic war veteran who is the captain of the transport ship \"Serenity\". Mal and his crew, ensign Zoe Alleyne Washburne; Zoe's husband, pilot Hoban 'Wash' Washburne; muscular mercenary Jayne Cobb; young mechanic Kaylee Frye; former Alliance medical officer Simon Tam; his disturbed teenage sister River (both on the run from the interplanetary government \"The Alliance\"); the beautiful courtesan Inara Serra; and preacher Shepherd Book do any jobs, legal or illegal, they can find as the Serenity crew travels across the outskirts of outer space.")
                    .index(1)
                    .parentIndex(1)
                    .parentYear(2002)
                    .thumb("/library/metadata/2/thumb/1705636920")
                    .art("/library/metadata/1/art/1705636920")
                    .parentThumb("/library/metadata/1/thumb/1705636920")
                    .parentTheme("/library/metadata/1/theme/1705636920")
                    .addedAt(1705636916)
                    .updatedAt(1705636920)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetMetaDataByRatingKey() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMetaDataByRatingKeyResponse res = sdk.library().getMetaDataByRatingKey()
                .ratingKey(9518L)
                .call();

        assertEquals(
            GetMetaDataByRatingKeyResponseBody.builder()
        .mediaContainer(GetMetaDataByRatingKeyMediaContainer.builder()
            .size(1)
            .allowSync(true)
            .identifier("com.plexapp.plugins.library")
            .librarySectionID(1)
            .librarySectionTitle("Movies")
            .librarySectionUUID("cfc899d7-3000-46f6-8489-b9592714ada5")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1698860922)
            .metadata(List.of(
                GetMetaDataByRatingKeyMetadata.builder()
                    .ratingKey("17")
                    .key("/library/metadata/17")
                    .guid("plex://movie/5d77683f6f4521001ea9dc53")
                    .studio("Universal Pictures")
                    .type("movie")
                    .title("Serenity")
                    .librarySectionTitle("Movies")
                    .librarySectionID(1)
                    .librarySectionKey("/library/sections/1")
                    .contentRating("PG-13")
                    .summary("Serenity continues the story of the TV series it was based upon (\"Firefly\"). River Tam had a secret - one in which she's not even aware - so dangerous, no one's safe, as an Alliance operative's sent to capture her, and all others are considered irrelevant to his job.")
                    .rating(8.2d)
                    .audienceRating(9.1d)
                    .year(2005)
                    .tagline("They aim to misbehave.")
                    .thumb("/library/metadata/17/thumb/1705637165")
                    .art("/library/metadata/17/art/1705637165")
                    .duration(141417)
                    .originallyAvailableAt(LocalDate.parse("2005-09-29T00:00:00Z"))
                    .addedAt(1705637164)
                    .updatedAt(1705637165)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .hasPremiumPrimaryExtra("1")
                    .ratingImage("rottentomatoes://image.rating.ripe")
                    .media(List.of(
                        GetMetaDataByRatingKeyMedia.builder()
                            .id(15)
                            .duration(141417)
                            .bitrate(2278)
                            .width(1920)
                            .height(814)
                            .aspectRatio(2.35d)
                            .audioChannels(2)
                            .audioCodec("aac")
                            .videoCodec("h264")
                            .videoResolution("1080")
                            .container("mp4")
                            .videoFrameRate("24p")
                            .optimizedForStreaming(0)
                            .audioProfile("lc")
                            .has64bitOffsets(false)
                            .videoProfile("high")
                            .part(List.of(
                                GetMetaDataByRatingKeyPart.builder()
                                    .id(15)
                                    .key("/library/parts/15/1705637151/file.mp4")
                                    .duration(141417)
                                    .file("/movies/Serenity (2005)/Serenity (2005).mp4")
                                    .size(40271948)
                                    .audioProfile("lc")
                                    .container("mp4")
                                    .has64bitOffsets(false)
                                    .optimizedForStreaming(false)
                                    .videoProfile("high")
                                    .stream(List.of(
                                        GetMetaDataByRatingKeyStream.builder()
                                            .id(29)
                                            .streamType(2)
                                            .default_(true)
                                            .codec("aac")
                                            .index(0)
                                            .bitrate(128)
                                            .bitDepth(8)
                                            .chromaLocation("left")
                                            .chromaSubsampling("14520")
                                            .codedHeight(816)
                                            .codedWidth(1920)
                                            .colorPrimaries("bt709")
                                            .colorRange("tv")
                                            .colorSpace("bt709")
                                            .colorTrc("bt709")
                                            .frameRate(24)
                                            .hasScalingMatrix(false)
                                            .height(814)
                                            .level(40)
                                            .profile("lc")
                                            .refFrames(4)
                                            .scanType("progressive")
                                            .streamIdentifier("1")
                                            .width(1920)
                                            .displayTitle("English (AAC Stereo)")
                                            .extendedDisplayTitle("English (AAC Stereo)")
                                            .selected(true)
                                            .channels(2)
                                            .language("English")
                                            .languageTag("en")
                                            .languageCode("eng")
                                            .samplingRate(44100)
                                            .build()))
                                    .build()))
                            .build()))
                    .genre(List.of(
                        GetMetaDataByRatingKeyGenre.builder()
                            .id(184)
                            .filter("genre=184")
                            .tag("Thriller")
                            .build()))
                    .country(List.of(
                        GetMetaDataByRatingKeyCountry.builder()
                            .id(116)
                            .filter("country=116")
                            .tag("United States of America")
                            .build()))
                    .guids(List.of(
                        Guids.builder()
                            .id("tvdb://2337")
                            .build()))
                    .ratings(List.of(
                        Ratings.builder()
                            .image("themoviedb://image.rating")
                            .value(7.4d)
                            .type("audience")
                            .build()))
                    .director(List.of(
                        GetMetaDataByRatingKeyDirector.builder()
                            .id(130)
                            .filter("director=130")
                            .tag("Joss Whedon")
                            .tagKey("5d776828880197001ec90e8f")
                            .thumb("https://metadata-static.plex.tv/people/5d776828880197001ec90e8f.jpg")
                            .build()))
                    .writer(List.of(
                        GetMetaDataByRatingKeyWriter.builder()
                            .id(132)
                            .filter("writer=132")
                            .tag("Joss Whedon")
                            .tagKey("5d776828880197001ec90e8f")
                            .thumb("https://metadata-static.plex.tv/people/5d776828880197001ec90e8f.jpg")
                            .build()))
                    .role(List.of(
                        GetMetaDataByRatingKeyRole.builder()
                            .id(220)
                            .filter("actor=220")
                            .tag("Dennis Keiffer")
                            .tagKey("5d77683554f42c001f8c4708")
                            .role("Bar Guy (uncredited)")
                            .thumb("https://metadata-static.plex.tv/6/people/648e9a7ea1d537bccfcd7615134b78ce.jpg")
                            .build()))
                    .producer(List.of(
                        Producer.builder()
                            .id(221)
                            .filter("producer=221")
                            .tag("Barry Mendel")
                            .tagKey("5d776826961905001eb90e2b")
                            .thumb("https://metadata-static.plex.tv/8/people/87877371326a964634d18556d94547e1.jpg")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetMetadataChildren_IncludeStream() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMetadataChildrenResponse res = sdk.library().getMetadataChildren()
                .ratingKey(6818.20d)
                .includeElements("<value>")
                .call();

        assertEquals(
            GetMetadataChildrenResponseBody.builder()
        .mediaContainer(GetMetadataChildrenMediaContainer.builder()
            .size(3)
            .allowSync(true)
            .art("/library/metadata/30072/art/1705739923")
            .identifier("com.plexapp.plugins.library")
            .key("30072")
            .librarySectionID(2)
            .librarySectionTitle("TV Shows")
            .librarySectionUUID("4bb2521c-8ba9-459b-aaee-8ab8bc35eabd")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .nocache(true)
            .parentIndex(1)
            .parentTitle("Reacher")
            .parentYear(2022)
            .summary("When retired Military Police Officer Jack Reacher is arrested for a murder he did not commit, he finds himself in the middle of a deadly conspiracy full of dirty cops, shady businessmen, and scheming politicians. With nothing but his wits, he must figure out what is happening in Margrave, Georgia.")
            .theme("/library/metadata/30072/theme/1705739923")
            .thumb("/library/metadata/30072/thumb/1705739923")
            .title1("TV Shows")
            .title2("Reacher")
            .viewGroup("season")
            .viewMode(65593)
            .directory(List.of(
                GetMetadataChildrenDirectory.builder()
                    .leafCount(16)
                    .thumb("/library/metadata/30072/thumb/1705739923")
                    .viewedLeafCount(16)
                    .key("/library/metadata/30072/allLeaves")
                    .title("All episodes")
                    .build()))
            .metadata(List.of(
                GetMetadataChildrenMetadata.builder()
                    .ratingKey("66488")
                    .key("/library/metadata/66488/children")
                    .parentRatingKey("30072")
                    .guid("plex://season/652aea6549508477c34c6000")
                    .parentGuid("plex://show/5d9c09190aaccd001f8f42f0")
                    .parentStudio("Amazon Studios")
                    .type("season")
                    .title("Season 2")
                    .parentKey("/library/metadata/30072")
                    .parentTitle("Reacher")
                    .summary("Based on\"Bad Luck and Trouble,\" when members of Reacher's old military unit start turning up dead, Reacher has just one thing on his mind—revenge.")
                    .index(2)
                    .parentIndex(1)
                    .viewCount(11)
                    .lastViewedAt(1705646565)
                    .parentYear(2022)
                    .thumb("/library/metadata/66488/thumb/1703065033")
                    .art("/library/metadata/30072/art/1705739923")
                    .parentThumb("/library/metadata/30072/thumb/1705739923")
                    .parentTheme("/library/metadata/30072/theme/1705739923")
                    .leafCount(8)
                    .viewedLeafCount(8)
                    .addedAt(1702602021)
                    .updatedAt(1703065033)
                    .userRating(9)
                    .skipCount(1)
                    .lastRatedAt(1703881224)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetMetadataChildren_IncludeStreamOtheritem() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMetadataChildrenResponse res = sdk.library().getMetadataChildren()
                .ratingKey(3595.08d)
                .includeElements("<value>")
                .call();

        assertEquals(
            GetMetadataChildrenResponseBody.builder()
        .mediaContainer(GetMetadataChildrenMediaContainer.builder()
            .size(3)
            .allowSync(true)
            .art("/library/metadata/30072/art/1705739923")
            .identifier("com.plexapp.plugins.library")
            .key("30072")
            .librarySectionID(2)
            .librarySectionTitle("TV Shows")
            .librarySectionUUID("4bb2521c-8ba9-459b-aaee-8ab8bc35eabd")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .nocache(true)
            .parentIndex(1)
            .parentTitle("Reacher")
            .parentYear(2022)
            .summary("When retired Military Police Officer Jack Reacher is arrested for a murder he did not commit, he finds himself in the middle of a deadly conspiracy full of dirty cops, shady businessmen, and scheming politicians. With nothing but his wits, he must figure out what is happening in Margrave, Georgia.")
            .theme("/library/metadata/30072/theme/1705739923")
            .thumb("/library/metadata/30072/thumb/1705739923")
            .title1("TV Shows")
            .title2("Reacher")
            .viewGroup("season")
            .viewMode(65593)
            .directory(List.of(
                GetMetadataChildrenDirectory.builder()
                    .leafCount(16)
                    .thumb("/library/metadata/30072/thumb/1705739923")
                    .viewedLeafCount(16)
                    .key("/library/metadata/30072/allLeaves")
                    .title("All episodes")
                    .build()))
            .metadata(List.of(
                GetMetadataChildrenMetadata.builder()
                    .ratingKey("66488")
                    .key("/library/metadata/66488/children")
                    .parentRatingKey("30072")
                    .guid("plex://season/652aea6549508477c34c6000")
                    .parentGuid("plex://show/5d9c09190aaccd001f8f42f0")
                    .parentStudio("Amazon Studios")
                    .type("season")
                    .title("Season 2")
                    .parentKey("/library/metadata/30072")
                    .parentTitle("Reacher")
                    .summary("Based on\"Bad Luck and Trouble,\" when members of Reacher's old military unit start turning up dead, Reacher has just one thing on his mind—revenge.")
                    .index(2)
                    .parentIndex(1)
                    .viewCount(11)
                    .lastViewedAt(1705646565)
                    .parentYear(2022)
                    .thumb("/library/metadata/66488/thumb/1703065033")
                    .art("/library/metadata/30072/art/1705739923")
                    .parentThumb("/library/metadata/30072/thumb/1705739923")
                    .parentTheme("/library/metadata/30072/theme/1705739923")
                    .leafCount(8)
                    .viewedLeafCount(8)
                    .addedAt(1702602021)
                    .updatedAt(1703065033)
                    .userRating(9)
                    .skipCount(1)
                    .lastRatedAt(1703881224)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetMetadataChildren_IncludeStreamOtheritemAnotheritem() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMetadataChildrenResponse res = sdk.library().getMetadataChildren()
                .ratingKey(4370.32d)
                .includeElements("<value>")
                .call();

        assertEquals(
            GetMetadataChildrenResponseBody.builder()
        .mediaContainer(GetMetadataChildrenMediaContainer.builder()
            .size(3)
            .allowSync(true)
            .art("/library/metadata/30072/art/1705739923")
            .identifier("com.plexapp.plugins.library")
            .key("30072")
            .librarySectionID(2)
            .librarySectionTitle("TV Shows")
            .librarySectionUUID("4bb2521c-8ba9-459b-aaee-8ab8bc35eabd")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1701731894)
            .nocache(true)
            .parentIndex(1)
            .parentTitle("Reacher")
            .parentYear(2022)
            .summary("When retired Military Police Officer Jack Reacher is arrested for a murder he did not commit, he finds himself in the middle of a deadly conspiracy full of dirty cops, shady businessmen, and scheming politicians. With nothing but his wits, he must figure out what is happening in Margrave, Georgia.")
            .theme("/library/metadata/30072/theme/1705739923")
            .thumb("/library/metadata/30072/thumb/1705739923")
            .title1("TV Shows")
            .title2("Reacher")
            .viewGroup("season")
            .viewMode(65593)
            .directory(List.of(
                GetMetadataChildrenDirectory.builder()
                    .leafCount(16)
                    .thumb("/library/metadata/30072/thumb/1705739923")
                    .viewedLeafCount(16)
                    .key("/library/metadata/30072/allLeaves")
                    .title("All episodes")
                    .build()))
            .metadata(List.of(
                GetMetadataChildrenMetadata.builder()
                    .ratingKey("66488")
                    .key("/library/metadata/66488/children")
                    .parentRatingKey("30072")
                    .guid("plex://season/652aea6549508477c34c6000")
                    .parentGuid("plex://show/5d9c09190aaccd001f8f42f0")
                    .parentStudio("Amazon Studios")
                    .type("season")
                    .title("Season 2")
                    .parentKey("/library/metadata/30072")
                    .parentTitle("Reacher")
                    .summary("Based on\"Bad Luck and Trouble,\" when members of Reacher's old military unit start turning up dead, Reacher has just one thing on his mind—revenge.")
                    .index(2)
                    .parentIndex(1)
                    .viewCount(11)
                    .lastViewedAt(1705646565)
                    .parentYear(2022)
                    .thumb("/library/metadata/66488/thumb/1703065033")
                    .art("/library/metadata/30072/art/1705739923")
                    .parentThumb("/library/metadata/30072/thumb/1705739923")
                    .parentTheme("/library/metadata/30072/theme/1705739923")
                    .leafCount(8)
                    .viewedLeafCount(8)
                    .addedAt(1702602021)
                    .updatedAt(1703065033)
                    .userRating(9)
                    .skipCount(1)
                    .lastRatedAt(1703881224)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetTopWatchedContent_() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetTopWatchedContentResponse res = sdk.library().getTopWatchedContent()
                .type(GetTopWatchedContentQueryParamType.TvShow)
                .includeGuids(1L)
                .call();

        assertEquals(
            GetTopWatchedContentResponseBody.builder()
        .mediaContainer(GetTopWatchedContentMediaContainer.builder()
            .size(1)
            .allowSync(true)
            .identifier("com.plexapp.plugins.library")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1698860922)
            .metadata(List.of(
                GetTopWatchedContentMetadata.builder()
                    .ratingKey("17")
                    .key("/library/metadata/17")
                    .guid("plex://movie/5d77683f6f4521001ea9dc53")
                    .slug("waterloo-road")
                    .studio("Universal Pictures")
                    .type("movie")
                    .title("Serenity")
                    .librarySectionTitle("Movies")
                    .librarySectionID(1)
                    .librarySectionKey("/library/sections/1")
                    .contentRating("PG-13")
                    .summary("Serenity continues the story of the TV series it was based upon (\"Firefly\"). River Tam had a secret - one in which she's not even aware - so dangerous, no one's safe, as an Alliance operative's sent to capture her, and all others are considered irrelevant to his job.")
                    .index(1L)
                    .audienceRating(9.1d)
                    .year(2005)
                    .tagline("They aim to misbehave.")
                    .thumb("/library/metadata/17/thumb/1705637165")
                    .art("/library/metadata/17/art/1705637165")
                    .duration(141417)
                    .originallyAvailableAt(LocalDate.parse("2005-09-29T00:00:00Z"))
                    .leafCount(222L)
                    .viewedLeafCount(100L)
                    .childCount(13L)
                    .addedAt(1705637164)
                    .updatedAt(1705637165)
                    .globalViewCount(80L)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .genre(List.of(
                        GetTopWatchedContentGenre.builder()
                            .id(184)
                            .filter("genre=184")
                            .tag("Thriller")
                            .build()))
                    .country(List.of(
                        GetTopWatchedContentCountry.builder()
                            .id(116)
                            .filter("country=116")
                            .tag("United States of America")
                            .build()))
                    .guids(List.of(
                        GetTopWatchedContentGuids.builder()
                            .id("tvdb://2337")
                            .build()))
                    .role(List.of(
                        GetTopWatchedContentRole.builder()
                            .id(220)
                            .filter("actor=220")
                            .tag("Dennis Keiffer")
                            .tagKey("5d77683554f42c001f8c4708")
                            .role("Bar Guy (uncredited)")
                            .thumb("https://metadata-static.plex.tv/6/people/648e9a7ea1d537bccfcd7615134b78ce.jpg")
                            .build()))
                    .user(List.of(
                        User.builder()
                            .id(220)
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testLibrary_GetOnDeck() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetOnDeckResponse res = sdk.library().getOnDeck()
                .call();

        assertEquals(
            GetOnDeckResponseBody.builder()
        .mediaContainer(GetOnDeckMediaContainer.builder()
            .size(16d)
            .identifier("com.plexapp.plugins.library")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1680021154d)
            .metadata(List.of(
                GetOnDeckMetadata.builder()
                    .librarySectionID(2d)
                    .librarySectionTitle("TV Shows")
                    .librarySectionUUID("4bb2521c-8ba9-459b-aaee-8ab8bc35eabd")
                    .ratingKey(49564d)
                    .key("/library/metadata/49564")
                    .parentRatingKey(49557d)
                    .grandparentRatingKey(49556d)
                    .guid("plex://episode/5ea7d7402e7ab10042e74d4f")
                    .parentGuid("plex://season/602e754d67f4c8002ce54b3d")
                    .grandparentGuid("plex://show/5d9c090e705e7a001e6e94d8")
                    .type("episode")
                    .title("Circus")
                    .grandparentKey("/library/metadata/49556")
                    .parentKey("/library/metadata/49557")
                    .librarySectionKey("/library/sections/2")
                    .grandparentTitle("Bluey (2018)")
                    .parentTitle("Season 2")
                    .contentRating("TV-Y")
                    .summary("Bluey is the ringmaster in a game of circus with her friends but Hercules wants to play his motorcycle game instead. Luckily Bluey has a solution to keep everyone happy.")
                    .index(33d)
                    .parentIndex(2d)
                    .lastViewedAt(1681908352d)
                    .year(2018d)
                    .thumb("/library/metadata/49564/thumb/1654258204")
                    .art("/library/metadata/49556/art/1680939546")
                    .parentThumb("/library/metadata/49557/thumb/1654258204")
                    .grandparentThumb("/library/metadata/49556/thumb/1680939546")
                    .grandparentArt("/library/metadata/49556/art/1680939546")
                    .grandparentTheme("/library/metadata/49556/theme/1680939546")
                    .duration(420080d)
                    .originallyAvailableAt(OffsetDateTime.parse("2020-10-31T00:00:00Z"))
                    .addedAt(1654258196d)
                    .updatedAt(1654258204d)
                    .media(List.of(
                        GetOnDeckMedia.builder()
                            .id(80994d)
                            .duration(420080d)
                            .bitrate(1046d)
                            .width(1920d)
                            .height(1080d)
                            .aspectRatio(1.78d)
                            .audioChannels(2d)
                            .audioCodec("aac")
                            .videoCodec("hevc")
                            .videoResolution("1080")
                            .container("mkv")
                            .videoFrameRate("PAL")
                            .audioProfile("lc")
                            .videoProfile("main")
                            .part(List.of(
                                GetOnDeckPart.builder()
                                    .id(80994d)
                                    .key("/library/parts/80994/1655007810/file.mkv")
                                    .duration(420080d)
                                    .file("/tvshows/Bluey (2018)/Bluey (2018) - S02E33 - Circus.mkv")
                                    .size(55148931d)
                                    .audioProfile("lc")
                                    .container("mkv")
                                    .videoProfile("main")
                                    .stream(List.of(
                                        GetOnDeckStream.builder()
                                            .id(211234d)
                                            .streamType(1d)
                                            .codec("hevc")
                                            .index(0d)
                                            .bitrate(918d)
                                            .language("English")
                                            .languageTag("en")
                                            .languageCode("eng")
                                            .bitDepth(8d)
                                            .chromaLocation("left")
                                            .chromaSubsampling("4:2:0")
                                            .codedHeight(1080d)
                                            .codedWidth(1920d)
                                            .colorRange("tv")
                                            .frameRate(25d)
                                            .height(1080d)
                                            .level(120d)
                                            .profile("main")
                                            .refFrames(1d)
                                            .width(1920d)
                                            .displayTitle("1080p (HEVC Main)")
                                            .extendedDisplayTitle("1080p (HEVC Main)")
                                            .build()))
                                    .build()))
                            .build()))
                    .guids(List.of(
                        GetOnDeckGuids.builder()
                            .id("imdb://tt13303712")
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

}