/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import dev.plexapi.sdk.models.operations.GetSearchResultsCountry;
import dev.plexapi.sdk.models.operations.GetSearchResultsDirector;
import dev.plexapi.sdk.models.operations.GetSearchResultsGenre;
import dev.plexapi.sdk.models.operations.GetSearchResultsMedia;
import dev.plexapi.sdk.models.operations.GetSearchResultsMediaContainer;
import dev.plexapi.sdk.models.operations.GetSearchResultsMetadata;
import dev.plexapi.sdk.models.operations.GetSearchResultsPart;
import dev.plexapi.sdk.models.operations.GetSearchResultsResponse;
import dev.plexapi.sdk.models.operations.GetSearchResultsResponseBody;
import dev.plexapi.sdk.models.operations.GetSearchResultsRole;
import dev.plexapi.sdk.models.operations.GetSearchResultsWriter;
import dev.plexapi.sdk.models.operations.PerformSearchResponse;
import dev.plexapi.sdk.models.operations.PerformVoiceSearchResponse;
import dev.plexapi.sdk.models.operations.Provider;
import java.lang.Exception;
import java.time.OffsetDateTime;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class SearchTests { 

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testSearch_PerformSearch() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        PerformSearchResponse res = sdk.search().performSearch()
                .query("dylan")
                .sectionId(4561.50d)
                .limit(5d)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testSearch_PerformVoiceSearch() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        PerformVoiceSearchResponse res = sdk.search().performVoiceSearch()
                .query("dead+poop")
                .sectionId(5684.34d)
                .limit(5d)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testSearch_GetSearchResults() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetSearchResultsResponse res = sdk.search().getSearchResults()
                .query("110")
                .call();

        assertEquals(
            GetSearchResultsResponseBody.builder()
        .mediaContainer(GetSearchResultsMediaContainer.builder()
            .size(26d)
            .identifier("com.plexapp.plugins.library")
            .mediaTagPrefix("/system/bundle/media/flags/")
            .mediaTagVersion(1680021154d)
            .metadata(List.of(
                GetSearchResultsMetadata.builder()
                    .librarySectionID(1d)
                    .librarySectionTitle("Movies")
                    .librarySectionUUID("322a231a-b7f7-49f5-920f-14c61199cd30")
                    .sourceTitle("Hera")
                    .ratingKey(10398d)
                    .key("/library/metadata/10398")
                    .guid("plex://movie/5d7768284de0ee001fcc8f52")
                    .studio("Paramount")
                    .type("movie")
                    .title("Mission: Impossible")
                    .contentRating("PG-13")
                    .summary("When Ethan Hunt the leader of a crack espionage team whose perilous operation has gone awry with no explanation discovers that a mole has penetrated the CIA he's surprised to learn that he's the No. 1 suspect. To clear his name Hunt now must ferret out the real double agent and in the process even the score.")
                    .rating(6.6d)
                    .audienceRating(7.1d)
                    .year(1996d)
                    .tagline("Expect the impossible.")
                    .thumb("/library/metadata/10398/thumb/1679505055")
                    .art("/library/metadata/10398/art/1679505055")
                    .duration(6612628d)
                    .originallyAvailableAt(OffsetDateTime.parse("1996-05-22T00:00:00Z"))
                    .addedAt(1589234571d)
                    .updatedAt(1679505055d)
                    .audienceRatingImage("rottentomatoes://image.rating.upright")
                    .chapterSource("media")
                    .primaryExtraKey("/library/metadata/10501")
                    .ratingImage("rottentomatoes://image.rating.ripe")
                    .media(List.of(
                        GetSearchResultsMedia.builder()
                            .id(26610d)
                            .duration(6612628d)
                            .bitrate(4751d)
                            .width(1916d)
                            .height(796d)
                            .aspectRatio(2.35d)
                            .audioChannels(6d)
                            .audioCodec("aac")
                            .videoCodec("hevc")
                            .videoResolution(1080d)
                            .container("mkv")
                            .videoFrameRate("24p")
                            .audioProfile("lc")
                            .videoProfile("main 10")
                            .part(List.of(
                                GetSearchResultsPart.builder()
                                    .id(26610d)
                                    .key("/library/parts/26610/1589234571/file.mkv")
                                    .duration(6612628d)
                                    .file("/movies/Mission Impossible (1996)/Mission Impossible (1996) Bluray-1080p.mkv")
                                    .size(3926903851d)
                                    .audioProfile("lc")
                                    .container("mkv")
                                    .videoProfile("main 10")
                                    .build()))
                            .build()))
                    .genre(List.of(
                        GetSearchResultsGenre.builder()
                            .tag("Action")
                            .build()))
                    .director(List.of(
                        GetSearchResultsDirector.builder()
                            .tag("Brian De Palma")
                            .build()))
                    .writer(List.of(
                        GetSearchResultsWriter.builder()
                            .tag("David Koepp")
                            .build()))
                    .country(List.of(
                        GetSearchResultsCountry.builder()
                            .tag("United States of America")
                            .build()))
                    .role(List.of(
                        GetSearchResultsRole.builder()
                            .tag("Tom Cruise")
                            .build()))
                    .build()))
            .provider(List.of(
                Provider.builder()
                    .key("/system/search")
                    .title("Local Network")
                    .type("mixed")
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

}