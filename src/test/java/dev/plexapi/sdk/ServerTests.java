/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package dev.plexapi.sdk;

import static org.junit.jupiter.api.Assertions.assertEquals;

import dev.plexapi.sdk.models.operations.Action;
import dev.plexapi.sdk.models.operations.Device;
import dev.plexapi.sdk.models.operations.Feature;
import dev.plexapi.sdk.models.operations.GetAvailableClientsMediaContainer;
import dev.plexapi.sdk.models.operations.GetAvailableClientsResponse;
import dev.plexapi.sdk.models.operations.GetAvailableClientsResponseBody;
import dev.plexapi.sdk.models.operations.GetDevicesMediaContainer;
import dev.plexapi.sdk.models.operations.GetDevicesResponse;
import dev.plexapi.sdk.models.operations.GetDevicesResponseBody;
import dev.plexapi.sdk.models.operations.GetMediaProvidersMediaContainer;
import dev.plexapi.sdk.models.operations.GetMediaProvidersResponse;
import dev.plexapi.sdk.models.operations.GetMediaProvidersResponseBody;
import dev.plexapi.sdk.models.operations.GetMyPlexAccountResponse;
import dev.plexapi.sdk.models.operations.GetMyPlexAccountResponseBody;
import dev.plexapi.sdk.models.operations.GetResizedPhotoRequest;
import dev.plexapi.sdk.models.operations.GetResizedPhotoResponse;
import dev.plexapi.sdk.models.operations.GetServerCapabilitiesResponse;
import dev.plexapi.sdk.models.operations.GetServerIdentityMediaContainer;
import dev.plexapi.sdk.models.operations.GetServerIdentityResponse;
import dev.plexapi.sdk.models.operations.GetServerIdentityResponseBody;
import dev.plexapi.sdk.models.operations.GetServerListMediaContainer;
import dev.plexapi.sdk.models.operations.GetServerListResponse;
import dev.plexapi.sdk.models.operations.GetServerListResponseBody;
import dev.plexapi.sdk.models.operations.GetServerListServer;
import dev.plexapi.sdk.models.operations.GetServerPreferencesMediaContainer;
import dev.plexapi.sdk.models.operations.GetServerPreferencesResponse;
import dev.plexapi.sdk.models.operations.GetServerPreferencesResponseBody;
import dev.plexapi.sdk.models.operations.MediaProvider;
import dev.plexapi.sdk.models.operations.MinSize;
import dev.plexapi.sdk.models.operations.MyPlex;
import dev.plexapi.sdk.models.operations.Server;
import dev.plexapi.sdk.models.operations.Setting;
import dev.plexapi.sdk.models.operations.Upscale;
import java.lang.Exception;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

public class ServerTests { 

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetServerCapabilities() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetServerCapabilitiesResponse res = sdk.server().getServerCapabilities()
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetServerPreferences() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetServerPreferencesResponse res = sdk.server().getServerPreferences()
                .call();

        assertEquals(
            GetServerPreferencesResponseBody.builder()
        .mediaContainer(GetServerPreferencesMediaContainer.builder()
            .size(161)
            .setting(List.of(
                Setting.builder()
                    .id("EnableDatabaseTrace")
                    .label("")
                    .summary("")
                    .type("bool")
                    .default_(false)
                    .value(false)
                    .hidden(true)
                    .advanced(false)
                    .group("")
                    .enumValues("1:admin only|2:everyone")
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetAvailableClients() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetAvailableClientsResponse res = sdk.server().getAvailableClients()
                .call();

        assertEquals(
            GetAvailableClientsResponseBody.builder()
        .mediaContainer(GetAvailableClientsMediaContainer.builder()
            .size(1d)
            .server(List.of(
                Server.builder()
                    .name("iPad")
                    .host("10.10.10.102")
                    .address("10.10.10.102")
                    .port(32500d)
                    .machineIdentifier("A2E901F8-E016-43A7-ADFB-EF8CA8A4AC05")
                    .version("8.17")
                    .protocol("plex")
                    .product("Plex for iOS")
                    .deviceClass("tablet")
                    .protocolVersion(2d)
                    .protocolCapabilities("playback,playqueues,timeline,provider-playback")
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetDevices() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetDevicesResponse res = sdk.server().getDevices()
                .call();

        assertEquals(
            GetDevicesResponseBody.builder()
        .mediaContainer(GetDevicesMediaContainer.builder()
            .size(151d)
            .identifier("com.plexapp.system.devices")
            .device(List.of(
                Device.builder()
                    .id(1d)
                    .name("iPhone")
                    .platform("iOS")
                    .createdAt(1654131230d)
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetServerIdentity() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetServerIdentityResponse res = sdk.server().getServerIdentity()
                .call();

        assertEquals(
            GetServerIdentityResponseBody.builder()
        .mediaContainer(GetServerIdentityMediaContainer.builder()
            .size(0d)
            .machineIdentifier("96f2fe7a78c9dc1f16a16bedbe90f98149be16b4")
            .version("1.31.3.6868-28fc46b27")
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetMyPlexAccount() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMyPlexAccountResponse res = sdk.server().getMyPlexAccount()
                .call();

        assertEquals(
            GetMyPlexAccountResponseBody.builder()
        .myPlex(MyPlex.builder()
            .authToken("Z5v-PrNASDFpsaCi3CPK7")
            .username("example.email@mail.com")
            .mappingState("mapped")
            .signInState("ok")
            .publicAddress("140.20.68.140")
            .publicPort(32400d)
            .privateAddress("10.10.10.47")
            .privatePort(32400d)
            .subscriptionFeatures("federated-auth,hardware_transcoding,home,hwtranscode,item_clusters,kevin-bacon,livetv,loudness,lyrics,music-analysis,music_videos,pass,photo_autotags,photos-v5,photosV6-edit,photosV6-tv-albums,premium_music_metadata,radio,server-manager,session_bandwidth_restrictions,session_kick,shared-radio,sync,trailers,tuner-sharing,type-first,unsupportedtuners,webhooks")
            .subscriptionState("Active")
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetResizedPhoto() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetResizedPhotoRequest req = GetResizedPhotoRequest.builder()
                .width(110d)
                .height(165d)
                .opacity(100L)
                .blur(20d)
                .minSize(MinSize.ONE)
                .upscale(Upscale.ONE)
                .url("/library/metadata/49564/thumb/1654258204")
                .build();

        GetResizedPhotoResponse res = sdk.server().getResizedPhoto()
                .request(req)
                .call();


    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetMediaProviders() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetMediaProvidersResponse res = sdk.server().getMediaProviders()
                .xPlexToken("CV5xoxjTpFKUzBTShsaf")
                .call();

        assertEquals(
            GetMediaProvidersResponseBody.builder()
        .mediaContainer(GetMediaProvidersMediaContainer.builder()
            .mediaProvider(List.of(
                MediaProvider.builder()
                    .feature(List.of(
                        Feature.builder()
                            .type("<value>")
                            .flavor("global")
                            .scrobbleKey("/:/scrobble/new")
                            .unscrobbleKey("/:/unscrobble/new")
                            .action(List.of(
                                Action.builder()
                                    .id("addToContinueWatching")
                                    .key("/actions/addToContinueWatching")
                                    .build()))
                            .build(),
                        Feature.builder()
                            .type("<value>")
                            .flavor("global")
                            .scrobbleKey("/:/scrobble/new")
                            .unscrobbleKey("/:/unscrobble/new")
                            .action(List.of(
                                Action.builder()
                                    .id("addToContinueWatching")
                                    .key("/actions/addToContinueWatching")
                                    .build(),
                                Action.builder()
                                    .id("addToContinueWatching")
                                    .key("/actions/addToContinueWatching")
                                    .build()))
                            .build(),
                        Feature.builder()
                            .type("<value>")
                            .flavor("global")
                            .scrobbleKey("/:/scrobble/new")
                            .unscrobbleKey("/:/unscrobble/new")
                            .action(List.of(
                                Action.builder()
                                    .id("addToContinueWatching")
                                    .key("/actions/addToContinueWatching")
                                    .build(),
                                Action.builder()
                                    .id("addToContinueWatching")
                                    .key("/actions/addToContinueWatching")
                                    .build()))
                            .build()))
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

    @Disabled // test marked as skipped for java or generated unit tests not production ready yet
    @Test
    public void testServer_GetServerList() throws Exception {


        PlexAPI sdk = PlexAPI.builder()
                .accessToken("<YOUR_API_KEY_HERE>")
                .clientID("gcgzw5rz2xovp84b4vha3a40")
                .clientName("Plex Web")
                .clientVersion("4.133.0")
                .clientPlatform("Chrome")
                .deviceName("Linux")
            .build();

        GetServerListResponse res = sdk.server().getServerList()
                .call();

        assertEquals(
            GetServerListResponseBody.builder()
        .mediaContainer(GetServerListMediaContainer.builder()
            .size(1d)
            .server(List.of(
                GetServerListServer.builder()
                    .name("Hera")
                    .host("10.10.10.47")
                    .address("10.10.10.47")
                    .port(32400d)
                    .machineIdentifier("96f2fe7a78c9dc1f16a16bedbe90f98149be16b4")
                    .version("1.31.3.6868-28fc46b27")
                    .build()))
            .build())
        .build(),
            res.object().get());
    }

}